
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08006760  08006760  00016760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a10  08006a10  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a10  08006a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a18  08006a18  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a1c  08006a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000028d0  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000295c  2000295c  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d77f  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002021  00000000  00000000  0002d83b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000898  00000000  00000000  000301b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021fff  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b65b  00000000  00000000  00052a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0d9f  00000000  00000000  0005e0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012ee41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cc4  00000000  00000000  0012ee94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006744 	.word	0x08006744

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08006744 	.word	0x08006744

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 b96e 	b.w	8000f10 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468c      	mov	ip, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8083 	bne.w	8000d62 <__udivmoddi4+0x116>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	d947      	bls.n	8000cf2 <__udivmoddi4+0xa6>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b142      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c68:	f1c2 0020 	rsb	r0, r2, #32
 8000c6c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c70:	4091      	lsls	r1, r2
 8000c72:	4097      	lsls	r7, r2
 8000c74:	ea40 0c01 	orr.w	ip, r0, r1
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbbc f6f8 	udiv	r6, ip, r8
 8000c84:	fa1f fe87 	uxth.w	lr, r7
 8000c88:	fb08 c116 	mls	r1, r8, r6, ip
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb06 f10e 	mul.w	r1, r6, lr
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9e:	f080 8119 	bcs.w	8000ed4 <__udivmoddi4+0x288>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8116 	bls.w	8000ed4 <__udivmoddi4+0x288>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cca:	f080 8105 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f240 8102 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	443c      	add	r4, r7
 8000cd8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cdc:	eba4 040e 	sub.w	r4, r4, lr
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	b902      	cbnz	r2, 8000cf6 <__udivmoddi4+0xaa>
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d150      	bne.n	8000da0 <__udivmoddi4+0x154>
 8000cfe:	1bcb      	subs	r3, r1, r7
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	2601      	movs	r6, #1
 8000d0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d0e:	0c21      	lsrs	r1, r4, #16
 8000d10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d18:	fb08 f30c 	mul.w	r3, r8, ip
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000d20:	1879      	adds	r1, r7, r1
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0xe2>
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	f200 80e9 	bhi.w	8000f00 <__udivmoddi4+0x2b4>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1ac9      	subs	r1, r1, r3
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x10c>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x10a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80d9 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e7bf      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0x12e>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80b1 	beq.w	8000ece <__udivmoddi4+0x282>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x1cc>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0x140>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80b8 	bhi.w	8000efc <__udivmoddi4+0x2b0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	468c      	mov	ip, r1
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0a8      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0xa0>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f603 	lsr.w	r6, r0, r3
 8000da8:	4097      	lsls	r7, r2
 8000daa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db2:	40d9      	lsrs	r1, r3
 8000db4:	4330      	orrs	r0, r6
 8000db6:	0c03      	lsrs	r3, r0, #16
 8000db8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f108 	mul.w	r1, r6, r8
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x19c>
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dda:	f080 808d 	bcs.w	8000ef8 <__udivmoddi4+0x2ac>
 8000dde:	4299      	cmp	r1, r3
 8000de0:	f240 808a 	bls.w	8000ef8 <__udivmoddi4+0x2ac>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	443b      	add	r3, r7
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b281      	uxth	r1, r0
 8000dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df8:	fb00 f308 	mul.w	r3, r0, r8
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x1c4>
 8000e00:	1879      	adds	r1, r7, r1
 8000e02:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e06:	d273      	bcs.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d971      	bls.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4439      	add	r1, r7
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e16:	e778      	b.n	8000d0a <__udivmoddi4+0xbe>
 8000e18:	f1c6 0c20 	rsb	ip, r6, #32
 8000e1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e24:	431c      	orrs	r4, r3
 8000e26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e36:	431f      	orrs	r7, r3
 8000e38:	0c3b      	lsrs	r3, r7, #16
 8000e3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3e:	fa1f f884 	uxth.w	r8, r4
 8000e42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	fa02 f206 	lsl.w	r2, r2, r6
 8000e54:	fa00 f306 	lsl.w	r3, r0, r6
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x220>
 8000e5a:	1861      	adds	r1, r4, r1
 8000e5c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e60:	d248      	bcs.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e62:	458a      	cmp	sl, r1
 8000e64:	d946      	bls.n	8000ef4 <__udivmoddi4+0x2a8>
 8000e66:	f1a9 0902 	sub.w	r9, r9, #2
 8000e6a:	4421      	add	r1, r4
 8000e6c:	eba1 010a 	sub.w	r1, r1, sl
 8000e70:	b2bf      	uxth	r7, r7
 8000e72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e7e:	fb00 f808 	mul.w	r8, r0, r8
 8000e82:	45b8      	cmp	r8, r7
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x24a>
 8000e86:	19e7      	adds	r7, r4, r7
 8000e88:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e8c:	d22e      	bcs.n	8000eec <__udivmoddi4+0x2a0>
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d92c      	bls.n	8000eec <__udivmoddi4+0x2a0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4427      	add	r7, r4
 8000e96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e9a:	eba7 0708 	sub.w	r7, r7, r8
 8000e9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ea2:	454f      	cmp	r7, r9
 8000ea4:	46c6      	mov	lr, r8
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	d31a      	bcc.n	8000ee0 <__udivmoddi4+0x294>
 8000eaa:	d017      	beq.n	8000edc <__udivmoddi4+0x290>
 8000eac:	b15d      	cbz	r5, 8000ec6 <__udivmoddi4+0x27a>
 8000eae:	ebb3 020e 	subs.w	r2, r3, lr
 8000eb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000eb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ec0:	40f7      	lsrs	r7, r6
 8000ec2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e70b      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0x60>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6fd      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000edc:	4543      	cmp	r3, r8
 8000ede:	d2e5      	bcs.n	8000eac <__udivmoddi4+0x260>
 8000ee0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ee4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7df      	b.n	8000eac <__udivmoddi4+0x260>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e7d2      	b.n	8000e96 <__udivmoddi4+0x24a>
 8000ef0:	4660      	mov	r0, ip
 8000ef2:	e78d      	b.n	8000e10 <__udivmoddi4+0x1c4>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	e7b9      	b.n	8000e6c <__udivmoddi4+0x220>
 8000ef8:	4666      	mov	r6, ip
 8000efa:	e775      	b.n	8000de8 <__udivmoddi4+0x19c>
 8000efc:	4630      	mov	r0, r6
 8000efe:	e74a      	b.n	8000d96 <__udivmoddi4+0x14a>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	4439      	add	r1, r7
 8000f06:	e713      	b.n	8000d30 <__udivmoddi4+0xe4>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	e724      	b.n	8000d58 <__udivmoddi4+0x10c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <Configure_GPIO_Output>:
I2C_TypeDef *AudioI2C = (I2C_TypeDef *) I2C1_BASE;
SPI_TypeDef *AudioI2S = (SPI_TypeDef *) SPI3_BASE;

#define externalClockFrequency 8000000U

void Configure_GPIO_Output(GPIO_TypeDef *port, uint32_t pin, uint32_t speed, int32_t alternate) {
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  // MODER set to "01" (general purpose output) or "02" (alternate function)
  // OTYPER set to "0" (push-pull output)
  // OSPEEDR set to "10" (high-speed)
  // PUPDR set to "00" (no pull-up or pull-down required)
	// AFR set to requested alternate if required (set alternate to -1 if not required).
  unsigned long bitMask = ~(3UL << 2*pin);
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	617b      	str	r3, [r7, #20]
	uint16_t mode = (alternate >= 0) ? 2UL : 1UL;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db01      	blt.n	800104e <Configure_GPIO_Output+0x26>
 800104a:	2302      	movs	r3, #2
 800104c:	e000      	b.n	8001050 <Configure_GPIO_Output+0x28>
 800104e:	2301      	movs	r3, #1
 8001050:	827b      	strh	r3, [r7, #18]
  port->MODER = (port->MODER & bitMask) | (mode << 2*pin);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	4013      	ands	r3, r2
 800105a:	8a79      	ldrh	r1, [r7, #18]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	0052      	lsls	r2, r2, #1
 8001060:	fa01 f202 	lsl.w	r2, r1, r2
 8001064:	431a      	orrs	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	601a      	str	r2, [r3, #0]
  port->OTYPER &= ~(1UL << pin);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	2101      	movs	r1, #1
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	401a      	ands	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	605a      	str	r2, [r3, #4]
  port->OSPEEDR = (port->OSPEEDR & bitMask) | ((speed % 3UL) << 2*pin);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	ea02 0003 	and.w	r0, r2, r3
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <Configure_GPIO_Output+0xf8>)
 800108c:	fba3 2301 	umull	r2, r3, r3, r1
 8001090:	085a      	lsrs	r2, r3, #1
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	1aca      	subs	r2, r1, r3
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	ea40 0203 	orr.w	r2, r0, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	609a      	str	r2, [r3, #8]
  port->PUPDR = (port->PUPDR & bitMask) | (0UL << 2*pin);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	401a      	ands	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	60da      	str	r2, [r3, #12]
	if (alternate >= 0 && pin > 7) port->AFR[1] = (port->AFR[1] & ~(0x0F << 4*(pin-8))) | (alternate << 4*(pin-8));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db16      	blt.n	80010ea <Configure_GPIO_Output+0xc2>
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b07      	cmp	r3, #7
 80010c0:	d913      	bls.n	80010ea <Configure_GPIO_Output+0xc2>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	3a08      	subs	r2, #8
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	210f      	movs	r1, #15
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	43d2      	mvns	r2, r2
 80010d4:	4013      	ands	r3, r2
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	3a08      	subs	r2, #8
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	6839      	ldr	r1, [r7, #0]
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	431a      	orrs	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
	else if (alternate >= 0) port->AFR[0] = (port->AFR[0] & ~(0x0F << 4*pin)) | (alternate << 4*pin);	
}	
 80010e8:	e013      	b.n	8001112 <Configure_GPIO_Output+0xea>
	else if (alternate >= 0) port->AFR[0] = (port->AFR[0] & ~(0x0F << 4*pin)) | (alternate << 4*pin);	
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db10      	blt.n	8001112 <Configure_GPIO_Output+0xea>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	210f      	movs	r1, #15
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	43d2      	mvns	r2, r2
 8001100:	4013      	ands	r3, r2
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	6839      	ldr	r1, [r7, #0]
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	431a      	orrs	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	621a      	str	r2, [r3, #32]
}	
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	aaaaaaab 	.word	0xaaaaaaab

08001124 <initAudioTimer>:
///////////////////////////////////////////////////////////////////////////////////////
// I'm going to need a timeout function which doesn't use the system timer.
// I'll use TIM11 for this.  No particular reason, and I'll make it easy to change this
// if required (any counter from TIM10, TIM11, TIM13 or TIM14 should work fine).
static TIM_TypeDef * audioTimer = TIM11;
void initAudioTimer() {
 8001124:	b4b0      	push	{r4, r5, r7}
 8001126:	b08b      	sub	sp, #44	; 0x2c
 8001128:	af00      	add	r7, sp, #0
	// Sets the timer up: enables the clock to it, sets the prescaler, and 
	// calculates the factor to convert milliseconds to the count value.
	if (audioTimer == TIM10) RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <initAudioTimer+0xec>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a39      	ldr	r2, [pc, #228]	; (8001214 <initAudioTimer+0xf0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d106      	bne.n	8001142 <initAudioTimer+0x1e>
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <initAudioTimer+0xf4>)
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	4a37      	ldr	r2, [pc, #220]	; (8001218 <initAudioTimer+0xf4>)
 800113a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113e:	6453      	str	r3, [r2, #68]	; 0x44
 8001140:	e022      	b.n	8001188 <initAudioTimer+0x64>
	else if (audioTimer == TIM11) RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <initAudioTimer+0xec>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <initAudioTimer+0xf8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d106      	bne.n	800115a <initAudioTimer+0x36>
 800114c:	4b32      	ldr	r3, [pc, #200]	; (8001218 <initAudioTimer+0xf4>)
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	4a31      	ldr	r2, [pc, #196]	; (8001218 <initAudioTimer+0xf4>)
 8001152:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001156:	6453      	str	r3, [r2, #68]	; 0x44
 8001158:	e016      	b.n	8001188 <initAudioTimer+0x64>
	else if (audioTimer == TIM13) RCC->APB1ENR |= RCC_APB1ENR_TIM13EN;
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <initAudioTimer+0xec>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a30      	ldr	r2, [pc, #192]	; (8001220 <initAudioTimer+0xfc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d106      	bne.n	8001172 <initAudioTimer+0x4e>
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <initAudioTimer+0xf4>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a2b      	ldr	r2, [pc, #172]	; (8001218 <initAudioTimer+0xf4>)
 800116a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	e00a      	b.n	8001188 <initAudioTimer+0x64>
	else if (audioTimer == TIM14) RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <initAudioTimer+0xec>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a2b      	ldr	r2, [pc, #172]	; (8001224 <initAudioTimer+0x100>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d105      	bne.n	8001188 <initAudioTimer+0x64>
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <initAudioTimer+0xf4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a25      	ldr	r2, [pc, #148]	; (8001218 <initAudioTimer+0xf4>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
	
	// Disable the timer for now:
	audioTimer->CR1 &= ~TIM_CR1_CEN;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <initAudioTimer+0xec>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <initAudioTimer+0xec>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]
	
	// Work out the APB clock speed:
	uint32_t PPRE2_Factors[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <initAudioTimer+0x104>)
 800119a:	463c      	mov	r4, r7
 800119c:	461d      	mov	r5, r3
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t divideIndex = (RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <initAudioTimer+0xf4>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	0b5b      	lsrs	r3, r3, #13
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t counterSpeed = 2 * SystemCoreClock >> (PPRE2_Factors[divideIndex] % 0x07);
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <initAudioTimer+0x108>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	0058      	lsls	r0, r3, #1
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011c4:	4413      	add	r3, r2
 80011c6:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <initAudioTimer+0x10c>)
 80011cc:	fba3 2301 	umull	r2, r3, r3, r1
 80011d0:	1aca      	subs	r2, r1, r3
 80011d2:	0852      	lsrs	r2, r2, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	089a      	lsrs	r2, r3, #2
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	1aca      	subs	r2, r1, r3
 80011e0:	fa20 f302 	lsr.w	r3, r0, r2
 80011e4:	623b      	str	r3, [r7, #32]
	TIM11->EGR = TIM_EGR_UG; // Generate an update event to reload the prescaler
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <initAudioTimer+0xf8>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	615a      	str	r2, [r3, #20]
	
	// Set divider so that the counter counts ten times per millisecond:
	audioTimer->PSC = counterSpeed / 10000 - 1;
 80011ec:	6a3b      	ldr	r3, [r7, #32]
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <initAudioTimer+0x110>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	0b5a      	lsrs	r2, r3, #13
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <initAudioTimer+0xec>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3a01      	subs	r2, #1
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
	audioTimer->CR1 = TIM_CR1_OPM; // Put the counter in one-shot mode
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <initAudioTimer+0xec>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2208      	movs	r2, #8
 8001204:	601a      	str	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	372c      	adds	r7, #44	; 0x2c
 800120a:	46bd      	mov	sp, r7
 800120c:	bcb0      	pop	{r4, r5, r7}
 800120e:	4770      	bx	lr
 8001210:	2000000c 	.word	0x2000000c
 8001214:	40014400 	.word	0x40014400
 8001218:	40023800 	.word	0x40023800
 800121c:	40014800 	.word	0x40014800
 8001220:	40001c00 	.word	0x40001c00
 8001224:	40002000 	.word	0x40002000
 8001228:	08006760 	.word	0x08006760
 800122c:	2000001c 	.word	0x2000001c
 8001230:	24924925 	.word	0x24924925
 8001234:	d1b71759 	.word	0xd1b71759

08001238 <setAudioTimer>:
void setAudioTimer(uint32_t delayInMilliSeconds) {
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	// Sets the timer so that it takes the specified time to counts up from zero to the auto-reload value,
	// then sets the timer going.  The calling function then just has to wait until the counter overflows.
	// The counter is put into one-pulse mode so that it stops after generating the overflow event.
	audioTimer->CR1 &= ~TIM_CR1_CEN; // Disable the counter
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <setAudioTimer+0x88>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <setAudioTimer+0x88>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]
	uint32_t countToWaitFor = (delayInMilliSeconds < 6500) ? 10 * delayInMilliSeconds : 65000;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f641 1263 	movw	r2, #6499	; 0x1963
 8001256:	4293      	cmp	r3, r2
 8001258:	d805      	bhi.n	8001266 <setAudioTimer+0x2e>
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	e001      	b.n	800126a <setAudioTimer+0x32>
 8001266:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 800126a:	60fb      	str	r3, [r7, #12]
	audioTimer->CCR1 = countToWaitFor;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <setAudioTimer+0x88>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	635a      	str	r2, [r3, #52]	; 0x34
	audioTimer->ARR = countToWaitFor;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <setAudioTimer+0x88>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
	audioTimer->CCER |= TIM_CCER_CC1E;  // Enable the compare channel
 800127c:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <setAudioTimer+0x88>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6a1a      	ldr	r2, [r3, #32]
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <setAudioTimer+0x88>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0201 	orr.w	r2, r2, #1
 800128a:	621a      	str	r2, [r3, #32]
	audioTimer->EGR = TIM_EGR_UG;    // Re-initialise the counter
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <setAudioTimer+0x88>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	615a      	str	r2, [r3, #20]
	audioTimer->SR &= ~0x07;         // Clear status flags before enabling counter
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <setAudioTimer+0x88>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <setAudioTimer+0x88>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0207 	bic.w	r2, r2, #7
 80012a2:	611a      	str	r2, [r3, #16]
	audioTimer->CR1 |= TIM_CR1_CEN;  // Enable the counter (again)
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <setAudioTimer+0x88>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <setAudioTimer+0x88>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	2000000c 	.word	0x2000000c

080012c4 <hasAudioTimerFinished>:
uint32_t hasAudioTimerFinished() {
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	return audioTimer->SR & TIM_SR_CC1IF;
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <hasAudioTimerFinished+0x18>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f003 0302 	and.w	r3, r3, #2
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	2000000c 	.word	0x2000000c

080012e0 <audioDelay>:
void audioDelay(uint32_t delayInMilliSeconds) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	setAudioTimer(delayInMilliSeconds);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ffa5 	bl	8001238 <setAudioTimer>
	while (!hasAudioTimerFinished()) {}
 80012ee:	bf00      	nop
 80012f0:	f7ff ffe8 	bl	80012c4 <hasAudioTimerFinished>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0fa      	beq.n	80012f0 <audioDelay+0x10>
  return;
 80012fa:	bf00      	nop
}
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <waitForFlagWithTimeout>:

uint32_t waitForFlagWithTimeout(volatile uint32_t *address, uint32_t bit, uint32_t valueToWaitFor, uint32_t timeoutInMilliSeconds) {
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	603b      	str	r3, [r7, #0]
	// timeoutInMilliSeconds.  If the timeout happens first, it returns 1, otherwise it returns 0.
	// Timeout can be a maximum of 6.5 seconds.
	volatile uint32_t temp;
	
	// Can I return immediately?  If so, don't waste time setting up the timeout timer:
	temp = ((*address) >> bit) & 0x01;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	fa22 f303 	lsr.w	r3, r2, r3
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	617b      	str	r3, [r7, #20]
	if (temp == valueToWaitFor) return 0;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	d101      	bne.n	800132c <waitForFlagWithTimeout+0x2a>
 8001328:	2300      	movs	r3, #0
 800132a:	e017      	b.n	800135c <waitForFlagWithTimeout+0x5a>
  
	// I'll have to wait...
	setAudioTimer(timeoutInMilliSeconds);
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff ff83 	bl	8001238 <setAudioTimer>
	while (!hasAudioTimerFinished()) {
 8001332:	e00d      	b.n	8001350 <waitForFlagWithTimeout+0x4e>
		temp = ((*address) >> bit) & 0x01;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	617b      	str	r3, [r7, #20]
		if (temp == valueToWaitFor) return 0;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	d101      	bne.n	8001350 <waitForFlagWithTimeout+0x4e>
 800134c:	2300      	movs	r3, #0
 800134e:	e005      	b.n	800135c <waitForFlagWithTimeout+0x5a>
	while (!hasAudioTimerFinished()) {
 8001350:	f7ff ffb8 	bl	80012c4 <hasAudioTimerFinished>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0ec      	beq.n	8001334 <waitForFlagWithTimeout+0x32>
	}
	return 1;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <myConfigureI2SClock>:

/////////////////////////////////////////////////////////////////////////////////////
// Next: speed the clock up so it's going at the maximum 168 MHz, and provide some functions
// for working out the clock speeds of the various clocks.
MY_AUDIO_StatusTypeDef myConfigureI2SClock(uint32_t newN, uint32_t newR)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t retValue = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]

  // First disable the I2S clock PLL (and wait until it is disabled):
	RCC->CR &= ~RCC_CR_PLLI2SON;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <myConfigureI2SClock+0x70>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <myConfigureI2SClock+0x70>)
 8001378:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800137c:	6013      	str	r3, [r2, #0]
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_PLLI2SON_Pos, 0, 100);
 800137e:	2364      	movs	r3, #100	; 0x64
 8001380:	2200      	movs	r2, #0
 8001382:	211a      	movs	r1, #26
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <myConfigureI2SClock+0x70>)
 8001386:	f7ff ffbc 	bl	8001302 <waitForFlagWithTimeout>
 800138a:	60f8      	str	r0, [r7, #12]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <myConfigureI2SClock+0x32>
 8001392:	2303      	movs	r3, #3
 8001394:	e01a      	b.n	80013cc <myConfigureI2SClock+0x68>
	
	// Then configure the PLL (N = 192, R = 2):
  RCC->PLLI2SCFGR = (newN << RCC_PLLI2SCFGR_PLLI2SN_Pos) | (newR << RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	019a      	lsls	r2, r3, #6
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	071b      	lsls	r3, r3, #28
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <myConfigureI2SClock+0x70>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

	// Then enable the PLL again, and ensure that it's running OK:
	RCC->CR |= RCC_CR_PLLI2SON;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <myConfigureI2SClock+0x70>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <myConfigureI2SClock+0x70>)
 80013ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013b0:	6013      	str	r3, [r2, #0]
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_PLLI2SRDY_Pos, 1, 100);
 80013b2:	2364      	movs	r3, #100	; 0x64
 80013b4:	2201      	movs	r2, #1
 80013b6:	211b      	movs	r1, #27
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <myConfigureI2SClock+0x70>)
 80013ba:	f7ff ffa2 	bl	8001302 <waitForFlagWithTimeout>
 80013be:	60f8      	str	r0, [r7, #12]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <myConfigureI2SClock+0x66>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e000      	b.n	80013cc <myConfigureI2SClock+0x68>
		
  return MY_AUDIO_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800

080013d8 <myConfigureTheMainClockPLL>:
// Take the clock source from the high-speed external (HSE) 16 MHz crystal oscillator
// on the discovery board, and multiply it up by 10.5 using the PLL to give a 168 MHz
// system clock.  The STM32CubeMX utility recommends doing this using PLL values of
// M = 8, N = 336, P = 2, Q = 7.  This gives a 168 MHz PLLCLK as required.
MY_AUDIO_StatusTypeDef myConfigureTheMainClockPLL()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  uint32_t retValue;

	// First, ensure that the high-speed external oscillator is on:
	RCC->CR |= RCC_CR_HSEON;
 80013de:	4b28      	ldr	r3, [pc, #160]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a27      	ldr	r2, [pc, #156]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
  
	// Then wait until the HSE clock is ready and going:
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_HSERDY_Pos, 1, 100);
 80013ea:	2364      	movs	r3, #100	; 0x64
 80013ec:	2201      	movs	r2, #1
 80013ee:	2111      	movs	r1, #17
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 80013f2:	f7ff ff86 	bl	8001302 <waitForFlagWithTimeout>
 80013f6:	6078      	str	r0, [r7, #4]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <myConfigureTheMainClockPLL+0x2a>
 80013fe:	2303      	movs	r3, #3
 8001400:	e039      	b.n	8001476 <myConfigureTheMainClockPLL+0x9e>

	// Disable the main PLL, and wait for the system to switch over to the HSE clock:
	RCC->CR &= ~RCC_CR_PLLON;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 8001408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800140c:	6013      	str	r3, [r2, #0]
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_PLLRDY_Pos, 0, 100);
 800140e:	2364      	movs	r3, #100	; 0x64
 8001410:	2200      	movs	r2, #0
 8001412:	2119      	movs	r1, #25
 8001414:	481a      	ldr	r0, [pc, #104]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 8001416:	f7ff ff74 	bl	8001302 <waitForFlagWithTimeout>
 800141a:	6078      	str	r0, [r7, #4]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <myConfigureTheMainClockPLL+0x4e>
 8001422:	2303      	movs	r3, #3
 8001424:	e027      	b.n	8001476 <myConfigureTheMainClockPLL+0x9e>

	// Configure the main PLL.  This uses values for the variables of M = 8, N = 336, P = 2, Q = 7.
	uint32_t newPLLConfig = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
	newPLLConfig |= 8 << RCC_PLLCFGR_PLLM_Pos;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	603b      	str	r3, [r7, #0]
	newPLLConfig |= 336 << RCC_PLLCFGR_PLLN_Pos;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8001438:	603b      	str	r3, [r7, #0]
	newPLLConfig |= ((2 >> 1) - 1) << RCC_PLLCFGR_PLLP_Pos;
	newPLLConfig |= 7 << RCC_PLLCFGR_PLLQ_Pos;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001440:	603b      	str	r3, [r7, #0]
	newPLLConfig |= 1 << RCC_PLLCFGR_PLLSRC_Pos;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001448:	603b      	str	r3, [r7, #0]
	RCC->PLLCFGR = newPLLConfig;
 800144a:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6053      	str	r3, [r2, #4]
	
	// Then re-enable the main PLL, and wait for it to lock and the system to become ready to move on:
	RCC->CR |= RCC_CR_PLLON;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 8001456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145a:	6013      	str	r3, [r2, #0]
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_PLLRDY_Pos, 1, 100);
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	2201      	movs	r2, #1
 8001460:	2119      	movs	r1, #25
 8001462:	4807      	ldr	r0, [pc, #28]	; (8001480 <myConfigureTheMainClockPLL+0xa8>)
 8001464:	f7ff ff4d 	bl	8001302 <waitForFlagWithTimeout>
 8001468:	6078      	str	r0, [r7, #4]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <myConfigureTheMainClockPLL+0x9c>
 8001470:	2303      	movs	r3, #3
 8001472:	e000      	b.n	8001476 <myConfigureTheMainClockPLL+0x9e>

  return MY_AUDIO_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <myConfigureFlashWaitStatesAndBusClocks>:

// This one configures all the system clocks, now that the master clock has been set to 168 MHz.
MY_AUDIO_StatusTypeDef myConfigureFlashWaitStatesAndBusClocks()
{
 8001484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
  uint32_t retValue;

  // If required, increase the number of flash wait states to five (required for 168 MHz operation)
	// at this supply voltage:
  if(FLASH_ACR_LATENCY_5WS > (FLASH->ACR & FLASH_ACR_LATENCY))
 800148c:	4b61      	ldr	r3, [pc, #388]	; (8001614 <myConfigureFlashWaitStatesAndBusClocks+0x190>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	2b04      	cmp	r3, #4
 8001496:	d80f      	bhi.n	80014b8 <myConfigureFlashWaitStatesAndBusClocks+0x34>
  {
    // Program the new number of wait states to the LATENCY bits in the FLASH_ACR register, and 
		// check that this has worked:
		FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_ACR_LATENCY_5WS;
 8001498:	4b5e      	ldr	r3, [pc, #376]	; (8001614 <myConfigureFlashWaitStatesAndBusClocks+0x190>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 0307 	bic.w	r3, r3, #7
 80014a0:	4a5c      	ldr	r2, [pc, #368]	; (8001614 <myConfigureFlashWaitStatesAndBusClocks+0x190>)
 80014a2:	f043 0305 	orr.w	r3, r3, #5
 80014a6:	6013      	str	r3, [r2, #0]
		if (FLASH_ACR_LATENCY_5WS != (FLASH->ACR & FLASH_ACR_LATENCY)) return MY_AUDIO_ERROR;
 80014a8:	4b5a      	ldr	r3, [pc, #360]	; (8001614 <myConfigureFlashWaitStatesAndBusClocks+0x190>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d001      	beq.n	80014b8 <myConfigureFlashWaitStatesAndBusClocks+0x34>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0a8      	b.n	800160a <myConfigureFlashWaitStatesAndBusClocks+0x186>
  }

  // Set the highest APBx dividers in order to ensure that we do not go through
  // a non-spec phase whatever we decrease or increase HCLK.
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE1) | RCC_CFGR_PPRE1_DIV16;
 80014b8:	4b57      	ldr	r3, [pc, #348]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a56      	ldr	r2, [pc, #344]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014c2:	6093      	str	r3, [r2, #8]
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE2) | RCC_CFGR_PPRE2_DIV16;
 80014c4:	4b54      	ldr	r3, [pc, #336]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a53      	ldr	r2, [pc, #332]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ce:	6093      	str	r3, [r2, #8]
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_HPRE) | RCC_CFGR_HPRE_DIV1;
 80014d0:	4b51      	ldr	r3, [pc, #324]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	4a50      	ldr	r2, [pc, #320]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014da:	6093      	str	r3, [r2, #8]

	if ((RCC->CR & RCC_CR_PLLRDY) == 0) return MY_AUDIO_ERROR;
 80014dc:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <myConfigureFlashWaitStatesAndBusClocks+0x68>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e08e      	b.n	800160a <myConfigureFlashWaitStatesAndBusClocks+0x186>

	// Ensure that the clock for the system clock is taken from the PLL clock source, and wait
	// until the PLL source is successfully enabled and working:
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_PLL;
 80014ec:	4b4a      	ldr	r3, [pc, #296]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 0303 	bic.w	r3, r3, #3
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	6093      	str	r3, [r2, #8]
	retValue = waitForFlagWithTimeout(&RCC->CFGR, 3, 1, 100);
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	2201      	movs	r2, #1
 8001500:	2103      	movs	r1, #3
 8001502:	4846      	ldr	r0, [pc, #280]	; (800161c <myConfigureFlashWaitStatesAndBusClocks+0x198>)
 8001504:	f7ff fefd 	bl	8001302 <waitForFlagWithTimeout>
 8001508:	6138      	str	r0, [r7, #16]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <myConfigureFlashWaitStatesAndBusClocks+0x90>
 8001510:	2303      	movs	r3, #3
 8001512:	e07a      	b.n	800160a <myConfigureFlashWaitStatesAndBusClocks+0x186>
	
	// Set-up the PCLK1 as HCLK divided by four:
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE1) | RCC_CFGR_PPRE1_DIV4;
 8001514:	4b40      	ldr	r3, [pc, #256]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800151c:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800151e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001522:	6093      	str	r3, [r2, #8]
	
	// Set-up the PCLK2 as HCLK divided by two:
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE2) | RCC_CFGR_PPRE1_DIV2;
 8001524:	4b3c      	ldr	r3, [pc, #240]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800152c:	4a3a      	ldr	r2, [pc, #232]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800152e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001532:	6093      	str	r3, [r2, #8]

	// Update the SystemCoreClock global variable.  I could just assume this is 168 MHz, but
	// I'll check and re-calculate it, just in case something has gone wrong.  This is the
	// general method of working out the system clock, adapted from the  routines:
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U, pllsource = 0U, pllFreq = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
	
	if ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSI) pllFreq = 16000000U;
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <myConfigureFlashWaitStatesAndBusClocks+0xd4>
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <myConfigureFlashWaitStatesAndBusClocks+0x19c>)
 8001556:	617b      	str	r3, [r7, #20]
	if ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSE) pllFreq = 8000000U;
 8001558:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d101      	bne.n	8001568 <myConfigureFlashWaitStatesAndBusClocks+0xe4>
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <myConfigureFlashWaitStatesAndBusClocks+0x1a0>)
 8001566:	617b      	str	r3, [r7, #20]

	pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001570:	60fb      	str	r3, [r7, #12]
	pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001572:	4b29      	ldr	r3, [pc, #164]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0c1b      	lsrs	r3, r3, #16
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	3301      	adds	r3, #1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	607b      	str	r3, [r7, #4]
	
	pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) ? 8000000U : 16000000U;
 8001582:	4b25      	ldr	r3, [pc, #148]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <myConfigureFlashWaitStatesAndBusClocks+0x10e>
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <myConfigureFlashWaitStatesAndBusClocks+0x1a0>)
 8001590:	e000      	b.n	8001594 <myConfigureFlashWaitStatesAndBusClocks+0x110>
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <myConfigureFlashWaitStatesAndBusClocks+0x19c>)
 8001594:	603b      	str	r3, [r7, #0]
	pllvco = (uint32_t) ((((uint64_t) pllsource * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	491e      	ldr	r1, [pc, #120]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80015a0:	6849      	ldr	r1, [r1, #4]
 80015a2:	0989      	lsrs	r1, r1, #6
 80015a4:	4608      	mov	r0, r1
 80015a6:	f04f 0100 	mov.w	r1, #0
 80015aa:	f240 18ff 	movw	r8, #511	; 0x1ff
 80015ae:	f04f 0900 	mov.w	r9, #0
 80015b2:	ea00 0408 	and.w	r4, r0, r8
 80015b6:	ea01 0509 	and.w	r5, r1, r9
 80015ba:	fb04 f003 	mul.w	r0, r4, r3
 80015be:	fb02 f105 	mul.w	r1, r2, r5
 80015c2:	1846      	adds	r6, r0, r1
 80015c4:	fba2 0104 	umull	r0, r1, r2, r4
 80015c8:	1873      	adds	r3, r6, r1
 80015ca:	4619      	mov	r1, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f7ff fb22 	bl	8000c1c <__aeabi_uldivmod>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4613      	mov	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
	if (pllFreq == 0) pllFreq = pllvco / pllp;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d104      	bne.n	80015f0 <myConfigureFlashWaitStatesAndBusClocks+0x16c>
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]

  SystemCoreClock = pllFreq >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <myConfigureFlashWaitStatesAndBusClocks+0x1a4>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	461a      	mov	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	40d3      	lsrs	r3, r2
 8001604:	4a09      	ldr	r2, [pc, #36]	; (800162c <myConfigureFlashWaitStatesAndBusClocks+0x1a8>)
 8001606:	6013      	str	r3, [r2, #0]

  return MY_AUDIO_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001614:	40023c00 	.word	0x40023c00
 8001618:	40023800 	.word	0x40023800
 800161c:	40023808 	.word	0x40023808
 8001620:	00f42400 	.word	0x00f42400
 8001624:	007a1200 	.word	0x007a1200
 8001628:	080067e8 	.word	0x080067e8
 800162c:	2000001c 	.word	0x2000001c

08001630 <myAudioSpeedUpTheSystemClock>:


MY_AUDIO_StatusTypeDef myAudioSpeedUpTheSystemClock(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  // I'll need to check that the power options are set correctly, so the first thing to do is
	// enable the clock to the power controller so I can read and write from it.  The original 
	// HAL code has a small delay at this point; I'm not sure why, but I'll add something in here
	// which should do the same thing:
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <myAudioSpeedUpTheSystemClock+0x6c>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <myAudioSpeedUpTheSystemClock+0x6c>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
	while ((RCC->APB1ENR & RCC_APB1ENR_PWREN) == 0) {}
 8001640:	bf00      	nop
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <myAudioSpeedUpTheSystemClock+0x6c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f9      	beq.n	8001642 <myAudioSpeedUpTheSystemClock+0x12>

	// With the power controller enabled, I can set the regulator voltage scaling to scale one
	// mode (required for maximum clock rates):
	PWR->CR = (PWR->CR & ~PWR_CR_VOS) | PWR_CR_VOS;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <myAudioSpeedUpTheSystemClock+0x70>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <myAudioSpeedUpTheSystemClock+0x70>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6013      	str	r3, [r2, #0]

	// Configure the PLL to speed up the system clock:
  if (myConfigureTheMainClockPLL() != MY_AUDIO_OK) return MY_AUDIO_ERROR;
 800165a:	f7ff febd 	bl	80013d8 <myConfigureTheMainClockPLL>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <myAudioSpeedUpTheSystemClock+0x38>
 8001664:	2301      	movs	r3, #1
 8001666:	e017      	b.n	8001698 <myAudioSpeedUpTheSystemClock+0x68>

	// Initializes the CPU, AHB and APB busses clocks:
  if (myConfigureFlashWaitStatesAndBusClocks() != MY_AUDIO_OK) return MY_AUDIO_ERROR;
 8001668:	f7ff ff0c 	bl	8001484 <myConfigureFlashWaitStatesAndBusClocks>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <myAudioSpeedUpTheSystemClock+0x46>
 8001672:	2301      	movs	r3, #1
 8001674:	e010      	b.n	8001698 <myAudioSpeedUpTheSystemClock+0x68>
	// function gets it wrong, since it assumes the HSE is 25 MHz.  So I'll just 
	// include it in the previous function call myself.
	// SystemCoreClockUpdate(); // Don't use without changing HSE_VALUE in "system_stm32f4xx.c"

	// Finally, configure the I2S clock required for the interface to the DAC:
  if (myConfigureI2SClock(192, 2) != MY_AUDIO_OK) return MY_AUDIO_ERROR;
 8001676:	2102      	movs	r1, #2
 8001678:	20c0      	movs	r0, #192	; 0xc0
 800167a:	f7ff fe73 	bl	8001364 <myConfigureI2SClock>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <myAudioSpeedUpTheSystemClock+0x58>
 8001684:	2301      	movs	r3, #1
 8001686:	e007      	b.n	8001698 <myAudioSpeedUpTheSystemClock+0x68>

	return SystemCoreClock == 168000000 ? MY_AUDIO_OK : MY_AUDIO_ERROR;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <myAudioSpeedUpTheSystemClock+0x74>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <myAudioSpeedUpTheSystemClock+0x78>)
 800168e:	4293      	cmp	r3, r2
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
}
 8001698:	4618      	mov	r0, r3
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000
 80016a4:	2000001c 	.word	0x2000001c
 80016a8:	0a037a00 	.word	0x0a037a00

080016ac <configureAudioDACI2CRegisters>:
// Now the I2C stuff.  I'll restrict these to seven-bit addressing mode and blocking operation 
// for simplicity.  They also only work for standard I2C speeds of up to 100 kbit/s, and in master mode.
const uint32_t I2CMaxTimeOut = 0x1000;
const uint32_t I2CDefaultTimeOut = 25;

MY_AUDIO_StatusTypeDef configureAudioDACI2CRegisters() {	
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
	// Note these functions only work for standard I2C speeds of up to 100 kbit/s.
	// But that's OK, since I'll define the clock speed to be 100000.  I'm only
	// operating in master mode, so I won't bother to set the own address fields,
	// and I'm only using 7-bit addressing, with all other settings left as 
	// defaults.
	uint32_t clockSpeed = 100000;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <configureAudioDACI2CRegisters+0x78>)
 80016b4:	607b      	str	r3, [r7, #4]
  uint32_t peripheralClockFreq = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]

  // Disable the I2C1 peripheral
	I2C1->CR1 &=  ~I2C_CR1_PE;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <configureAudioDACI2CRegisters+0x7c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <configureAudioDACI2CRegisters+0x7c>)
 80016c0:	f023 0301 	bic.w	r3, r3, #1
 80016c4:	6013      	str	r3, [r2, #0]

  // Get the peripheral clock frequency (APB clock)
	peripheralClockFreq = (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <configureAudioDACI2CRegisters+0x80>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <configureAudioDACI2CRegisters+0x84>)
 80016cc:	6892      	ldr	r2, [r2, #8]
 80016ce:	0a92      	lsrs	r2, r2, #10
 80016d0:	f002 0207 	and.w	r2, r2, #7
 80016d4:	4917      	ldr	r1, [pc, #92]	; (8001734 <configureAudioDACI2CRegisters+0x88>)
 80016d6:	5c8a      	ldrb	r2, [r1, r2]
 80016d8:	40d3      	lsrs	r3, r2
 80016da:	603b      	str	r3, [r7, #0]

  // Configure CR2 with the frequency of the clock in MHz, and set the rise time accordingly:
	I2C1->CR2 = peripheralClockFreq / 1000000;
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <configureAudioDACI2CRegisters+0x7c>)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4915      	ldr	r1, [pc, #84]	; (8001738 <configureAudioDACI2CRegisters+0x8c>)
 80016e2:	fba1 1303 	umull	r1, r3, r1, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	6053      	str	r3, [r2, #4]
	I2C1->TRISE = I2C1->CR2 + 1;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <configureAudioDACI2CRegisters+0x7c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <configureAudioDACI2CRegisters+0x7c>)
 80016f0:	3301      	adds	r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
	
	// Set the speed of transfer to 100 kbaud:
  I2C1->CCR = peripheralClockFreq / clockSpeed / 2;
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <configureAudioDACI2CRegisters+0x7c>)
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	61d3      	str	r3, [r2, #28]

  // Enable the I2C1 peripheral
	I2C1->CR1 |=  I2C_CR1_PE;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <configureAudioDACI2CRegisters+0x7c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <configureAudioDACI2CRegisters+0x7c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6013      	str	r3, [r2, #0]

	// Mark the peripheral as OK and return:
	audioI2CStatus = MY_AUDIO_OK;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <configureAudioDACI2CRegisters+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
  return MY_AUDIO_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	000186a0 	.word	0x000186a0
 8001728:	40005400 	.word	0x40005400
 800172c:	2000001c 	.word	0x2000001c
 8001730:	40023800 	.word	0x40023800
 8001734:	080067f8 	.word	0x080067f8
 8001738:	431bde83 	.word	0x431bde83
 800173c:	20000002 	.word	0x20000002

08001740 <setupClocksAndGPIOForAudioI2C>:

static void setupClocksAndGPIOForAudioI2C(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  // Enable the clocks to the GPIO ports for the I2C signals:
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <setupClocksAndGPIOForAudioI2C+0xa8>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <setupClocksAndGPIOForAudioI2C+0xa8>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
	
	// Configure the GPIO ports for the I2C signals (noting that they are open-drain):
	Configure_GPIO_Output(GPIOB, 6, 2, 4);
 8001750:	2304      	movs	r3, #4
 8001752:	2202      	movs	r2, #2
 8001754:	2106      	movs	r1, #6
 8001756:	4825      	ldr	r0, [pc, #148]	; (80017ec <setupClocksAndGPIOForAudioI2C+0xac>)
 8001758:	f7ff fc66 	bl	8001028 <Configure_GPIO_Output>
	Configure_GPIO_Output(GPIOB, 9, 2, 4);
 800175c:	2304      	movs	r3, #4
 800175e:	2202      	movs	r2, #2
 8001760:	2109      	movs	r1, #9
 8001762:	4822      	ldr	r0, [pc, #136]	; (80017ec <setupClocksAndGPIOForAudioI2C+0xac>)
 8001764:	f7ff fc60 	bl	8001028 <Configure_GPIO_Output>
	GPIOB->OTYPER |= 0x01 << 6;
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <setupClocksAndGPIOForAudioI2C+0xac>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <setupClocksAndGPIOForAudioI2C+0xac>)
 800176e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001772:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= 0x01 << 9;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <setupClocksAndGPIOForAudioI2C+0xac>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <setupClocksAndGPIOForAudioI2C+0xac>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6053      	str	r3, [r2, #4]

  // Enable the peripheral clock to the I2C1 peripheral:
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <setupClocksAndGPIOForAudioI2C+0xa8>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <setupClocksAndGPIOForAudioI2C+0xa8>)
 8001786:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
	
  // Force the I2C peripheral to reset to get into a known state:
	RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <setupClocksAndGPIOForAudioI2C+0xa8>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <setupClocksAndGPIOForAudioI2C+0xa8>)
 8001792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001796:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C1RST);
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <setupClocksAndGPIOForAudioI2C+0xa8>)
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <setupClocksAndGPIOForAudioI2C+0xa8>)
 800179e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a2:	6213      	str	r3, [r2, #32]

  // Enable and set I2Cx event interrupts to the highest priority
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 80017a4:	f7ff fbb6 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fc06 	bl	8000fc0 <NVIC_EncodePriority>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4619      	mov	r1, r3
 80017b8:	201f      	movs	r0, #31
 80017ba:	f7ff fbd7 	bl	8000f6c <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017be:	201f      	movs	r0, #31
 80017c0:	f7ff fbb6 	bl	8000f30 <__NVIC_EnableIRQ>

  // Enable and set I2Cx error interrupts to the highest priority
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 80017c4:	f7ff fba6 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fbf6 	bl	8000fc0 <NVIC_EncodePriority>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	2020      	movs	r0, #32
 80017da:	f7ff fbc7 	bl	8000f6c <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017de:	2020      	movs	r0, #32
 80017e0:	f7ff fba6 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020400 	.word	0x40020400

080017f0 <setupAudioI2CPeripheral>:

static void setupAudioI2CPeripheral(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	if (audioI2CStatus == MY_AUDIO_RESET) {     
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <setupAudioI2CPeripheral+0x18>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d103      	bne.n	8001804 <setupAudioI2CPeripheral+0x14>
    // Set up the GPIO pins, enable clocks in the RCC and interrupts in the NVIC:
    setupClocksAndGPIOForAudioI2C();
 80017fc:	f7ff ffa0 	bl	8001740 <setupClocksAndGPIOForAudioI2C>
		
		// Initialise the I2C periperhal itself:
    configureAudioDACI2CRegisters();
 8001800:	f7ff ff54 	bl	80016ac <configureAudioDACI2CRegisters>
	}
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000002 	.word	0x20000002

0800180c <setupResetForAudioDAC>:

void setupResetForAudioDAC(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  
  // Ensure the clock is enabled for the GPIO bus which has the reset pin on it (GPIOD):
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <setupResetForAudioDAC+0x44>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <setupResetForAudioDAC+0x44>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	6313      	str	r3, [r2, #48]	; 0x30
  
	// Set up the reset pin for the DAC as a general purpose output:
	Configure_GPIO_Output(GPIOD, 4, 2, -1);
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001820:	2202      	movs	r2, #2
 8001822:	2104      	movs	r1, #4
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <setupResetForAudioDAC+0x48>)
 8001826:	f7ff fbff 	bl	8001028 <Configure_GPIO_Output>
  
  // Reset the codec:
	GPIOD->BSRR = 0x01 << (16 + 4);
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <setupResetForAudioDAC+0x48>)
 800182c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001830:	619a      	str	r2, [r3, #24]
	audioDelay(5);
 8001832:	2005      	movs	r0, #5
 8001834:	f7ff fd54 	bl	80012e0 <audioDelay>
	GPIOD->BSRR = 0x01 << 4;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <setupResetForAudioDAC+0x48>)
 800183a:	2210      	movs	r2, #16
 800183c:	619a      	str	r2, [r3, #24]
	audioDelay(5);
 800183e:	2005      	movs	r0, #5
 8001840:	f7ff fd4e 	bl	80012e0 <audioDelay>
		
	// The DAC should now be reset:
	audioDACStatus = MY_AUDIO_RESET;
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <setupResetForAudioDAC+0x4c>)
 8001846:	2204      	movs	r2, #4
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	20000003 	.word	0x20000003

0800185c <waitForI2CMasterAddressFlagUntilTimeout>:

static MY_AUDIO_StatusTypeDef waitForI2CMasterAddressFlagUntilTimeout(uint32_t Timeout)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	// Deals with the I2C timeout for the case where the master (the STM32F4) is sending the address.
	// It waits until the ADDR flag in SR1 is set (indicating the end of the address transmission),
	// or the timeout occurs, or the AF bit is set (indicating that no acknowledgement was received).
	
	setAudioTimer(Timeout);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fce7 	bl	8001238 <setAudioTimer>
	while ((I2C1->SR1 & I2C_SR1_ADDR) == 0) {
 800186a:	e020      	b.n	80018ae <waitForI2CMasterAddressFlagUntilTimeout+0x52>
		if ((I2C1->SR1 & I2C_SR1_AF) != 0) {
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	2b00      	cmp	r3, #0
 8001876:	d010      	beq.n	800189a <waitForI2CMasterAddressFlagUntilTimeout+0x3e>
			// No acknowledgement received.  Release the bus, clear flag and exit with an error code:
			I2C1->CR1 |= I2C_CR1_STOP;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a11      	ldr	r2, [pc, #68]	; (80018c4 <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	6013      	str	r3, [r2, #0]
			I2C1->SR1 &= ~I2C_SR1_AF;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 800188a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800188e:	6153      	str	r3, [r2, #20]
			audioI2CStatus = MY_AUDIO_ERROR;
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <waitForI2CMasterAddressFlagUntilTimeout+0x6c>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e010      	b.n	80018bc <waitForI2CMasterAddressFlagUntilTimeout+0x60>
		}
		if (hasAudioTimerFinished()) {
 800189a:	f7ff fd13 	bl	80012c4 <hasAudioTimerFinished>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <waitForI2CMasterAddressFlagUntilTimeout+0x52>
			audioI2CStatus = MY_AUDIO_TIMEOUT;
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <waitForI2CMasterAddressFlagUntilTimeout+0x6c>)
 80018a6:	2203      	movs	r2, #3
 80018a8:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e006      	b.n	80018bc <waitForI2CMasterAddressFlagUntilTimeout+0x60>
	while ((I2C1->SR1 & I2C_SR1_ADDR) == 0) {
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0d8      	beq.n	800186c <waitForI2CMasterAddressFlagUntilTimeout+0x10>
		}
	}
	return MY_AUDIO_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40005400 	.word	0x40005400
 80018c8:	20000002 	.word	0x20000002

080018cc <waitForI2CTXEFlagUntilTimeout>:

static MY_AUDIO_StatusTypeDef waitForI2CTXEFlagUntilTimeout(uint32_t Timeout)
{    
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	// Waits for TXE flag to be set, indicating the successful end of a transmission (DR empty).
	// Can also return with a timeout error, or an error if the acknowledgement flag (AF) indicates
	// no acknowledgement is received.  In the latter case, the AF flag needs to be reset.
	setAudioTimer(Timeout);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff fcaf 	bl	8001238 <setAudioTimer>
	while ((I2C1->SR1 & I2C_SR1_TXE) == 0) {
 80018da:	e01a      	b.n	8001912 <waitForI2CTXEFlagUntilTimeout+0x46>
		if ((I2C1->SR1 & I2C_SR1_AF) != 0) {
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00d      	beq.n	8001904 <waitForI2CTXEFlagUntilTimeout+0x38>
			// No acknowledgement received.  Release the bus, clear flag and exit with an error code:
			I2C1->CR1 |= I2C_CR1_STOP;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]
			I2C1->SR1 &= ~I2C_SR1_AF;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 80018fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018fe:	6153      	str	r3, [r2, #20]
			return MY_AUDIO_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e00d      	b.n	8001920 <waitForI2CTXEFlagUntilTimeout+0x54>
		}
		if (hasAudioTimerFinished()) {
 8001904:	f7ff fcde 	bl	80012c4 <hasAudioTimerFinished>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <waitForI2CTXEFlagUntilTimeout+0x46>
			return MY_AUDIO_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e006      	b.n	8001920 <waitForI2CTXEFlagUntilTimeout+0x54>
	while ((I2C1->SR1 & I2C_SR1_TXE) == 0) {
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0de      	beq.n	80018dc <waitForI2CTXEFlagUntilTimeout+0x10>
		}
	}
	return MY_AUDIO_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40005400 	.word	0x40005400

0800192c <waitForI2CBTFFlagUntilTimeout>:

static MY_AUDIO_StatusTypeDef waitForI2CBTFFlagUntilTimeout(uint32_t Timeout)
{  
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	// Waiting for the byte transfer to complete.  This can end one of three ways: a successful
	// byte transfer can occur (including acknowledgement being received), a failed acknowledgment
	// (in which case the AF flag is detected), or a timeout.
	setAudioTimer(Timeout);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fc7f 	bl	8001238 <setAudioTimer>

	while((I2C1->SR1 & I2C_SR1_BTF) == 0) {
 800193a:	e01a      	b.n	8001972 <waitForI2CBTFFlagUntilTimeout+0x46>
		// Check the AF flag is set (indicating a failed acknowledgement):
		if ((I2C1->SR1 & I2C_SR1_AF) != 0) {
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <waitForI2CBTFFlagUntilTimeout+0x5c>)
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00a      	beq.n	800195e <waitForI2CBTFFlagUntilTimeout+0x32>
			I2C1->SR1 &= ~I2C_SR1_AF;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <waitForI2CBTFFlagUntilTimeout+0x5c>)
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <waitForI2CBTFFlagUntilTimeout+0x5c>)
 800194e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001952:	6153      	str	r3, [r2, #20]
			audioI2CStatus = MY_AUDIO_ERROR;
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <waitForI2CBTFFlagUntilTimeout+0x60>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e010      	b.n	8001980 <waitForI2CBTFFlagUntilTimeout+0x54>
		}
		// Check for the timeout:
		if (hasAudioTimerFinished()) {
 800195e:	f7ff fcb1 	bl	80012c4 <hasAudioTimerFinished>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <waitForI2CBTFFlagUntilTimeout+0x46>
			audioI2CStatus = MY_AUDIO_TIMEOUT;
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <waitForI2CBTFFlagUntilTimeout+0x60>)
 800196a:	2203      	movs	r2, #3
 800196c:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e006      	b.n	8001980 <waitForI2CBTFFlagUntilTimeout+0x54>
	while((I2C1->SR1 & I2C_SR1_BTF) == 0) {
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <waitForI2CBTFFlagUntilTimeout+0x5c>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0de      	beq.n	800193c <waitForI2CBTFFlagUntilTimeout+0x10>
		}
	}
	return MY_AUDIO_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005400 	.word	0x40005400
 800198c:	20000002 	.word	0x20000002

08001990 <myI2C_WaitOnRXNEFlagUntilTimeout>:

static MY_AUDIO_StatusTypeDef myI2C_WaitOnRXNEFlagUntilTimeout(uint32_t Timeout)
{  
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	// Waiting for a byte to successfully be received.  This can end one of three ways: a successful
	// byte reception can occur (indicated by the RxNE flag being set), a stop condition can be
	// detected on the bus (in which case the STOPF flag is set), or a timeout.
	setAudioTimer(Timeout);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff fc4d 	bl	8001238 <setAudioTimer>

	while((I2C1->SR1 & I2C_SR1_RXNE) == 0) {
 800199e:	e01a      	b.n	80019d6 <myI2C_WaitOnRXNEFlagUntilTimeout+0x46>
		// Check if a STOPF has been detected:
		if ((I2C1->SR1 & I2C_SR1_STOPF) != 0) {
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <myI2C_WaitOnRXNEFlagUntilTimeout+0x5c>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00a      	beq.n	80019c2 <myI2C_WaitOnRXNEFlagUntilTimeout+0x32>
			I2C1->SR1 &= ~I2C_SR1_STOPF;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <myI2C_WaitOnRXNEFlagUntilTimeout+0x5c>)
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <myI2C_WaitOnRXNEFlagUntilTimeout+0x5c>)
 80019b2:	f023 0310 	bic.w	r3, r3, #16
 80019b6:	6153      	str	r3, [r2, #20]
			audioI2CStatus = MY_AUDIO_ERROR;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <myI2C_WaitOnRXNEFlagUntilTimeout+0x60>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e010      	b.n	80019e4 <myI2C_WaitOnRXNEFlagUntilTimeout+0x54>
		}
		// Check for the timeout:
		if (hasAudioTimerFinished()) {
 80019c2:	f7ff fc7f 	bl	80012c4 <hasAudioTimerFinished>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <myI2C_WaitOnRXNEFlagUntilTimeout+0x46>
			audioI2CStatus = MY_AUDIO_TIMEOUT;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <myI2C_WaitOnRXNEFlagUntilTimeout+0x60>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e006      	b.n	80019e4 <myI2C_WaitOnRXNEFlagUntilTimeout+0x54>
	while((I2C1->SR1 & I2C_SR1_RXNE) == 0) {
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <myI2C_WaitOnRXNEFlagUntilTimeout+0x5c>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0de      	beq.n	80019a0 <myI2C_WaitOnRXNEFlagUntilTimeout+0x10>
		}
	}
	return MY_AUDIO_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40005400 	.word	0x40005400
 80019f0:	20000002 	.word	0x20000002

080019f4 <clearTheADDRFlag>:

// This seems to need to get done a lot, so I'll separate it out here:
// Clear the ADDR flag.  For some reason it seems to be important to do this in this order,
// reading SR1 first and SR2 second.  Call myUNUSED() to help prevent the compiler
// giving a warning or optimising this whole thing out.
static void clearTheADDRFlag(I2C_TypeDef *I2Cx) {
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpreg = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  tmpreg = I2Cx->SR1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	60fb      	str	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	60fb      	str	r3, [r7, #12]
  myUNUSED(tmpreg);	
 8001a0c:	68fb      	ldr	r3, [r7, #12]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <readDataFromI2CPeripheral>:

MY_AUDIO_StatusTypeDef readDataFromI2CPeripheral(I2C_TypeDef * I2Cx, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	817b      	strh	r3, [r7, #10]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	813b      	strh	r3, [r7, #8]

  if(audioI2CStatus == MY_AUDIO_OK)
 8001a2e:	4b87      	ldr	r3, [pc, #540]	; (8001c4c <readDataFromI2CPeripheral+0x230>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 8104 	bne.w	8001c40 <readDataFromI2CPeripheral+0x224>
  {
    audioI2CStatus = MY_AUDIO_BUSY;
 8001a38:	4b84      	ldr	r3, [pc, #528]	; (8001c4c <readDataFromI2CPeripheral+0x230>)
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
		MY_AUDIO_StatusTypeDef retValue = MY_AUDIO_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]
		
    // The bus might be busy, so wait until the BUSY flag is reset:
		uint32_t wait = waitForFlagWithTimeout(&I2Cx->SR2, I2C_SR2_BUSY_Pos, 0, I2CDefaultTimeOut);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f103 0018 	add.w	r0, r3, #24
 8001a48:	2319      	movs	r3, #25
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	f7ff fc58 	bl	8001302 <waitForFlagWithTimeout>
 8001a52:	6138      	str	r0, [r7, #16]
		if (wait != 0) return MY_AUDIO_BUSY;
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <readDataFromI2CPeripheral+0x42>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0f1      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
		
		// Enable Acknowledge:
		I2Cx->CR1 |= I2C_CR1_ACK;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	601a      	str	r2, [r3, #0]

		// Generate Start:
		I2Cx->CR1 |= I2C_CR1_START;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]

		// Wait until SB flag is set:
		wait = waitForFlagWithTimeout(&I2Cx->SR1, I2C_SR1_SB_Pos, 1, Timeout);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f103 0014 	add.w	r0, r3, #20
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2100      	movs	r1, #0
 8001a82:	f7ff fc3e 	bl	8001302 <waitForFlagWithTimeout>
 8001a86:	6138      	str	r0, [r7, #16]
		if (wait != 0) return MY_AUDIO_TIMEOUT;
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <readDataFromI2CPeripheral+0x76>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0d7      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
	
		// Send slave address (clear MSB bit for a read):
		I2Cx->DR = DevAddress & 0xFE;
 8001a92:	897b      	ldrh	r3, [r7, #10]
 8001a94:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	611a      	str	r2, [r3, #16]

		// Wait until ADDR flag is set:
		retValue = waitForI2CMasterAddressFlagUntilTimeout(Timeout);
 8001a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a9e:	f7ff fedd 	bl	800185c <waitForI2CMasterAddressFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
		if (retValue == MY_AUDIO_ERROR || retValue == MY_AUDIO_TIMEOUT) return retValue;
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d002      	beq.n	8001ab2 <readDataFromI2CPeripheral+0x96>
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d101      	bne.n	8001ab6 <readDataFromI2CPeripheral+0x9a>
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	e0c5      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>

		clearTheADDRFlag(I2Cx);
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7ff ff9c 	bl	80019f4 <clearTheADDRFlag>

		// Wait until TXE flag is set.  If this gives an error, send a stop and return,
		// if it times out, just return.
		retValue = waitForI2CTXEFlagUntilTimeout(Timeout);
 8001abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001abe:	f7ff ff05 	bl	80018cc <waitForI2CTXEFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	75fb      	strb	r3, [r7, #23]
		if (retValue != MY_AUDIO_OK) {
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00a      	beq.n	8001ae2 <readDataFromI2CPeripheral+0xc6>
			if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <readDataFromI2CPeripheral+0xc2>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	601a      	str	r2, [r3, #0]
			return retValue;
 8001ade:	7dfb      	ldrb	r3, [r7, #23]
 8001ae0:	e0af      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
		}

		// Memory address size is always eight-bits in this application, so I can just do:
		I2Cx->DR = MemAddress | 0x01;
 8001ae2:	893b      	ldrh	r3, [r7, #8]
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	611a      	str	r2, [r3, #16]
	
		// Wait until TXE flag is set
		retValue = waitForI2CTXEFlagUntilTimeout(Timeout);
 8001af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001af2:	f7ff feeb 	bl	80018cc <waitForI2CTXEFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	75fb      	strb	r3, [r7, #23]
		if (retValue != MY_AUDIO_OK) {
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00a      	beq.n	8001b16 <readDataFromI2CPeripheral+0xfa>
			if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d105      	bne.n	8001b12 <readDataFromI2CPeripheral+0xf6>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	601a      	str	r2, [r3, #0]
			return retValue;		
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	e095      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
		}

		// Should be already to go now, so generate a restart:
		I2Cx->CR1 |= I2C_CR1_START;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	601a      	str	r2, [r3, #0]

		// Wait until the SB flag is set:
		wait = waitForFlagWithTimeout(&I2Cx->SR1, I2C_SR1_SB_Pos, 1, Timeout);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f103 0014 	add.w	r0, r3, #20
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f7ff fbe8 	bl	8001302 <waitForFlagWithTimeout>
 8001b32:	6138      	str	r0, [r7, #16]
		if (wait != 0) return MY_AUDIO_TIMEOUT;
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <readDataFromI2CPeripheral+0x122>
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e081      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>

		// Send slave address:
		I2Cx->DR = DevAddress | 0x01;  // Set MSB in address for I2C read
 8001b3e:	897b      	ldrh	r3, [r7, #10]
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

		// Wait until ADDR flag is set
		retValue = waitForI2CMasterAddressFlagUntilTimeout(Timeout);
 8001b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b4e:	f7ff fe85 	bl	800185c <waitForI2CMasterAddressFlagUntilTimeout>
 8001b52:	4603      	mov	r3, r0
 8001b54:	75fb      	strb	r3, [r7, #23]
		if (retValue != MY_AUDIO_OK) return retValue;
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <readDataFromI2CPeripheral+0x144>
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
 8001b5e:	e070      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>

		// If the transfer size is zero (used as an error recovery case), the only thing that happens
		// is the ADDR bit is cleared, and a stop is generated.
		if (Size == 0) {
 8001b60:	8c3b      	ldrh	r3, [r7, #32]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10a      	bne.n	8001b7c <readDataFromI2CPeripheral+0x160>
			clearTheADDRFlag(I2Cx);
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f7ff ff44 	bl	80019f4 <clearTheADDRFlag>
      I2Cx->CR1 |= I2C_CR1_STOP;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	601a      	str	r2, [r3, #0]
			return MY_AUDIO_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e062      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
		}
		
		// If the transfer size is one, then disable the acknowledgement bit, clear the ADDR bit,
		// and generate a stop.  Then wait until the RXNE flag is set, read the data and return:
		else if (Size == 1) {
 8001b7c:	8c3b      	ldrh	r3, [r7, #32]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d124      	bne.n	8001bcc <readDataFromI2CPeripheral+0x1b0>
      I2Cx->CR1 &= ~I2C_CR1_ACK;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	601a      	str	r2, [r3, #0]
			clearTheADDRFlag(I2Cx);
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff ff30 	bl	80019f4 <clearTheADDRFlag>
      I2Cx->CR1 |= I2C_CR1_STOP;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	601a      	str	r2, [r3, #0]
			
			// Wait until RXNE flag is set
			retValue = myI2C_WaitOnRXNEFlagUntilTimeout(Timeout);
 8001ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ba2:	f7ff fef5 	bl	8001990 <myI2C_WaitOnRXNEFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	75fb      	strb	r3, [r7, #23]
			if (retValue != MY_AUDIO_OK) {
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <readDataFromI2CPeripheral+0x19e>
				audioI2CStatus = retValue;
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <readDataFromI2CPeripheral+0x230>)
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	7013      	strb	r3, [r2, #0]
				return retValue;
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	e043      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
			}

			// Read data from DR
			*pData++ = I2Cx->DR;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6919      	ldr	r1, [r3, #16]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	b2ca      	uxtb	r2, r1
 8001bc6:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e03a      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
		}
		
		// If the transfer size is two, then disable the acknowledgements, enable the POS bit,
		// clear the ADDR bit, do not generate a stop, but wait until the BTF flag is set, then
		// generate the stop, and read the data in the DR register twice.
		else if (Size == 2) {
 8001bcc:	8c3b      	ldrh	r3, [r7, #32]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d134      	bne.n	8001c3c <readDataFromI2CPeripheral+0x220>
      I2Cx->CR1 &= ~I2C_CR1_ACK;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	601a      	str	r2, [r3, #0]
			I2Cx->CR1 |= I2C_CR1_POS;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	601a      	str	r2, [r3, #0]
  		clearTheADDRFlag(I2Cx);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff ff02 	bl	80019f4 <clearTheADDRFlag>

      // Wait until BTF flag is set.  Note: this is untested.
			wait = waitForFlagWithTimeout(&I2Cx->SR1, I2C_SR1_BTF_Pos, 1, Timeout);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f103 0014 	add.w	r0, r3, #20
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	f7ff fb81 	bl	8001302 <waitForFlagWithTimeout>
 8001c00:	6138      	str	r0, [r7, #16]
			// retValue = I2C_WaitOnFlagUntilTimeout(I2C_FLAG_BTF, RESET, Timeout);
			if (wait != 0) {
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d004      	beq.n	8001c12 <readDataFromI2CPeripheral+0x1f6>
				audioI2CStatus = MY_AUDIO_TIMEOUT;
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <readDataFromI2CPeripheral+0x230>)
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	701a      	strb	r2, [r3, #0]
				return MY_AUDIO_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e017      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
			}

      I2Cx->CR1 |= I2C_CR1_STOP;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	601a      	str	r2, [r3, #0]
      *pData++ = I2Cx->DR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6919      	ldr	r1, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	b2ca      	uxtb	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
      *pData++ = I2Cx->DR;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6919      	ldr	r1, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e001      	b.n	8001c40 <readDataFromI2CPeripheral+0x224>
		}
		
		else {
			return MY_AUDIO_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <readDataFromI2CPeripheral+0x226>
		}
  }
  return MY_AUDIO_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000002 	.word	0x20000002

08001c50 <resetTheI2CDriver>:

static void resetTheI2CDriver()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  // Reset the I2C peripheral:
	RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <resetTheI2CDriver+0x24>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <resetTheI2CDriver+0x24>)
 8001c5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c5e:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <resetTheI2CDriver+0x24>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <resetTheI2CDriver+0x24>)
 8001c66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c6a:	6213      	str	r3, [r2, #32]
  
	// Re-initialise the I2C periperhal itself:
	configureAudioDACI2CRegisters();
 8001c6c:	f7ff fd1e 	bl	80016ac <configureAudioDACI2CRegisters>
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800

08001c78 <writeDataToI2CPeripheral>:

MY_AUDIO_StatusTypeDef writeDataToI2CPeripheral(I2C_TypeDef *I2Cx, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	817b      	strh	r3, [r7, #10]
 8001c86:	4613      	mov	r3, r2
 8001c88:	813b      	strh	r3, [r7, #8]
	MY_AUDIO_StatusTypeDef retValue = MY_AUDIO_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	76fb      	strb	r3, [r7, #27]
	
	// Wait until BUSY flag is reset:
  if (waitForFlagWithTimeout(&I2Cx->SR2, I2C_SR2_BUSY_Pos, 0, 25) != 0) return MY_AUDIO_BUSY;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f103 0018 	add.w	r0, r3, #24
 8001c94:	2319      	movs	r3, #25
 8001c96:	2200      	movs	r2, #0
 8001c98:	2101      	movs	r1, #1
 8001c9a:	f7ff fb32 	bl	8001302 <waitForFlagWithTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <writeDataToI2CPeripheral+0x30>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e0a4      	b.n	8001df2 <writeDataToI2CPeripheral+0x17a>
	    
	// Check if the I2C is already enabled, and if not, enable it:
	if ((I2Cx->CR1 & I2C_CR1_PE) != I2C_CR1_PE) I2C1->CR1 |= I2C_CR1_PE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d005      	beq.n	8001cc0 <writeDataToI2CPeripheral+0x48>
 8001cb4:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <writeDataToI2CPeripheral+0x184>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a50      	ldr	r2, [pc, #320]	; (8001dfc <writeDataToI2CPeripheral+0x184>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

	// Disable the POS flag		
	I2Cx->CR1 &= ~I2C_CR1_POS;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	601a      	str	r2, [r3, #0]

  // Prepare the transfer parameters
	uint32_t transferSize = Size;
 8001ccc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001cce:	61fb      	str	r3, [r7, #28]
    
  // Send Slave Address and Memory Address.  First, generate a START:
	I2Cx->CR1 |= I2C_CR1_START;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]
	audioI2CStatus = MY_AUDIO_BUSY;
 8001cdc:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <writeDataToI2CPeripheral+0x188>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	701a      	strb	r2, [r3, #0]

	// Wait until SB flag is set
	uint32_t status = waitForFlagWithTimeout(&I2Cx->SR1, I2C_SR1_SB_Pos, 1, Timeout);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f103 0014 	add.w	r0, r3, #20
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cea:	2201      	movs	r2, #1
 8001cec:	2100      	movs	r1, #0
 8001cee:	f7ff fb08 	bl	8001302 <waitForFlagWithTimeout>
 8001cf2:	6178      	str	r0, [r7, #20]
	if (status != 0) return MY_AUDIO_TIMEOUT;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <writeDataToI2CPeripheral+0x86>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e079      	b.n	8001df2 <writeDataToI2CPeripheral+0x17a>

	// Send slave address (8-bit only addressing supported):
	I2Cx->DR = DevAddress & ~0x01;
 8001cfe:	897b      	ldrh	r3, [r7, #10]
 8001d00:	f023 0201 	bic.w	r2, r3, #1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	611a      	str	r2, [r3, #16]

	// Wait until ADDR flag is set
	retValue = waitForI2CMasterAddressFlagUntilTimeout(Timeout);
 8001d08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d0a:	f7ff fda7 	bl	800185c <waitForI2CMasterAddressFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	76fb      	strb	r3, [r7, #27]
	if (retValue != MY_AUDIO_OK) return retValue;
 8001d12:	7efb      	ldrb	r3, [r7, #27]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <writeDataToI2CPeripheral+0xa4>
 8001d18:	7efb      	ldrb	r3, [r7, #27]
 8001d1a:	e06a      	b.n	8001df2 <writeDataToI2CPeripheral+0x17a>

	// Clear ADDR flag
	clearTheADDRFlag(I2Cx);
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f7ff fe69 	bl	80019f4 <clearTheADDRFlag>

	// Wait until TXE flag is set
	retValue = waitForI2CTXEFlagUntilTimeout(Timeout);
 8001d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d24:	f7ff fdd2 	bl	80018cc <waitForI2CTXEFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	76fb      	strb	r3, [r7, #27]
	if (retValue != MY_AUDIO_OK) {
 8001d2c:	7efb      	ldrb	r3, [r7, #27]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <writeDataToI2CPeripheral+0xd0>
		if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001d32:	7efb      	ldrb	r3, [r7, #27]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <writeDataToI2CPeripheral+0xcc>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	601a      	str	r2, [r3, #0]
		return retValue;
 8001d44:	7efb      	ldrb	r3, [r7, #27]
 8001d46:	e054      	b.n	8001df2 <writeDataToI2CPeripheral+0x17a>
	}

	// Send the register address in the I2C peripheral:
  I2Cx->DR = (uint8_t)(MemAddress & 0x00FF);
 8001d48:	893b      	ldrh	r3, [r7, #8]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	611a      	str	r2, [r3, #16]

	// This routine is only ever called with a size set to one in this application, so I should be able to do:
  while(transferSize > 0U)
 8001d52:	e02e      	b.n	8001db2 <writeDataToI2CPeripheral+0x13a>
  {
    // Wait until the TXE flag is set:
		retValue = waitForI2CTXEFlagUntilTimeout(Timeout);
 8001d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d56:	f7ff fdb9 	bl	80018cc <waitForI2CTXEFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	76fb      	strb	r3, [r7, #27]
		if (retValue != MY_AUDIO_OK) {
 8001d5e:	7efb      	ldrb	r3, [r7, #27]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00a      	beq.n	8001d7a <writeDataToI2CPeripheral+0x102>
			if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001d64:	7efb      	ldrb	r3, [r7, #27]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <writeDataToI2CPeripheral+0xfe>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	601a      	str	r2, [r3, #0]
			return retValue;
 8001d76:	7efb      	ldrb	r3, [r7, #27]
 8001d78:	e03b      	b.n	8001df2 <writeDataToI2CPeripheral+0x17a>
		}

    // Write data to the data register:
    I2C1->DR = *pData++;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <writeDataToI2CPeripheral+0x184>)
 8001d84:	611a      	str	r2, [r3, #16]
		transferSize--;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
			
		// If there is more data to send and the BTF flag is set, then I can immediately transfer it to the
		// data register; if not then just loop back and wait for the TXE flag again:
		if (I2Cx->SR1 & I2C_SR1_BTF && transferSize > 0) {
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00c      	beq.n	8001db2 <writeDataToI2CPeripheral+0x13a>
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d009      	beq.n	8001db2 <writeDataToI2CPeripheral+0x13a>
			I2Cx->DR = *pData++;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	611a      	str	r2, [r3, #16]
			transferSize--;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	61fb      	str	r3, [r7, #28]
  while(transferSize > 0U)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1cd      	bne.n	8001d54 <writeDataToI2CPeripheral+0xdc>
		}
  }
    
  // Finally, wait until the BTF flag is set:
	retValue = waitForI2CBTFFlagUntilTimeout(Timeout);
 8001db8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001dba:	f7ff fdb7 	bl	800192c <waitForI2CBTFFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	76fb      	strb	r3, [r7, #27]
	if (retValue != MY_AUDIO_OK) {
 8001dc2:	7efb      	ldrb	r3, [r7, #27]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <writeDataToI2CPeripheral+0x166>
		if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001dc8:	7efb      	ldrb	r3, [r7, #27]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <writeDataToI2CPeripheral+0x162>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	601a      	str	r2, [r3, #0]
		return retValue;
 8001dda:	7efb      	ldrb	r3, [r7, #27]
 8001ddc:	e009      	b.n	8001df2 <writeDataToI2CPeripheral+0x17a>
	}

  // Generate a final stop
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

	audioI2CStatus = MY_AUDIO_OK;    
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <writeDataToI2CPeripheral+0x188>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
  return MY_AUDIO_OK;			
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	20000002 	.word	0x20000002

08001e04 <myI2Cx_WriteData>:

uint32_t myI2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	71bb      	strb	r3, [r7, #6]
 8001e12:	4613      	mov	r3, r2
 8001e14:	717b      	strb	r3, [r7, #5]
	// Writes an 8-bit data byte to the ADC's I2C address Addr, register Reg.  Returns one if successful, or zero if failed.
  uint32_t timeout = 1000;
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *thisI2C = AudioI2C;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <myI2Cx_WriteData+0x60>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	613b      	str	r3, [r7, #16]
  MY_AUDIO_StatusTypeDef status = writeDataToI2CPeripheral(thisI2C, Addr, (uint16_t)Reg, &Value, 1, timeout);
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	b299      	uxth	r1, r3
 8001e26:	79bb      	ldrb	r3, [r7, #6]
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	1d78      	adds	r0, r7, #5
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	4603      	mov	r3, r0
 8001e36:	6938      	ldr	r0, [r7, #16]
 8001e38:	f7ff ff1e 	bl	8001c78 <writeDataToI2CPeripheral>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]
	
	// Check status, and if error, then re-initialise the I2C peripheral:
	if (status != MY_AUDIO_OK) {
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <myI2Cx_WriteData+0x50>
		audioI2CStatus = MY_AUDIO_ERROR;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <myI2Cx_WriteData+0x64>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
		resetTheI2CDriver();
 8001e4c:	f7ff ff00 	bl	8001c50 <resetTheI2CDriver>
		return 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e003      	b.n	8001e5c <myI2Cx_WriteData+0x58>
	}
	audioI2CStatus = MY_AUDIO_OK;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <myI2Cx_WriteData+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
	return 1;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000004 	.word	0x20000004
 8001e68:	20000002 	.word	0x20000002

08001e6c <checkAudioDAC_ID>:
uint32_t checkAudioDAC_ID(uint8_t deviceAddress) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
	// Reads the ID field from the cs43l22 and returns it.

  uint8_t value = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73bb      	strb	r3, [r7, #14]
  MY_AUDIO_StatusTypeDef status = readDataFromI2CPeripheral(I2C1, deviceAddress, (uint16_t)CS43L22_CHIPID_ADDR, &value, 1, I2CMaxTimeOut);
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	b299      	uxth	r1, r3
 8001e7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e82:	f107 030e 	add.w	r3, r7, #14
 8001e86:	9201      	str	r2, [sp, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	9200      	str	r2, [sp, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <checkAudioDAC_ID+0x4c>)
 8001e90:	f7ff fdc4 	bl	8001a1c <readDataFromI2CPeripheral>
 8001e94:	4603      	mov	r3, r0
 8001e96:	73fb      	strb	r3, [r7, #15]
  
  // Check the communication status and reset peripheral if required:
  if(status == MY_AUDIO_ERROR) resetTheI2CDriver();
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <checkAudioDAC_ID+0x36>
 8001e9e:	f7ff fed7 	bl	8001c50 <resetTheI2CDriver>
	
	// Extract the ID from the read data:	
  value = (value & CS43L22_ID_MASK); 
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	f023 0307 	bic.w	r3, r3, #7
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	73bb      	strb	r3, [r7, #14]
  return((uint32_t) value);
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40005400 	.word	0x40005400

08001ebc <AUDIO_IO_Init>:
// Finally, a few wrapper routines required by the cs43l22.c functions:
extern void AUDIO_IO_DeInit(void) {}
extern void AUDIO_IO_Init(void) {}
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <AUDIO_IO_Write>:
extern uint8_t AUDIO_IO_Read(uint8_t DeviceAddr, uint8_t chipIdAddress) {
	return 0;
}
extern void AUDIO_IO_Write(uint8_t deviceAddr, uint8_t deviceRegister, uint8_t data) {
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	71bb      	strb	r3, [r7, #6]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	717b      	strb	r3, [r7, #5]
	myI2Cx_WriteData(deviceAddr, deviceRegister, data);
 8001edc:	797a      	ldrb	r2, [r7, #5]
 8001ede:	79b9      	ldrb	r1, [r7, #6]
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff8e 	bl	8001e04 <myI2Cx_WriteData>
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <setupI2SPeripheral>:
//////////////////////////////////////////////////////////////////////////////////
// Next the functions to set up the I2S peripheral and the DMA to feed data to it.
// Set up the I2S peripheral:
void setupI2SPeripheral(uint32_t audioSamplingFreq){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	2310      	movs	r3, #16
 8001f06:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0U, i2sclk = 0U, vcoinput = 0U, vcooutput = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]

  // Enable the clock to the I2S peripheral:
	RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001f18:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <setupI2SPeripheral+0x128>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a3e      	ldr	r2, [pc, #248]	; (8002018 <setupI2SPeripheral+0x128>)
 8001f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure the GPIO pins required for the I2S peripheral:
	Configure_GPIO_Output(GPIOA, 4, 0, 0x06);
 8001f24:	2306      	movs	r3, #6
 8001f26:	2200      	movs	r2, #0
 8001f28:	2104      	movs	r1, #4
 8001f2a:	483c      	ldr	r0, [pc, #240]	; (800201c <setupI2SPeripheral+0x12c>)
 8001f2c:	f7ff f87c 	bl	8001028 <Configure_GPIO_Output>
	Configure_GPIO_Output(GPIOC, 7, 0, 0x06);
 8001f30:	2306      	movs	r3, #6
 8001f32:	2200      	movs	r2, #0
 8001f34:	2107      	movs	r1, #7
 8001f36:	483a      	ldr	r0, [pc, #232]	; (8002020 <setupI2SPeripheral+0x130>)
 8001f38:	f7ff f876 	bl	8001028 <Configure_GPIO_Output>
	Configure_GPIO_Output(GPIOC, 10, 0, 0x06);
 8001f3c:	2306      	movs	r3, #6
 8001f3e:	2200      	movs	r2, #0
 8001f40:	210a      	movs	r1, #10
 8001f42:	4837      	ldr	r0, [pc, #220]	; (8002020 <setupI2SPeripheral+0x130>)
 8001f44:	f7ff f870 	bl	8001028 <Configure_GPIO_Output>
	Configure_GPIO_Output(GPIOC, 12, 0, 0x06);
 8001f48:	2306      	movs	r3, #6
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	210c      	movs	r1, #12
 8001f4e:	4834      	ldr	r0, [pc, #208]	; (8002020 <setupI2SPeripheral+0x130>)
 8001f50:	f7ff f86a 	bl	8001028 <Configure_GPIO_Output>

	SPI3->I2SCFGR = 0; 			// Clear all flags and settings in the I2S register for SPI3
 8001f54:	4b33      	ldr	r3, [pc, #204]	; (8002024 <setupI2SPeripheral+0x134>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
	SPI3->I2SPR = 0x0002U;  // Set the IS2DIV field to 2.  What does this do?  XXX
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <setupI2SPeripheral+0x134>)
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	621a      	str	r2, [r3, #32]
	
	tmpreg = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  packetlength = 16U;
 8001f64:	2310      	movs	r3, #16
 8001f66:	61bb      	str	r3, [r7, #24]
  packetlength = packetlength * 2U;
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
	
	// Note that HSE_VALUE is the frequency of the external high-speed oscillator, in this case 8 MHz
  vcoinput = (uint32_t)(externalClockFrequency / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <setupI2SPeripheral+0x128>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f76:	4a2c      	ldr	r2, [pc, #176]	; (8002028 <setupI2SPeripheral+0x138>)
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	60fb      	str	r3, [r7, #12]
	vcooutput = (uint32_t)(vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos));
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <setupI2SPeripheral+0x128>)
 8001f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	60bb      	str	r3, [r7, #8]
		
	i2sclk = (uint32_t)(vcooutput /((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos));
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <setupI2SPeripheral+0x128>)
 8001f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f98:	0f1b      	lsrs	r3, r3, #28
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	613b      	str	r3, [r7, #16]
  tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / audioSamplingFreq)) + 5);
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	3305      	adds	r3, #5
 8001fc2:	617b      	str	r3, [r7, #20]

  // Remove the flatting point (what does this mean? XXX)
  tmp = tmp / 10U;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4a19      	ldr	r2, [pc, #100]	; (800202c <setupI2SPeripheral+0x13c>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	617b      	str	r3, [r7, #20]

  // Check the parity of the divider
  i2sodd = (uint16_t)(tmp & (uint16_t)1U);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]

  // Compute the i2sdiv prescaler
  i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	085b      	lsrs	r3, r3, #1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	623b      	str	r3, [r7, #32]

  // Get the Mask for the Odd bit (SPI_I2SPR[8]) register
  i2sodd = (uint32_t) (i2sodd << 8U);
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	61fb      	str	r3, [r7, #28]

  // Write to SPIx I2SPR register the computed value, also noting that the master clock
	// output needs to be enabled since the uC is providing the clock for the I2S link.
  SPI3->I2SPR = i2sdiv | i2sodd | SPI_I2SPR_MCKOE;
 8001fec:	6a3a      	ldr	r2, [r7, #32]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <setupI2SPeripheral+0x134>)
 8001ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff8:	6213      	str	r3, [r2, #32]

  // Set up the I2S configuration register.  Everything can be left as default except setting to
	// master mode, and enabling I2S mode:
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (2UL << SPI_I2SCFGR_I2SCFG_Pos));
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8002000:	627b      	str	r3, [r7, #36]	; 0x24

	SPI3->I2SCFGR = tmpreg;
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <setupI2SPeripheral+0x134>)
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	61d3      	str	r3, [r2, #28]
		
	// The I2S should now be set-up and ready to go:
	audioI2SStatus = MY_AUDIO_OK;
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <setupI2SPeripheral+0x140>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40020000 	.word	0x40020000
 8002020:	40020800 	.word	0x40020800
 8002024:	40003c00 	.word	0x40003c00
 8002028:	007a1200 	.word	0x007a1200
 800202c:	cccccccd 	.word	0xcccccccd
 8002030:	20000000 	.word	0x20000000

08002034 <setupDMAForI2SPeripheral>:

/////////////////////////////////////////////////////////////////////////
// Sets up the DMA controller to output data to the I2S peripheral, ready for routing to the DAC:
void setupDMAForI2SPeripheral(){
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  
  // Enable the I2S3 clock, and the GPIO clocks for GPIOA and GPIOC, and the 
	// clock for DMA controller one, then have a short delay while they get going:
	RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 800203a:	4b35      	ldr	r3, [pc, #212]	; (8002110 <setupDMAForI2SPeripheral+0xdc>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <setupDMAForI2SPeripheral+0xdc>)
 8002040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
  RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOAEN);
 8002046:	4b32      	ldr	r3, [pc, #200]	; (8002110 <setupDMAForI2SPeripheral+0xdc>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	4a31      	ldr	r2, [pc, #196]	; (8002110 <setupDMAForI2SPeripheral+0xdc>)
 800204c:	f043 0305 	orr.w	r3, r3, #5
 8002050:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <setupDMAForI2SPeripheral+0xdc>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <setupDMAForI2SPeripheral+0xdc>)
 8002058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
	audioDelay(5);
 800205e:	2005      	movs	r0, #5
 8002060:	f7ff f93e 	bl	80012e0 <audioDelay>

	// I'll be using DMA1 stream 7 for the transfers.
	DMA_Stream_TypeDef *audioDMA = DMA1_Stream7;
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <setupDMAForI2SPeripheral+0xe0>)
 8002066:	607b      	str	r3, [r7, #4]

	// First, disable this stream, and reset all the registers.
	audioDMA->CR = 0;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
  audioDMA->NDTR = 0U;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
	audioDMA->PAR  = 0U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
	audioDMA->M0AR = 0U;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
  audioDMA->M1AR = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
  	
	// Now configure the DMA stream.  Everything that isn't the default is:
	audioDMA->CR |= DMA_SxCR_DIR_0;   // Set direction as memory to peripheral
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
	audioDMA->CR |= DMA_SxCR_MINC;    // Enable auto-increment of memory address
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
	audioDMA->CR |= DMA_SxCR_PSIZE_0; // 16-bit (half-word) peripheral size
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	601a      	str	r2, [r3, #0]
	audioDMA->CR |= DMA_SxCR_MSIZE_0; // 16-bit (half-word) memory size
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
	audioDMA->CR |= DMA_SxCR_PL_1;    // Set priority as high
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	601a      	str	r2, [r3, #0]
	
	audioDMA->FCR |= DMA_SxFCR_DMDIS; // Disable direct mode
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f043 0204 	orr.w	r2, r3, #4
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	615a      	str	r2, [r3, #20]
	audioDMA->FCR |= DMA_SxFCR_FTH;   // Use full FIFO
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f043 0203 	orr.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	615a      	str	r2, [r3, #20]

  // Then clear all interrupt flags for stream seven:
	DMA1->HIFCR = 0x0F400000;
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <setupDMAForI2SPeripheral+0xe4>)
 80020dc:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80020e0:	60da      	str	r2, [r3, #12]
  
  // Configure and enable the I2S DMA interrupts:
  uint32_t prioritygroup = NVIC_GetPriorityGrouping();  
 80020e2:	f7fe ff17 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 80020e6:	6038      	str	r0, [r7, #0]
  NVIC_SetPriority(DMA1_Stream7_IRQn, NVIC_EncodePriority(prioritygroup, 0x0E, 0));
 80020e8:	2200      	movs	r2, #0
 80020ea:	210e      	movs	r1, #14
 80020ec:	6838      	ldr	r0, [r7, #0]
 80020ee:	f7fe ff67 	bl	8000fc0 <NVIC_EncodePriority>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4619      	mov	r1, r3
 80020f6:	202f      	movs	r0, #47	; 0x2f
 80020f8:	f7fe ff38 	bl	8000f6c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80020fc:	202f      	movs	r0, #47	; 0x2f
 80020fe:	f7fe ff17 	bl	8000f30 <__NVIC_EnableIRQ>
	
	// The DMA should now be set-up and ready to go:
	audioDMAStatus = MY_AUDIO_OK;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <setupDMAForI2SPeripheral+0xe8>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	400260b8 	.word	0x400260b8
 8002118:	40026000 	.word	0x40026000
 800211c:	20000001 	.word	0x20000001

08002120 <configureI2SClockPLL>:
// Configure the clock for the I2S peripheral
// These PLL parameters are valid when the f(VCO clock) = 1 MHz
const uint32_t myI2SFreq[8] = {8000, 11025, 16000, 22050, 32000, 44100, 48000, 96000};
const uint32_t myI2SPLLN[8] = {256, 429, 213, 429, 426, 271, 258, 344};
const uint32_t myI2SPLLR[8] = {5, 4, 4, 4, 4, 6, 3, 1};
void configureI2SClockPLL(uint32_t AudioFreq){ 
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint8_t freqIndex = 0x05; // This makes the default 44.1 kHz (standard CD sampling rate)
 8002128:	2305      	movs	r3, #5
 800212a:	73fb      	strb	r3, [r7, #15]
  
  for(uint8_t index = 0; index < 8; index++)
 800212c:	2300      	movs	r3, #0
 800212e:	73bb      	strb	r3, [r7, #14]
 8002130:	e00b      	b.n	800214a <configureI2SClockPLL+0x2a>
  {
    if(myI2SFreq[index] == AudioFreq)
 8002132:	7bbb      	ldrb	r3, [r7, #14]
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <configureI2SClockPLL+0xb0>)
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	d101      	bne.n	8002144 <configureI2SClockPLL+0x24>
    {
      freqIndex = index;
 8002140:	7bbb      	ldrb	r3, [r7, #14]
 8002142:	73fb      	strb	r3, [r7, #15]
  for(uint8_t index = 0; index < 8; index++)
 8002144:	7bbb      	ldrb	r3, [r7, #14]
 8002146:	3301      	adds	r3, #1
 8002148:	73bb      	strb	r3, [r7, #14]
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	2b07      	cmp	r3, #7
 800214e:	d9f0      	bls.n	8002132 <configureI2SClockPLL+0x12>
    }
  }

	// Disable the I2S PLL for a bit...
	RCC->CR &= ~RCC_CR_PLLI2SON;
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <configureI2SClockPLL+0xb4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <configureI2SClockPLL+0xb4>)
 8002156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800215a:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLI2SRDY) {};
 800215c:	bf00      	nop
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <configureI2SClockPLL+0xb4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <configureI2SClockPLL+0x3e>

	// Configure the division factors:
	RCC->PLLI2SCFGR = (RCC->PLLI2SCFGR & ~RCC_PLLI2SCFGR_PLLI2SN) | (myI2SPLLN[freqIndex] <<	RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <configureI2SClockPLL+0xb4>)
 800216c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002170:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	4917      	ldr	r1, [pc, #92]	; (80021d8 <configureI2SClockPLL+0xb8>)
 800217c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002180:	0192      	lsls	r2, r2, #6
 8002182:	4914      	ldr	r1, [pc, #80]	; (80021d4 <configureI2SClockPLL+0xb4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	RCC->PLLI2SCFGR = (RCC->PLLI2SCFGR & ~RCC_PLLI2SCFGR_PLLI2SR) | (myI2SPLLR[freqIndex] <<	RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <configureI2SClockPLL+0xb4>)
 800218c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002190:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4911      	ldr	r1, [pc, #68]	; (80021dc <configureI2SClockPLL+0xbc>)
 8002198:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800219c:	071b      	lsls	r3, r3, #28
 800219e:	490d      	ldr	r1, [pc, #52]	; (80021d4 <configureI2SClockPLL+0xb4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

	// Re-enable the I2S PLL
	RCC->CR |= RCC_CR_PLLI2SON;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <configureI2SClockPLL+0xb4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <configureI2SClockPLL+0xb4>)
 80021ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021b0:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLI2SRDY)) {};
 80021b2:	bf00      	nop
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <configureI2SClockPLL+0xb4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f9      	beq.n	80021b4 <configureI2SClockPLL+0x94>
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	08006788 	.word	0x08006788
 80021d4:	40023800 	.word	0x40023800
 80021d8:	080067a8 	.word	0x080067a8
 80021dc:	080067c8 	.word	0x080067c8

080021e0 <myAudioInitialisePeripherals>:



MY_AUDIO_StatusTypeDef myAudioInitialisePeripherals(uint16_t OutputDevice, uint8_t Volume, uint32_t audioSamplingFreq)
{    
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	603a      	str	r2, [r7, #0]
 80021ea:	80fb      	strh	r3, [r7, #6]
 80021ec:	460b      	mov	r3, r1
 80021ee:	717b      	strb	r3, [r7, #5]
  MY_AUDIO_StatusTypeDef ret = MY_AUDIO_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]
	
	audioDACStatus = MY_AUDIO_RESET;
 80021f4:	4b18      	ldr	r3, [pc, #96]	; (8002258 <myAudioInitialisePeripherals+0x78>)
 80021f6:	2204      	movs	r2, #4
 80021f8:	701a      	strb	r2, [r3, #0]
	audioDMAStatus = MY_AUDIO_RESET;
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <myAudioInitialisePeripherals+0x7c>)
 80021fc:	2204      	movs	r2, #4
 80021fe:	701a      	strb	r2, [r3, #0]
	audioI2CStatus = MY_AUDIO_RESET;
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <myAudioInitialisePeripherals+0x80>)
 8002202:	2204      	movs	r2, #4
 8002204:	701a      	strb	r2, [r3, #0]
	audioI2SStatus = MY_AUDIO_RESET;
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <myAudioInitialisePeripherals+0x84>)
 8002208:	2204      	movs	r2, #4
 800220a:	701a      	strb	r2, [r3, #0]
	
	// Initialise the audio delay timer:
	initAudioTimer();
 800220c:	f7fe ff8a 	bl	8001124 <initAudioTimer>
  
  // The I2S PLL clock is set depending on the audio sampling frequency requested:
  configureI2SClockPLL(audioSamplingFreq);
 8002210:	6838      	ldr	r0, [r7, #0]
 8002212:	f7ff ff85 	bl	8002120 <configureI2SClockPLL>
	
	// Initialise the DMA stream to feed the I2S peripheral:
  setupDMAForI2SPeripheral();
 8002216:	f7ff ff0d 	bl	8002034 <setupDMAForI2SPeripheral>
   
  // Initialise the I2S peripheral to receive data from the DMA controller:
	setupI2SPeripheral(audioSamplingFreq);
 800221a:	6838      	ldr	r0, [r7, #0]
 800221c:	f7ff fe68 	bl	8001ef0 <setupI2SPeripheral>
	
	// Setup the I2C interface to configure the DAC:
	setupAudioI2CPeripheral();
 8002220:	f7ff fae6 	bl	80017f0 <setupAudioI2CPeripheral>
	
	// Setup the reset line to the audio DAC and reset it:
	setupResetForAudioDAC();	
 8002224:	f7ff faf2 	bl	800180c <setupResetForAudioDAC>
  
  // Retrieve audio codec identifier to check it's present and awake at address DAC_ADDR_ON_I2C:
	uint32_t temp = checkAudioDAC_ID(DAC_ADDR_ON_I2C);
 8002228:	2094      	movs	r0, #148	; 0x94
 800222a:	f7ff fe1f 	bl	8001e6c <checkAudioDAC_ID>
 800222e:	60b8      	str	r0, [r7, #8]

	// If the DAC responds, initialise the cs43l22:
  if (temp == 0xE0) {
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2be0      	cmp	r3, #224	; 0xe0
 8002234:	d109      	bne.n	800224a <myAudioInitialisePeripherals+0x6a>
		cs43l22_Init(DAC_ADDR_ON_I2C, OutputDevice, Volume, audioSamplingFreq); 
 8002236:	797a      	ldrb	r2, [r7, #5]
 8002238:	88f9      	ldrh	r1, [r7, #6]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2094      	movs	r0, #148	; 0x94
 800223e:	f000 f925 	bl	800248c <cs43l22_Init>
		audioDACStatus = MY_AUDIO_OK;
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <myAudioInitialisePeripherals+0x78>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
 8002248:	e001      	b.n	800224e <myAudioInitialisePeripherals+0x6e>
	}
	else {
		ret = MY_AUDIO_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	73fb      	strb	r3, [r7, #15]
	}
	
  return ret;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000003 	.word	0x20000003
 800225c:	20000001 	.word	0x20000001
 8002260:	20000002 	.word	0x20000002
 8002264:	20000000 	.word	0x20000000

08002268 <setupDMAForAudioDAC>:


////////////////////////////////////////////////////////////////////////////
// Everything from here down seems to work, and is my version of the Play(),
// ChangeBuffer() and interrupt handler routines.
void setupDMAForAudioDAC(uint32_t buffStart, uint32_t txTransferSize) {
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]

 	// The example uses stream 7 from DMA controller one, so I'll do the same:
	DMA_Stream_TypeDef *audioDMA = DMA1_Stream7;
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <setupDMAForAudioDAC+0x78>)
 8002274:	60fb      	str	r3, [r7, #12]
      
  // Configure the source, destination address and the data length
	// This was originally done in a different function called DMA_SetConfig()
	uint32_t DstAddress = SPI3_BASE + 0x0C; // 0x40003C0C;
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <setupDMAForAudioDAC+0x7c>)
 8002278:	60bb      	str	r3, [r7, #8]
	
  // Clear DBM (double buffer mode) bit (probably not needed here, and might not even work, since
	// the bit is protected and can't be written to when the DMA is enabled).
  audioDMA->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	601a      	str	r2, [r3, #0]

  // Configure DMA Stream data length
  audioDMA->NDTR = txTransferSize / 2;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	085a      	lsrs	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	605a      	str	r2, [r3, #4]

  // Configure DMA Stream destination address (peripheral address)
  audioDMA->PAR = DstAddress;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	609a      	str	r2, [r3, #8]

  // Configure DMA Stream source address (memory address)
  audioDMA->M0AR = buffStart;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	60da      	str	r2, [r3, #12]
	    
  // Clear all interrupt flags at correct offset within the register
	DMA1->HIFCR = 0x0F400000;
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <setupDMAForAudioDAC+0x80>)
 800229c:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80022a0:	60da      	str	r2, [r3, #12]
	    
  // Enable the most common / useful interrupts
  audioDMA->CR  |= DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f043 0216 	orr.w	r2, r3, #22
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	601a      	str	r2, [r3, #0]
  audioDMA->FCR |= 0x00000080U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	615a      	str	r2, [r3, #20]
    
	// Also enable the half-transfer interrupt:
	audioDMA->CR  |= DMA_SxCR_HTIE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f043 0208 	orr.w	r2, r3, #8
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	601a      	str	r2, [r3, #0]
    
  // Enable the peripheral
	audioDMA->CR |=  DMA_SxCR_EN;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	601a      	str	r2, [r3, #0]
  return;	
 80022d2:	bf00      	nop
}
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	400260b8 	.word	0x400260b8
 80022e4:	40003c0c 	.word	0x40003c0c
 80022e8:	40026000 	.word	0x40026000

080022ec <myAudioStartPlaying>:

void myAudioStartPlaying(int16_t *PlayBuff, uint32_t PBSIZE) {	
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]

	// The original program checked that PBSIZE wasn't greater than 32766, might
	// it be worth adding this check in here as well?
	uint8_t audioI2CAddress = DAC_ADDR_ON_I2C;
 80022f6:	2394      	movs	r3, #148	; 0x94
 80022f8:	73fb      	strb	r3, [r7, #15]
	cs43l22_Play(audioI2CAddress, (uint16_t *)&PlayBuff[0], PBSIZE);
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	b292      	uxth	r2, r2
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f9a5 	bl	8002654 <cs43l22_Play>

	// Then it just calls setupDMAForAudioDAC()
	uint32_t tmp = (uint32_t)PlayBuff;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60bb      	str	r3, [r7, #8]
	setupDMAForAudioDAC(tmp, PBSIZE);
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	68b8      	ldr	r0, [r7, #8]
 8002312:	f7ff ffa9 	bl	8002268 <setupDMAForAudioDAC>
	
	// Enable the I2S peripheral if not already enabled:
  if ((SPI3->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <myAudioStartPlaying+0x64>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d005      	beq.n	8002330 <myAudioStartPlaying+0x44>
  {
		SPI3->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <myAudioStartPlaying+0x64>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a09      	ldr	r2, [pc, #36]	; (8002350 <myAudioStartPlaying+0x64>)
 800232a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800232e:	61d3      	str	r3, [r2, #28]
  }
	
	// Finally, if the I2S Tx request is not enabled, enable it:
	if ((SPI3->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN) {
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <myAudioStartPlaying+0x64>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d005      	beq.n	8002348 <myAudioStartPlaying+0x5c>
		SPI3->CR2 |= SPI_CR2_TXDMAEN;
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <myAudioStartPlaying+0x64>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <myAudioStartPlaying+0x64>)
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	6053      	str	r3, [r2, #4]
	}
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40003c00 	.word	0x40003c00

08002354 <DMA1_Stream7_IRQHandler>:

// I'll need an interrupt handler for the DMA1_Stream7 interrupts here.
void DMA1_Stream7_IRQHandler(){
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
	//
	// Functions are to check what sort of event has caused the interrupt, and act
	// accordingly.  In this case that means doing nothing XXX if there is an error,
	// but calling the callback functions for the half-transfer and transfer complete.
	
	uint32_t maskHISRChannel7 = 0x0F400000;
 800235a:	f04f 6374 	mov.w	r3, #255852544	; 0xf400000
 800235e:	607b      	str	r3, [r7, #4]
	uint32_t interruptBits = (DMA1->HISR & maskHISRChannel7) >> DMA_HISR_FEIF7_Pos;
 8002360:	4b28      	ldr	r3, [pc, #160]	; (8002404 <DMA1_Stream7_IRQHandler+0xb0>)
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4013      	ands	r3, r2
 8002368:	0d9b      	lsrs	r3, r3, #22
 800236a:	603b      	str	r3, [r7, #0]
	DMA1->HIFCR = maskHISRChannel7;  // Clear any pending interrupt requests
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <DMA1_Stream7_IRQHandler+0xb0>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60d3      	str	r3, [r2, #12]
	
	if (interruptBits & 0x01) {  // FIFO error
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <DMA1_Stream7_IRQHandler+0x2e>
		audioDMAStatus = MY_AUDIO_ERROR;
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <DMA1_Stream7_IRQHandler+0xb4>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
	}
	if (interruptBits & 0x04) {  // DMA error
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <DMA1_Stream7_IRQHandler+0x3e>
		audioDMAStatus = MY_AUDIO_ERROR;
 800238c:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <DMA1_Stream7_IRQHandler+0xb4>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
	}
	if (interruptBits & 0x08) {  // Transfer error
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <DMA1_Stream7_IRQHandler+0x4e>
		audioDMAStatus = MY_AUDIO_ERROR;
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <DMA1_Stream7_IRQHandler+0xb4>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
	}
	if (interruptBits & 0x10) {  // Half-transfer interrupt
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <DMA1_Stream7_IRQHandler+0x74>
		// If not in circular mode, reset the half-transfer interrupt enable.
    // This does happen in the original code, as circular mode is not used.
    // The interrupt is then re-enabled when myAudioChangeBuffer() is
		// called.  I'm not sure why these interrupts are disabled and re-enabled
		// every time through the buffer.  XXX Maybe try it without at some point?
		if ((DMA1_Stream7->CR & DMA_SxCR_CIRC) == 0) {
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <DMA1_Stream7_IRQHandler+0xb8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <DMA1_Stream7_IRQHandler+0x70>
			DMA1_Stream7->CR &= ~DMA_SxCR_HTIE;
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <DMA1_Stream7_IRQHandler+0xb8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a13      	ldr	r2, [pc, #76]	; (800240c <DMA1_Stream7_IRQHandler+0xb8>)
 80023be:	f023 0308 	bic.w	r3, r3, #8
 80023c2:	6013      	str	r3, [r2, #0]
		}
		myAudioHalfTransferCallback();
 80023c4:	f000 fd02 	bl	8002dcc <myAudioHalfTransferCallback>
	}
	if (interruptBits & 0x20) {  // Transfer complete interrupt
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f003 0320 	and.w	r3, r3, #32
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d013      	beq.n	80023fa <DMA1_Stream7_IRQHandler+0xa6>
		// If not in circular mode, clear the transmit complete interrupt (see above):
		if ((DMA1_Stream7->CR & DMA_SxCR_CIRC) == 0) {
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <DMA1_Stream7_IRQHandler+0xb8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <DMA1_Stream7_IRQHandler+0x96>
			DMA1_Stream7->CR &= ~DMA_SxCR_TCIE;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <DMA1_Stream7_IRQHandler+0xb8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <DMA1_Stream7_IRQHandler+0xb8>)
 80023e4:	f023 0310 	bic.w	r3, r3, #16
 80023e8:	6013      	str	r3, [r2, #0]
		}
		// Clear the transmit DMA enable bit in the I2S3 peripheral to suspend the DMA:
		SPI3->CR2 &= ~SPI_CR2_TXDMAEN;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <DMA1_Stream7_IRQHandler+0xbc>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4a08      	ldr	r2, [pc, #32]	; (8002410 <DMA1_Stream7_IRQHandler+0xbc>)
 80023f0:	f023 0302 	bic.w	r3, r3, #2
 80023f4:	6053      	str	r3, [r2, #4]
		// Call the user function:
		myAudioTransferCompleteCallback();
 80023f6:	f000 fcf5 	bl	8002de4 <myAudioTransferCompleteCallback>
	}	
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40026000 	.word	0x40026000
 8002408:	20000001 	.word	0x20000001
 800240c:	400260b8 	.word	0x400260b8
 8002410:	40003c00 	.word	0x40003c00

08002414 <myAudioChangeBuffer>:

void myAudioChangeBuffer(int16_t *pData, uint32_t size){	
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]

	// A bit of sanity checking: prevent chaos if input makes no sense:
  if((pData == 0U) || (size < 16U))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d02a      	beq.n	800247a <myAudioChangeBuffer+0x66>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	d927      	bls.n	800247a <myAudioChangeBuffer+0x66>
  {
    return;
  }	

  // Enable the Tx DMA Stream:
  uint32_t tmp = (uint32_t)pData;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	60fb      	str	r3, [r7, #12]
  setupDMAForAudioDAC(tmp, size * 2);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4619      	mov	r1, r3
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff ff17 	bl	8002268 <setupDMAForAudioDAC>

  // Check if the I2S is already enabled, and if not enable it:
	if ((AudioI2S->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE) {
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <myAudioChangeBuffer+0x74>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d007      	beq.n	800245a <myAudioChangeBuffer+0x46>
		AudioI2S->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <myAudioChangeBuffer+0x74>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69da      	ldr	r2, [r3, #28]
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <myAudioChangeBuffer+0x74>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002458:	61da      	str	r2, [r3, #28]
	}

  // Check if the I2S Tx request is already enabled, and if not enable it:
  if((AudioI2S->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN)
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <myAudioChangeBuffer+0x74>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b02      	cmp	r3, #2
 8002466:	d00a      	beq.n	800247e <myAudioChangeBuffer+0x6a>
  {
		AudioI2S->CR2 |= SPI_CR2_TXDMAEN;
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <myAudioChangeBuffer+0x74>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <myAudioChangeBuffer+0x74>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0202 	orr.w	r2, r2, #2
 8002476:	605a      	str	r2, [r3, #4]
  }
  return;
 8002478:	e001      	b.n	800247e <myAudioChangeBuffer+0x6a>
    return;
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <myAudioChangeBuffer+0x6c>
  return;
 800247e:	bf00      	nop
}
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000008 	.word	0x20000008

0800248c <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	4603      	mov	r3, r0
 8002496:	81fb      	strh	r3, [r7, #14]
 8002498:	460b      	mov	r3, r1
 800249a:	81bb      	strh	r3, [r7, #12]
 800249c:	4613      	mov	r3, r2
 800249e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80024a4:	f7ff fd0a 	bl	8001ebc <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80024a8:	89fb      	ldrh	r3, [r7, #14]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f9c5 	bl	8002840 <CODEC_IO_Write>
 80024b6:	4603      	mov	r3, r0
 80024b8:	461a      	mov	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	4413      	add	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80024c0:	89bb      	ldrh	r3, [r7, #12]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d81b      	bhi.n	8002500 <cs43l22_Init+0x74>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <cs43l22_Init+0x44>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024e9 	.word	0x080024e9
 80024d8:	080024f1 	.word	0x080024f1
 80024dc:	080024f9 	.word	0x080024f9
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80024e0:	4b5b      	ldr	r3, [pc, #364]	; (8002650 <cs43l22_Init+0x1c4>)
 80024e2:	22fa      	movs	r2, #250	; 0xfa
 80024e4:	701a      	strb	r2, [r3, #0]
    break;
 80024e6:	e00f      	b.n	8002508 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <cs43l22_Init+0x1c4>)
 80024ea:	22af      	movs	r2, #175	; 0xaf
 80024ec:	701a      	strb	r2, [r3, #0]
    break;
 80024ee:	e00b      	b.n	8002508 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80024f0:	4b57      	ldr	r3, [pc, #348]	; (8002650 <cs43l22_Init+0x1c4>)
 80024f2:	22aa      	movs	r2, #170	; 0xaa
 80024f4:	701a      	strb	r2, [r3, #0]
    break;
 80024f6:	e007      	b.n	8002508 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80024f8:	4b55      	ldr	r3, [pc, #340]	; (8002650 <cs43l22_Init+0x1c4>)
 80024fa:	2205      	movs	r2, #5
 80024fc:	701a      	strb	r2, [r3, #0]
    break;    
 80024fe:	e003      	b.n	8002508 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8002500:	4b53      	ldr	r3, [pc, #332]	; (8002650 <cs43l22_Init+0x1c4>)
 8002502:	2205      	movs	r2, #5
 8002504:	701a      	strb	r2, [r3, #0]
    break;    
 8002506:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4a50      	ldr	r2, [pc, #320]	; (8002650 <cs43l22_Init+0x1c4>)
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	2104      	movs	r1, #4
 8002514:	4618      	mov	r0, r3
 8002516:	f000 f993 	bl	8002840 <CODEC_IO_Write>
 800251a:	4603      	mov	r3, r0
 800251c:	461a      	mov	r2, r3
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8002524:	89fb      	ldrh	r3, [r7, #14]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2281      	movs	r2, #129	; 0x81
 800252a:	2105      	movs	r1, #5
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f987 	bl	8002840 <CODEC_IO_Write>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	4413      	add	r3, r2
 800253a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2204      	movs	r2, #4
 8002542:	2106      	movs	r1, #6
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f97b 	bl	8002840 <CODEC_IO_Write>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8002554:	7afa      	ldrb	r2, [r7, #11]
 8002556:	89fb      	ldrh	r3, [r7, #14]
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f8b4 	bl	80026c8 <cs43l22_SetVolume>
 8002560:	4602      	mov	r2, r0
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	4413      	add	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8002568:	89bb      	ldrh	r3, [r7, #12]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d023      	beq.n	80025b6 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2206      	movs	r2, #6
 8002574:	210f      	movs	r1, #15
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f962 	bl	8002840 <CODEC_IO_Write>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	4413      	add	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2200      	movs	r2, #0
 800258c:	2124      	movs	r1, #36	; 0x24
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f956 	bl	8002840 <CODEC_IO_Write>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	4413      	add	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2200      	movs	r2, #0
 80025a4:	2125      	movs	r1, #37	; 0x25
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f94a 	bl	8002840 <CODEC_IO_Write>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4413      	add	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80025b6:	89fb      	ldrh	r3, [r7, #14]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2200      	movs	r2, #0
 80025bc:	210a      	movs	r1, #10
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f93e 	bl	8002840 <CODEC_IO_Write>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4413      	add	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2204      	movs	r2, #4
 80025d4:	210e      	movs	r1, #14
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f932 	bl	8002840 <CODEC_IO_Write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	4413      	add	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2200      	movs	r2, #0
 80025ec:	2127      	movs	r1, #39	; 0x27
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f926 	bl	8002840 <CODEC_IO_Write>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	4413      	add	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	220f      	movs	r2, #15
 8002604:	211f      	movs	r1, #31
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f91a 	bl	8002840 <CODEC_IO_Write>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	4413      	add	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8002616:	89fb      	ldrh	r3, [r7, #14]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	220a      	movs	r2, #10
 800261c:	211a      	movs	r1, #26
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f90e 	bl	8002840 <CODEC_IO_Write>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	4413      	add	r3, r2
 800262c:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	220a      	movs	r2, #10
 8002634:	211b      	movs	r1, #27
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f902 	bl	8002840 <CODEC_IO_Write>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	4413      	add	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8002646:	697b      	ldr	r3, [r7, #20]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200000a8 	.word	0x200000a8

08002654 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	80fb      	strh	r3, [r7, #6]
 8002660:	4613      	mov	r3, r2
 8002662:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <cs43l22_Play+0x70>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d123      	bne.n	80026b8 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2206      	movs	r2, #6
 8002676:	210e      	movs	r1, #14
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f8e1 	bl	8002840 <CODEC_IO_Write>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f879 	bl	8002784 <cs43l22_SetMute>
 8002692:	4602      	mov	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	229e      	movs	r2, #158	; 0x9e
 80026a0:	2102      	movs	r1, #2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f8cc 	bl	8002840 <CODEC_IO_Write>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <cs43l22_Play+0x70>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80026b8:	68fb      	ldr	r3, [r7, #12]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000010 	.word	0x20000010

080026c8 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	460a      	mov	r2, r1
 80026d2:	80fb      	strh	r3, [r7, #6]
 80026d4:	4613      	mov	r3, r2
 80026d6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80026dc:	797b      	ldrb	r3, [r7, #5]
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d80b      	bhi.n	80026fa <cs43l22_SetVolume+0x32>
 80026e2:	797a      	ldrb	r2, [r7, #5]
 80026e4:	4613      	mov	r3, r2
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	4a25      	ldr	r2, [pc, #148]	; (8002780 <cs43l22_SetVolume+0xb8>)
 80026ec:	fb82 1203 	smull	r1, r2, r2, r3
 80026f0:	1152      	asrs	r2, r2, #5
 80026f2:	17db      	asrs	r3, r3, #31
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	e000      	b.n	80026fc <cs43l22_SetVolume+0x34>
 80026fa:	23ff      	movs	r3, #255	; 0xff
 80026fc:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	2be6      	cmp	r3, #230	; 0xe6
 8002702:	d91c      	bls.n	800273e <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	b2d8      	uxtb	r0, r3
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	3319      	adds	r3, #25
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	2120      	movs	r1, #32
 8002712:	f000 f895 	bl	8002840 <CODEC_IO_Write>
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4413      	add	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	b2d8      	uxtb	r0, r3
 8002724:	7afb      	ldrb	r3, [r7, #11]
 8002726:	3319      	adds	r3, #25
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	2121      	movs	r1, #33	; 0x21
 800272e:	f000 f887 	bl	8002840 <CODEC_IO_Write>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4413      	add	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e01b      	b.n	8002776 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	b2d8      	uxtb	r0, r3
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	3319      	adds	r3, #25
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	2120      	movs	r1, #32
 800274c:	f000 f878 	bl	8002840 <CODEC_IO_Write>
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	b2d8      	uxtb	r0, r3
 800275e:	7afb      	ldrb	r3, [r7, #11]
 8002760:	3319      	adds	r3, #25
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	2121      	movs	r1, #33	; 0x21
 8002768:	f000 f86a 	bl	8002840 <CODEC_IO_Write>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	51eb851f 	.word	0x51eb851f

08002784 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d124      	bne.n	80027e4 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	22ff      	movs	r2, #255	; 0xff
 80027a0:	2104      	movs	r1, #4
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f84c 	bl	8002840 <CODEC_IO_Write>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	2122      	movs	r1, #34	; 0x22
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f840 	bl	8002840 <CODEC_IO_Write>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2201      	movs	r2, #1
 80027d0:	2123      	movs	r1, #35	; 0x23
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f834 	bl	8002840 <CODEC_IO_Write>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	e025      	b.n	8002830 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2200      	movs	r2, #0
 80027ea:	2122      	movs	r1, #34	; 0x22
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f827 	bl	8002840 <CODEC_IO_Write>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4413      	add	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2200      	movs	r2, #0
 8002802:	2123      	movs	r1, #35	; 0x23
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f81b 	bl	8002840 <CODEC_IO_Write>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	4a08      	ldr	r2, [pc, #32]	; (800283c <cs43l22_SetMute+0xb8>)
 800281a:	7812      	ldrb	r2, [r2, #0]
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	2104      	movs	r1, #4
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f80d 	bl	8002840 <CODEC_IO_Write>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200000a8 	.word	0x200000a8

08002840 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
 800284a:	460b      	mov	r3, r1
 800284c:	71bb      	strb	r3, [r7, #6]
 800284e:	4613      	mov	r3, r2
 8002850:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8002856:	797a      	ldrb	r2, [r7, #5]
 8002858:	79b9      	ldrb	r1, [r7, #6]
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fb34 	bl	8001eca <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	b2db      	uxtb	r3, r3
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <main>:
// Initial variables.
float frequency = 880;


int main(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
	// Initial components setup.
	setup();
 8002876:	f000 f9b3 	bl	8002be0 <setup>
	//flashGreen(); // Optional for testing
	uint16_t raw;
	char msg[10];
	HAL_Init();
 800287a:	f000 fc93 	bl	80031a4 <HAL_Init>
	SystemClock_Config();
 800287e:	f000 f845 	bl	800290c <SystemClock_Config>
	MX_GPIO_Init();
 8002882:	f000 f91d 	bl	8002ac0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002886:	f000 f89f 	bl	80029c8 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 800288a:	f000 f8ef 	bl	8002a6c <MX_USART2_UART_Init>


		// ADC - Output comes out as "raw" variable which is a 16 bit variable

	    // Test: Set GPIO pin high
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800288e:	2201      	movs	r2, #1
 8002890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002894:	4818      	ldr	r0, [pc, #96]	; (80028f8 <main+0x88>)
 8002896:	f001 fb45 	bl	8003f24 <HAL_GPIO_WritePin>
	    // Get ADC value
	    HAL_ADC_Start(&hadc1);
 800289a:	4818      	ldr	r0, [pc, #96]	; (80028fc <main+0x8c>)
 800289c:	f000 fd38 	bl	8003310 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028a4:	4815      	ldr	r0, [pc, #84]	; (80028fc <main+0x8c>)
 80028a6:	f000 fe05 	bl	80034b4 <HAL_ADC_PollForConversion>
	    raw = HAL_ADC_GetValue(&hadc1); // Serial port display
 80028aa:	4814      	ldr	r0, [pc, #80]	; (80028fc <main+0x8c>)
 80028ac:	f000 fe8d 	bl	80035ca <HAL_ADC_GetValue>
 80028b0:	4603      	mov	r3, r0
 80028b2:	81fb      	strh	r3, [r7, #14]
	    // Test: Set GPIO pin low
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028ba:	480f      	ldr	r0, [pc, #60]	; (80028f8 <main+0x88>)
 80028bc:	f001 fb32 	bl	8003f24 <HAL_GPIO_WritePin>
	    // Convert to string and print
	    sprintf(msg, "%hu\r\n", raw);
 80028c0:	89fa      	ldrh	r2, [r7, #14]
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	490e      	ldr	r1, [pc, #56]	; (8002900 <main+0x90>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 fad6 	bl	8004e78 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fc7e 	bl	80001d0 <strlen>
 80028d4:	4603      	mov	r3, r0
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	1d39      	adds	r1, r7, #4
 80028da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028de:	4809      	ldr	r0, [pc, #36]	; (8002904 <main+0x94>)
 80028e0:	f001 ffcf 	bl	8004882 <HAL_UART_Transmit>
//	    // Quantise the Frequency
//	    frequency = quantise(frequency);
*/
	    // send frequency to the sineWave

		flashGreen();
 80028e4:	f000 f958 	bl	8002b98 <flashGreen>
		loopAudio(frequency);
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <main+0x98>)
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	eeb0 0a67 	vmov.f32	s0, s15
 80028f2:	f000 f9e5 	bl	8002cc0 <loopAudio>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80028f6:	e7ca      	b.n	800288e <main+0x1e>
 80028f8:	40020000 	.word	0x40020000
 80028fc:	200000bc 	.word	0x200000bc
 8002900:	08006780 	.word	0x08006780
 8002904:	20000104 	.word	0x20000104
 8002908:	20000014 	.word	0x20000014

0800290c <SystemClock_Config>:



// Setup for reading inputs
void SystemClock_Config(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b094      	sub	sp, #80	; 0x50
 8002910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002912:	f107 0320 	add.w	r3, r7, #32
 8002916:	2230      	movs	r2, #48	; 0x30
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f002 faa4 	bl	8004e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <SystemClock_Config+0xb4>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <SystemClock_Config+0xb4>)
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293e:	6413      	str	r3, [r2, #64]	; 0x40
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <SystemClock_Config+0xb4>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800294c:	2300      	movs	r3, #0
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <SystemClock_Config+0xb8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <SystemClock_Config+0xb8>)
 8002956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <SystemClock_Config+0xb8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800296c:	2301      	movs	r3, #1
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002970:	2310      	movs	r3, #16
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002974:	2300      	movs	r3, #0
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002978:	f107 0320 	add.w	r3, r7, #32
 800297c:	4618      	mov	r0, r3
 800297e:	f001 faeb 	bl	8003f58 <HAL_RCC_OscConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002988:	f000 f8b4 	bl	8002af4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800298c:	230f      	movs	r3, #15
 800298e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fd4e 	bl	8004448 <HAL_RCC_ClockConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80029b2:	f000 f89f 	bl	8002af4 <Error_Handler>
  }
}
 80029b6:	bf00      	nop
 80029b8:	3750      	adds	r7, #80	; 0x50
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000

080029c8 <MX_ADC1_Init>:


static void MX_ADC1_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ce:	463b      	mov	r3, r7
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <MX_ADC1_Init+0x98>)
 80029dc:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <MX_ADC1_Init+0x9c>)
 80029de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <MX_ADC1_Init+0x98>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <MX_ADC1_Init+0x98>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029ec:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <MX_ADC1_Init+0x98>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029f2:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <MX_ADC1_Init+0x98>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <MX_ADC1_Init+0x98>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <MX_ADC1_Init+0x98>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <MX_ADC1_Init+0x98>)
 8002a08:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <MX_ADC1_Init+0xa0>)
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <MX_ADC1_Init+0x98>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <MX_ADC1_Init+0x98>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <MX_ADC1_Init+0x98>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <MX_ADC1_Init+0x98>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a26:	480e      	ldr	r0, [pc, #56]	; (8002a60 <MX_ADC1_Init+0x98>)
 8002a28:	f000 fc2e 	bl	8003288 <HAL_ADC_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002a32:	f000 f85f 	bl	8002af4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002a36:	2305      	movs	r3, #5
 8002a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a42:	463b      	mov	r3, r7
 8002a44:	4619      	mov	r1, r3
 8002a46:	4806      	ldr	r0, [pc, #24]	; (8002a60 <MX_ADC1_Init+0x98>)
 8002a48:	f000 fdcc 	bl	80035e4 <HAL_ADC_ConfigChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002a52:	f000 f84f 	bl	8002af4 <Error_Handler>
  }

}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	200000bc 	.word	0x200000bc
 8002a64:	40012000 	.word	0x40012000
 8002a68:	0f000001 	.word	0x0f000001

08002a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <MX_USART2_UART_Init+0x50>)
 8002a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002a92:	220c      	movs	r2, #12
 8002a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aa2:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_USART2_UART_Init+0x4c>)
 8002aa4:	f001 fea0 	bl	80047e8 <HAL_UART_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002aae:	f000 f821 	bl	8002af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000104 	.word	0x20000104
 8002abc:	40004400 	.word	0x40004400

08002ac0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <MX_GPIO_Init+0x30>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <MX_GPIO_Init+0x30>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <MX_GPIO_Init+0x30>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]

}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800

08002af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002afc:	e7fe      	b.n	8002afc <Error_Handler+0x8>
	...

08002b00 <__NVIC_SetPriority>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	db0a      	blt.n	8002b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <__NVIC_SetPriority+0x4c>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	440b      	add	r3, r1
 8002b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b28:	e00a      	b.n	8002b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <__NVIC_SetPriority+0x50>)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	3b04      	subs	r3, #4
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	761a      	strb	r2, [r3, #24]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e100 	.word	0xe000e100
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b64:	d301      	bcc.n	8002b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <SysTick_Config+0x40>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b72:	210f      	movs	r1, #15
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b78:	f7ff ffc2 	bl	8002b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <SysTick_Config+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <SysTick_Config+0x40>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <flashGreen>:
 */

// Used to monitor performance.
// Attach oscilloscope probe to green LED pin (PD12) and monitor how
// quickly the board generates new samples.
void flashGreen() {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 8002b9c:	f000 fa58 	bl	8003050 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 2);
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <flashGreen+0x3c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ffd4 	bl	8002b54 <SysTick_Config>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <flashGreen+0x40>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <flashGreen+0x40>)
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER &= ~GPIO_MODER_MODE12_Msk;
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <flashGreen+0x44>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <flashGreen+0x44>)
 8002bbe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002bc2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 1 << GPIO_MODER_MODE12_Pos;
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <flashGreen+0x44>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <flashGreen+0x44>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	2000001c 	.word	0x2000001c
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40020c00 	.word	0x40020c00

08002be0 <setup>:

void setup() {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
	// Sets up timer, peripherals & DAC and programs chip to run at 168 MHz.
	initAudioTimer();
 8002be6:	f7fe fa9d 	bl	8001124 <initAudioTimer>
	myAudioSpeedUpTheSystemClock();
 8002bea:	f7fe fd21 	bl	8001630 <myAudioSpeedUpTheSystemClock>
	myAudioInitialisePeripherals(OUTPUT_DEVICE_AUTO, volume, AUDIO_FREQUENCY_44K); // Board output, volume, sample rate
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <setup+0xd0>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf8:	edc7 7a01 	vstr	s15, [r7, #4]
 8002bfc:	793b      	ldrb	r3, [r7, #4]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002c04:	4619      	mov	r1, r3
 8002c06:	2004      	movs	r0, #4
 8002c08:	f7ff faea 	bl	80021e0 <myAudioInitialisePeripherals>
	// Output options: OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_AUTO or OUTPUT_DEVICE_BOTH

	// Fill previously created sine buffer with appropriate values.
	for (int i = 0; i <= SINELOOKUPSIZE; i++) {
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	e037      	b.n	8002c82 <setup+0xa2>
		float q = 32760 * sin(2.0 * PI * i / SINELOOKUPSIZE);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7fd fc86 	bl	8000524 <__aeabi_i2d>
 8002c18:	a321      	add	r3, pc, #132	; (adr r3, 8002ca0 <setup+0xc0>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fceb 	bl	80005f8 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <setup+0xd4>)
 8002c30:	f7fd fe0c 	bl	800084c <__aeabi_ddiv>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	ec43 2b17 	vmov	d7, r2, r3
 8002c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c40:	eef0 0a67 	vmov.f32	s1, s15
 8002c44:	f002 fd48 	bl	80056d8 <sin>
 8002c48:	ec51 0b10 	vmov	r0, r1, d0
 8002c4c:	a316      	add	r3, pc, #88	; (adr r3, 8002ca8 <setup+0xc8>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd fcd1 	bl	80005f8 <__aeabi_dmul>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f7fd ff8d 	bl	8000b7c <__aeabi_d2f>
 8002c62:	4603      	mov	r3, r0
 8002c64:	60bb      	str	r3, [r7, #8]
		SineBuff[i] = (int16_t)q;
 8002c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6e:	ee17 3a90 	vmov	r3, s15
 8002c72:	b219      	sxth	r1, r3
 8002c74:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <setup+0xd8>)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i <= SINELOOKUPSIZE; i++) {
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c88:	ddc3      	ble.n	8002c12 <setup+0x32>
	}

	myAudioStartPlaying(PlayBuff, PBSIZE); // Play current buffer contents.
 8002c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c8e:	480b      	ldr	r0, [pc, #44]	; (8002cbc <setup+0xdc>)
 8002c90:	f7ff fb2c 	bl	80022ec <myAudioStartPlaying>
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	54442c46 	.word	0x54442c46
 8002ca4:	401921fb 	.word	0x401921fb
 8002ca8:	00000000 	.word	0x00000000
 8002cac:	40dffe00 	.word	0x40dffe00
 8002cb0:	20000018 	.word	0x20000018
 8002cb4:	40900000 	.word	0x40900000
 8002cb8:	20002148 	.word	0x20002148
 8002cbc:	20000148 	.word	0x20000148

08002cc0 <loopAudio>:


void loopAudio(float frequency) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	ed87 0a01 	vstr	s0, [r7, #4]
	float phaseInc = SINELOOKUPSIZE * frequency / AUDIO_FREQUENCY_44K;
 8002cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cce:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002db4 <loopAudio+0xf4>
 8002cd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002db8 <loopAudio+0xf8>
 8002cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cde:	edc7 7a04 	vstr	s15, [r7, #16]

	// If there's been a request to fill half of the buffer,
	// then set the start and end points to fill:
	uint32_t startFill = 0, endFill = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
	if (bufferStatus == firstHalfReq) {
 8002cea:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <loopAudio+0xfc>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d108      	bne.n	8002d04 <loopAudio+0x44>
		startFill = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
		endFill = PBSIZE / 2;
 8002cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cfa:	61bb      	str	r3, [r7, #24]
		bufferStatus = firstHalfDone;
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <loopAudio+0xfc>)
 8002cfe:	2203      	movs	r2, #3
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e00c      	b.n	8002d1e <loopAudio+0x5e>
	}
	else if (bufferStatus == secondHalfReq) {
 8002d04:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <loopAudio+0xfc>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d108      	bne.n	8002d1e <loopAudio+0x5e>
		startFill = PBSIZE / 2;
 8002d0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d10:	61fb      	str	r3, [r7, #28]
		endFill = PBSIZE;
 8002d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d16:	61bb      	str	r3, [r7, #24]
		bufferStatus = secondHalfDone;
 8002d18:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <loopAudio+0xfc>)
 8002d1a:	2205      	movs	r2, #5
 8002d1c:	701a      	strb	r2, [r3, #0]
	}

	if (startFill != endFill) {
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d03f      	beq.n	8002da6 <loopAudio+0xe6>
		for (int i = startFill; i < endFill; i += 2) {
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	e038      	b.n	8002d9e <loopAudio+0xde>
			currentPhase += phaseInc;
 8002d2c:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <loopAudio+0x100>)
 8002d2e:	ed93 7a00 	vldr	s14, [r3]
 8002d32:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <loopAudio+0x100>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
			if (currentPhase > SINELOOKUPSIZE) currentPhase -= SINELOOKUPSIZE;
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <loopAudio+0x100>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002db4 <loopAudio+0xf4>
 8002d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d52:	dd09      	ble.n	8002d68 <loopAudio+0xa8>
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <loopAudio+0x100>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002db4 <loopAudio+0xf4>
 8002d5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <loopAudio+0x100>)
 8002d64:	edc3 7a00 	vstr	s15, [r3]
			int16_t nextSample = SineBuff[(uint16_t)(currentPhase)];
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <loopAudio+0x100>)
 8002d6a:	edd3 7a00 	vldr	s15, [r3]
 8002d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d72:	ee17 3a90 	vmov	r3, s15
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <loopAudio+0x104>)
 8002d7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d80:	81fb      	strh	r3, [r7, #14]
			PlayBuff[i] = nextSample;
 8002d82:	4911      	ldr	r1, [pc, #68]	; (8002dc8 <loopAudio+0x108>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	89fa      	ldrh	r2, [r7, #14]
 8002d88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[i + 1] = nextSample;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	490d      	ldr	r1, [pc, #52]	; (8002dc8 <loopAudio+0x108>)
 8002d92:	89fa      	ldrh	r2, [r7, #14]
 8002d94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = startFill; i < endFill; i += 2) {
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d8c2      	bhi.n	8002d2c <loopAudio+0x6c>
		}
	}
}
 8002da6:	bf00      	nop
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	44800000 	.word	0x44800000
 8002db8:	472c4400 	.word	0x472c4400
 8002dbc:	200000a9 	.word	0x200000a9
 8002dc0:	200000ac 	.word	0x200000ac
 8002dc4:	20002148 	.word	0x20002148
 8002dc8:	20000148 	.word	0x20000148

08002dcc <myAudioHalfTransferCallback>:

// Audio callback functions.
// First half of buffer has been read.
void myAudioHalfTransferCallback(void) {
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
	bufferStatus = firstHalfReq; 			// DMA has read first half, request ARM to update first half with new samples.
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <myAudioHalfTransferCallback+0x14>)
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	701a      	strb	r2, [r3, #0]
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	200000a9 	.word	0x200000a9

08002de4 <myAudioTransferCompleteCallback>:

// Second half of buffer has been read.
void myAudioTransferCompleteCallback(void) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
	myAudioChangeBuffer(PlayBuff, PBSIZE);	// Set DMA to begin reading from beginning of buffer.
 8002de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dec:	4803      	ldr	r0, [pc, #12]	; (8002dfc <myAudioTransferCompleteCallback+0x18>)
 8002dee:	f7ff fb11 	bl	8002414 <myAudioChangeBuffer>
	bufferStatus = secondHalfReq; 			// DMA has read second half, request ARM to update second half with new samples.
 8002df2:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <myAudioTransferCompleteCallback+0x1c>)
 8002df4:	2204      	movs	r2, #4
 8002df6:	701a      	strb	r2, [r3, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000148 	.word	0x20000148
 8002e00:	200000a9 	.word	0x200000a9

08002e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_MspInit+0x4c>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <HAL_MspInit+0x4c>)
 8002e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e18:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_MspInit+0x4c>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_MspInit+0x4c>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <HAL_MspInit+0x4c>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_MspInit+0x4c>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800

08002e54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <HAL_ADC_MspInit+0x7c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d127      	bne.n	8002ec6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6453      	str	r3, [r2, #68]	; 0x44
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_ADC_MspInit+0x80>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <HAL_ADC_MspInit+0x84>)
 8002ec2:	f000 fe93 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ec6:	bf00      	nop
 8002ec8:	3728      	adds	r7, #40	; 0x28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40012000 	.word	0x40012000
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020000 	.word	0x40020000

08002edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a19      	ldr	r2, [pc, #100]	; (8002f60 <HAL_UART_MspInit+0x84>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d12b      	bne.n	8002f56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_UART_MspInit+0x88>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_UART_MspInit+0x88>)
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_UART_MspInit+0x88>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_UART_MspInit+0x88>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a10      	ldr	r2, [pc, #64]	; (8002f64 <HAL_UART_MspInit+0x88>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_UART_MspInit+0x88>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f36:	230c      	movs	r3, #12
 8002f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	2303      	movs	r3, #3
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f46:	2307      	movs	r3, #7
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4805      	ldr	r0, [pc, #20]	; (8002f68 <HAL_UART_MspInit+0x8c>)
 8002f52:	f000 fe4b 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f56:	bf00      	nop
 8002f58:	3728      	adds	r7, #40	; 0x28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40004400 	.word	0x40004400
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020000 	.word	0x40020000

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <NMI_Handler+0x4>

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 f946 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_sbrk>:
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <_sbrk+0x5c>)
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <_sbrk+0x60>)
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <_sbrk+0x22>
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <_sbrk+0x64>)
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <_sbrk+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <_sbrk+0x40>
 8002ff0:	f001 ff10 	bl	8004e14 <__errno>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ffe:	e009      	b.n	8003014 <_sbrk+0x54>
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <_sbrk+0x64>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <_sbrk+0x64>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	4a05      	ldr	r2, [pc, #20]	; (8003024 <_sbrk+0x64>)
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20020000 	.word	0x20020000
 8003020:	00000400 	.word	0x00000400
 8003024:	200000b0 	.word	0x200000b0
 8003028:	20002960 	.word	0x20002960

0800302c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <SystemInit+0x20>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	4a05      	ldr	r2, [pc, #20]	; (800304c <SystemInit+0x20>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	2302      	movs	r3, #2
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	2302      	movs	r3, #2
 8003068:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800306a:	4b34      	ldr	r3, [pc, #208]	; (800313c <SystemCoreClockUpdate+0xec>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b08      	cmp	r3, #8
 8003078:	d011      	beq.n	800309e <SystemCoreClockUpdate+0x4e>
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b08      	cmp	r3, #8
 800307e:	d844      	bhi.n	800310a <SystemCoreClockUpdate+0xba>
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <SystemCoreClockUpdate+0x3e>
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b04      	cmp	r3, #4
 800308a:	d004      	beq.n	8003096 <SystemCoreClockUpdate+0x46>
 800308c:	e03d      	b.n	800310a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800308e:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <SystemCoreClockUpdate+0xf0>)
 8003090:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <SystemCoreClockUpdate+0xf4>)
 8003092:	601a      	str	r2, [r3, #0]
      break;
 8003094:	e03d      	b.n	8003112 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <SystemCoreClockUpdate+0xf0>)
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <SystemCoreClockUpdate+0xf8>)
 800309a:	601a      	str	r2, [r3, #0]
      break;
 800309c:	e039      	b.n	8003112 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <SystemCoreClockUpdate+0xec>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	0d9b      	lsrs	r3, r3, #22
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <SystemCoreClockUpdate+0xec>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80030ba:	4a23      	ldr	r2, [pc, #140]	; (8003148 <SystemCoreClockUpdate+0xf8>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	4a1e      	ldr	r2, [pc, #120]	; (800313c <SystemCoreClockUpdate+0xec>)
 80030c4:	6852      	ldr	r2, [r2, #4]
 80030c6:	0992      	lsrs	r2, r2, #6
 80030c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e00b      	b.n	80030ec <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <SystemCoreClockUpdate+0xf4>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030dc:	4a17      	ldr	r2, [pc, #92]	; (800313c <SystemCoreClockUpdate+0xec>)
 80030de:	6852      	ldr	r2, [r2, #4]
 80030e0:	0992      	lsrs	r2, r2, #6
 80030e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <SystemCoreClockUpdate+0xec>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	fbb2 f3f3 	udiv	r3, r2, r3
 8003104:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <SystemCoreClockUpdate+0xf0>)
 8003106:	6013      	str	r3, [r2, #0]
      break;
 8003108:	e003      	b.n	8003112 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <SystemCoreClockUpdate+0xf0>)
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <SystemCoreClockUpdate+0xf4>)
 800310e:	601a      	str	r2, [r3, #0]
      break;
 8003110:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <SystemCoreClockUpdate+0xec>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	4a0b      	ldr	r2, [pc, #44]	; (800314c <SystemCoreClockUpdate+0xfc>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
 8003120:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <SystemCoreClockUpdate+0xf0>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <SystemCoreClockUpdate+0xf0>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40023800 	.word	0x40023800
 8003140:	2000001c 	.word	0x2000001c
 8003144:	00f42400 	.word	0x00f42400
 8003148:	017d7840 	.word	0x017d7840
 800314c:	080067e8 	.word	0x080067e8

08003150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003154:	480d      	ldr	r0, [pc, #52]	; (800318c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003156:	490e      	ldr	r1, [pc, #56]	; (8003190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800316c:	4c0b      	ldr	r4, [pc, #44]	; (800319c <LoopFillZerobss+0x26>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800317a:	f7ff ff57 	bl	800302c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317e:	f001 fe4f 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003182:	f7ff fb75 	bl	8002870 <main>
  bx  lr    
 8003186:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003194:	08006a20 	.word	0x08006a20
  ldr r2, =_sbss
 8003198:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800319c:	2000295c 	.word	0x2000295c

080031a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC_IRQHandler>
	...

080031a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_Init+0x40>)
 80031ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_Init+0x40>)
 80031ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_Init+0x40>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f000 fcd9 	bl	8003b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d2:	200f      	movs	r0, #15
 80031d4:	f000 f808 	bl	80031e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d8:	f7ff fe14 	bl	8002e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00

080031e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_InitTick+0x54>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x58>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fce3 	bl	8003bd2 <HAL_SYSTICK_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e00e      	b.n	8003234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d80a      	bhi.n	8003232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321c:	2200      	movs	r2, #0
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003224:	f000 fcb9 	bl	8003b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_InitTick+0x5c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	2000001c 	.word	0x2000001c
 8003240:	20000024 	.word	0x20000024
 8003244:	20000020 	.word	0x20000020

08003248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x20>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x24>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4413      	add	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_IncTick+0x24>)
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000024 	.word	0x20000024
 800326c:	20002948 	.word	0x20002948

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20002948 	.word	0x20002948

08003288 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e033      	b.n	8003306 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fdd4 	bl	8002e54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032ce:	f023 0302 	bic.w	r3, r3, #2
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 faa4 	bl	8003828 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f023 0303 	bic.w	r3, r3, #3
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
 80032f6:	e001      	b.n	80032fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_ADC_Start+0x1a>
 8003326:	2302      	movs	r3, #2
 8003328:	e0b2      	b.n	8003490 <HAL_ADC_Start+0x180>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d018      	beq.n	8003372 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003350:	4b52      	ldr	r3, [pc, #328]	; (800349c <HAL_ADC_Start+0x18c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_ADC_Start+0x190>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0c9a      	lsrs	r2, r3, #18
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003364:	e002      	b.n	800336c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d17a      	bne.n	8003476 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033be:	d106      	bne.n	80033ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f023 0206 	bic.w	r2, r3, #6
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
 80033cc:	e002      	b.n	80033d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033dc:	4b31      	ldr	r3, [pc, #196]	; (80034a4 <HAL_ADC_Start+0x194>)
 80033de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d12a      	bne.n	800344c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a2b      	ldr	r2, [pc, #172]	; (80034a8 <HAL_ADC_Start+0x198>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d015      	beq.n	800342c <HAL_ADC_Start+0x11c>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a29      	ldr	r2, [pc, #164]	; (80034ac <HAL_ADC_Start+0x19c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d105      	bne.n	8003416 <HAL_ADC_Start+0x106>
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <HAL_ADC_Start+0x194>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_ADC_Start+0x1a0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d136      	bne.n	800348e <HAL_ADC_Start+0x17e>
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_ADC_Start+0x194>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d130      	bne.n	800348e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d129      	bne.n	800348e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	e020      	b.n	800348e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <HAL_ADC_Start+0x198>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d11b      	bne.n	800348e <HAL_ADC_Start+0x17e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d114      	bne.n	800348e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	e00b      	b.n	800348e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	2000001c 	.word	0x2000001c
 80034a0:	431bde83 	.word	0x431bde83
 80034a4:	40012300 	.word	0x40012300
 80034a8:	40012000 	.word	0x40012000
 80034ac:	40012100 	.word	0x40012100
 80034b0:	40012200 	.word	0x40012200

080034b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d113      	bne.n	80034fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e0:	d10b      	bne.n	80034fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e063      	b.n	80035c2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80034fa:	f7ff feb9 	bl	8003270 <HAL_GetTick>
 80034fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003500:	e021      	b.n	8003546 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003508:	d01d      	beq.n	8003546 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_ADC_PollForConversion+0x6c>
 8003510:	f7ff feae 	bl	8003270 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d212      	bcs.n	8003546 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d00b      	beq.n	8003546 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e03d      	b.n	80035c2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d1d6      	bne.n	8003502 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0212 	mvn.w	r2, #18
 800355c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d123      	bne.n	80035c0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11f      	bne.n	80035c0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003598:	2b00      	cmp	r3, #0
 800359a:	d111      	bne.n	80035c0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e105      	b.n	800380c <HAL_ADC_ConfigChannel+0x228>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b09      	cmp	r3, #9
 800360e:	d925      	bls.n	800365c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68d9      	ldr	r1, [r3, #12]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	3b1e      	subs	r3, #30
 8003626:	2207      	movs	r2, #7
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43da      	mvns	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	400a      	ands	r2, r1
 8003634:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68d9      	ldr	r1, [r3, #12]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	b29b      	uxth	r3, r3
 8003646:	4618      	mov	r0, r3
 8003648:	4603      	mov	r3, r0
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4403      	add	r3, r0
 800364e:	3b1e      	subs	r3, #30
 8003650:	409a      	lsls	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	e022      	b.n	80036a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6919      	ldr	r1, [r3, #16]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	2207      	movs	r2, #7
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	400a      	ands	r2, r1
 800367e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6919      	ldr	r1, [r3, #16]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	b29b      	uxth	r3, r3
 8003690:	4618      	mov	r0, r3
 8003692:	4603      	mov	r3, r0
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4403      	add	r3, r0
 8003698:	409a      	lsls	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d824      	bhi.n	80036f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3b05      	subs	r3, #5
 80036bc:	221f      	movs	r2, #31
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43da      	mvns	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	400a      	ands	r2, r1
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4618      	mov	r0, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	3b05      	subs	r3, #5
 80036e6:	fa00 f203 	lsl.w	r2, r0, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34
 80036f2:	e04c      	b.n	800378e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d824      	bhi.n	8003746 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	3b23      	subs	r3, #35	; 0x23
 800370e:	221f      	movs	r2, #31
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43da      	mvns	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	400a      	ands	r2, r1
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	3b23      	subs	r3, #35	; 0x23
 8003738:	fa00 f203 	lsl.w	r2, r0, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
 8003744:	e023      	b.n	800378e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	3b41      	subs	r3, #65	; 0x41
 8003758:	221f      	movs	r2, #31
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	400a      	ands	r2, r1
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4618      	mov	r0, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	3b41      	subs	r3, #65	; 0x41
 8003782:	fa00 f203 	lsl.w	r2, r0, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_ADC_ConfigChannel+0x234>)
 8003790:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a21      	ldr	r2, [pc, #132]	; (800381c <HAL_ADC_ConfigChannel+0x238>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d109      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1cc>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b12      	cmp	r3, #18
 80037a2:	d105      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_ADC_ConfigChannel+0x238>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d123      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21e>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d003      	beq.n	80037ca <HAL_ADC_ConfigChannel+0x1e6>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b11      	cmp	r3, #17
 80037c8:	d11b      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b10      	cmp	r3, #16
 80037dc:	d111      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_ADC_ConfigChannel+0x23c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <HAL_ADC_ConfigChannel+0x240>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	0c9a      	lsrs	r2, r3, #18
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037f4:	e002      	b.n	80037fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f9      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	40012300 	.word	0x40012300
 800381c:	40012000 	.word	0x40012000
 8003820:	2000001c 	.word	0x2000001c
 8003824:	431bde83 	.word	0x431bde83

08003828 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003830:	4b79      	ldr	r3, [pc, #484]	; (8003a18 <ADC_Init+0x1f0>)
 8003832:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800385c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	021a      	lsls	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	4a58      	ldr	r2, [pc, #352]	; (8003a1c <ADC_Init+0x1f4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6899      	ldr	r1, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	e00f      	b.n	8003926 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003914:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003924:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0202 	bic.w	r2, r2, #2
 8003934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	7e1b      	ldrb	r3, [r3, #24]
 8003940:	005a      	lsls	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01b      	beq.n	800398c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003962:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003972:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	3b01      	subs	r3, #1
 8003980:	035a      	lsls	r2, r3, #13
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	e007      	b.n	800399c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	051a      	lsls	r2, r3, #20
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6899      	ldr	r1, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039de:	025a      	lsls	r2, r3, #9
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6899      	ldr	r1, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	029a      	lsls	r2, r3, #10
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40012300 	.word	0x40012300
 8003a1c:	0f000001 	.word	0x0f000001

08003a20 <__NVIC_SetPriorityGrouping>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	60d3      	str	r3, [r2, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_GetPriorityGrouping>:
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <__NVIC_GetPriorityGrouping+0x18>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 0307 	and.w	r3, r3, #7
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <__NVIC_SetPriority>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	db0a      	blt.n	8003aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	490c      	ldr	r1, [pc, #48]	; (8003ad0 <__NVIC_SetPriority+0x4c>)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	0112      	lsls	r2, r2, #4
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003aac:	e00a      	b.n	8003ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4908      	ldr	r1, [pc, #32]	; (8003ad4 <__NVIC_SetPriority+0x50>)
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	3b04      	subs	r3, #4
 8003abc:	0112      	lsls	r2, r2, #4
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	761a      	strb	r2, [r3, #24]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000e100 	.word	0xe000e100
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <NVIC_EncodePriority>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b089      	sub	sp, #36	; 0x24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f1c3 0307 	rsb	r3, r3, #7
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	bf28      	it	cs
 8003af6:	2304      	movcs	r3, #4
 8003af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3304      	adds	r3, #4
 8003afe:	2b06      	cmp	r3, #6
 8003b00:	d902      	bls.n	8003b08 <NVIC_EncodePriority+0x30>
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3b03      	subs	r3, #3
 8003b06:	e000      	b.n	8003b0a <NVIC_EncodePriority+0x32>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43da      	mvns	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2a:	43d9      	mvns	r1, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b30:	4313      	orrs	r3, r2
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3724      	adds	r7, #36	; 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <SysTick_Config>:
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b50:	d301      	bcc.n	8003b56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003b52:	2301      	movs	r3, #1
 8003b54:	e00f      	b.n	8003b76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <SysTick_Config+0x40>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b5e:	210f      	movs	r1, #15
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b64:	f7ff ff8e 	bl	8003a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <SysTick_Config+0x40>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b6e:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <SysTick_Config+0x40>)
 8003b70:	2207      	movs	r2, #7
 8003b72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	e000e010 	.word	0xe000e010

08003b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff47 	bl	8003a20 <__NVIC_SetPriorityGrouping>
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bac:	f7ff ff5c 	bl	8003a68 <__NVIC_GetPriorityGrouping>
 8003bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	68b9      	ldr	r1, [r7, #8]
 8003bb6:	6978      	ldr	r0, [r7, #20]
 8003bb8:	f7ff ff8e 	bl	8003ad8 <NVIC_EncodePriority>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff ff5d 	bl	8003a84 <__NVIC_SetPriority>
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ffb0 	bl	8003b40 <SysTick_Config>
 8003be0:	4603      	mov	r3, r0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	e16b      	b.n	8003ee0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c08:	2201      	movs	r2, #1
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	f040 815a 	bne.w	8003eda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d005      	beq.n	8003c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d130      	bne.n	8003ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c74:	2201      	movs	r2, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 0201 	and.w	r2, r3, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d017      	beq.n	8003cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d123      	bne.n	8003d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	08da      	lsrs	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3208      	adds	r2, #8
 8003cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	220f      	movs	r2, #15
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	08da      	lsrs	r2, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3208      	adds	r2, #8
 8003d2a:	69b9      	ldr	r1, [r7, #24]
 8003d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0203 	and.w	r2, r3, #3
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80b4 	beq.w	8003eda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	4b60      	ldr	r3, [pc, #384]	; (8003ef8 <HAL_GPIO_Init+0x30c>)
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	4a5f      	ldr	r2, [pc, #380]	; (8003ef8 <HAL_GPIO_Init+0x30c>)
 8003d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d80:	6453      	str	r3, [r2, #68]	; 0x44
 8003d82:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_GPIO_Init+0x30c>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d8e:	4a5b      	ldr	r2, [pc, #364]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	3302      	adds	r3, #2
 8003d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a52      	ldr	r2, [pc, #328]	; (8003f00 <HAL_GPIO_Init+0x314>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02b      	beq.n	8003e12 <HAL_GPIO_Init+0x226>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a51      	ldr	r2, [pc, #324]	; (8003f04 <HAL_GPIO_Init+0x318>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d025      	beq.n	8003e0e <HAL_GPIO_Init+0x222>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a50      	ldr	r2, [pc, #320]	; (8003f08 <HAL_GPIO_Init+0x31c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01f      	beq.n	8003e0a <HAL_GPIO_Init+0x21e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a4f      	ldr	r2, [pc, #316]	; (8003f0c <HAL_GPIO_Init+0x320>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d019      	beq.n	8003e06 <HAL_GPIO_Init+0x21a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4e      	ldr	r2, [pc, #312]	; (8003f10 <HAL_GPIO_Init+0x324>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_GPIO_Init+0x216>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4d      	ldr	r2, [pc, #308]	; (8003f14 <HAL_GPIO_Init+0x328>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00d      	beq.n	8003dfe <HAL_GPIO_Init+0x212>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4c      	ldr	r2, [pc, #304]	; (8003f18 <HAL_GPIO_Init+0x32c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <HAL_GPIO_Init+0x20e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4b      	ldr	r2, [pc, #300]	; (8003f1c <HAL_GPIO_Init+0x330>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_GPIO_Init+0x20a>
 8003df2:	2307      	movs	r3, #7
 8003df4:	e00e      	b.n	8003e14 <HAL_GPIO_Init+0x228>
 8003df6:	2308      	movs	r3, #8
 8003df8:	e00c      	b.n	8003e14 <HAL_GPIO_Init+0x228>
 8003dfa:	2306      	movs	r3, #6
 8003dfc:	e00a      	b.n	8003e14 <HAL_GPIO_Init+0x228>
 8003dfe:	2305      	movs	r3, #5
 8003e00:	e008      	b.n	8003e14 <HAL_GPIO_Init+0x228>
 8003e02:	2304      	movs	r3, #4
 8003e04:	e006      	b.n	8003e14 <HAL_GPIO_Init+0x228>
 8003e06:	2303      	movs	r3, #3
 8003e08:	e004      	b.n	8003e14 <HAL_GPIO_Init+0x228>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e002      	b.n	8003e14 <HAL_GPIO_Init+0x228>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <HAL_GPIO_Init+0x228>
 8003e12:	2300      	movs	r3, #0
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	f002 0203 	and.w	r2, r2, #3
 8003e1a:	0092      	lsls	r2, r2, #2
 8003e1c:	4093      	lsls	r3, r2
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e24:	4935      	ldr	r1, [pc, #212]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e32:	4b3b      	ldr	r3, [pc, #236]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e56:	4a32      	ldr	r2, [pc, #200]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e5c:	4b30      	ldr	r3, [pc, #192]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e86:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed4:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	f67f ae90 	bls.w	8003c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	3724      	adds	r7, #36	; 0x24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	40013800 	.word	0x40013800
 8003f00:	40020000 	.word	0x40020000
 8003f04:	40020400 	.word	0x40020400
 8003f08:	40020800 	.word	0x40020800
 8003f0c:	40020c00 	.word	0x40020c00
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40021400 	.word	0x40021400
 8003f18:	40021800 	.word	0x40021800
 8003f1c:	40021c00 	.word	0x40021c00
 8003f20:	40013c00 	.word	0x40013c00

08003f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f34:	787b      	ldrb	r3, [r7, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f40:	e003      	b.n	8003f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	619a      	str	r2, [r3, #24]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e264      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d075      	beq.n	8004062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f76:	4ba3      	ldr	r3, [pc, #652]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d00c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f82:	4ba0      	ldr	r3, [pc, #640]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d112      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8e:	4b9d      	ldr	r3, [pc, #628]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9c:	4b99      	ldr	r3, [pc, #612]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d05b      	beq.n	8004060 <HAL_RCC_OscConfig+0x108>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d157      	bne.n	8004060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e23f      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbc:	d106      	bne.n	8003fcc <HAL_RCC_OscConfig+0x74>
 8003fbe:	4b91      	ldr	r3, [pc, #580]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a90      	ldr	r2, [pc, #576]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e01d      	b.n	8004008 <HAL_RCC_OscConfig+0xb0>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd4:	d10c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x98>
 8003fd6:	4b8b      	ldr	r3, [pc, #556]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a8a      	ldr	r2, [pc, #552]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b88      	ldr	r3, [pc, #544]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a87      	ldr	r2, [pc, #540]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e00b      	b.n	8004008 <HAL_RCC_OscConfig+0xb0>
 8003ff0:	4b84      	ldr	r3, [pc, #528]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a83      	ldr	r2, [pc, #524]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a80      	ldr	r2, [pc, #512]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d013      	beq.n	8004038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7ff f92e 	bl	8003270 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7ff f92a 	bl	8003270 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e204      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b76      	ldr	r3, [pc, #472]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0xc0>
 8004036:	e014      	b.n	8004062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7ff f91a 	bl	8003270 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7ff f916 	bl	8003270 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e1f0      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0xe8>
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d063      	beq.n	8004136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406e:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b62      	ldr	r3, [pc, #392]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004082:	2b08      	cmp	r3, #8
 8004084:	d11c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004086:	4b5f      	ldr	r3, [pc, #380]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d116      	bne.n	80040c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	4b5c      	ldr	r3, [pc, #368]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_RCC_OscConfig+0x152>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d001      	beq.n	80040aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e1c4      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b56      	ldr	r3, [pc, #344]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4952      	ldr	r1, [pc, #328]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	e03a      	b.n	8004136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7ff f8cf 	bl	8003270 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d6:	f7ff f8cb 	bl	8003270 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e1a5      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	4b46      	ldr	r3, [pc, #280]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b43      	ldr	r3, [pc, #268]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4940      	ldr	r1, [pc, #256]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	4313      	orrs	r3, r2
 8004106:	600b      	str	r3, [r1, #0]
 8004108:	e015      	b.n	8004136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_OscConfig+0x2b0>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7ff f8ae 	bl	8003270 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004118:	f7ff f8aa 	bl	8003270 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e184      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	4b36      	ldr	r3, [pc, #216]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d030      	beq.n	80041a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414a:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_RCC_OscConfig+0x2b4>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004150:	f7ff f88e 	bl	8003270 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004158:	f7ff f88a 	bl	8003270 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e164      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	4b26      	ldr	r3, [pc, #152]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x200>
 8004176:	e015      	b.n	80041a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004178:	4b24      	ldr	r3, [pc, #144]	; (800420c <HAL_RCC_OscConfig+0x2b4>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7ff f877 	bl	8003270 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004186:	f7ff f873 	bl	8003270 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e14d      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a0 	beq.w	80042f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	4a0e      	ldr	r2, [pc, #56]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6413      	str	r3, [r2, #64]	; 0x40
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_OscConfig+0x2b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d121      	bne.n	8004232 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <HAL_RCC_OscConfig+0x2b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a07      	ldr	r2, [pc, #28]	; (8004210 <HAL_RCC_OscConfig+0x2b8>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7ff f839 	bl	8003270 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	e011      	b.n	8004226 <HAL_RCC_OscConfig+0x2ce>
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	42470000 	.word	0x42470000
 800420c:	42470e80 	.word	0x42470e80
 8004210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004214:	f7ff f82c 	bl	8003270 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e106      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004226:	4b85      	ldr	r3, [pc, #532]	; (800443c <HAL_RCC_OscConfig+0x4e4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d106      	bne.n	8004248 <HAL_RCC_OscConfig+0x2f0>
 800423a:	4b81      	ldr	r3, [pc, #516]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a80      	ldr	r2, [pc, #512]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
 8004246:	e01c      	b.n	8004282 <HAL_RCC_OscConfig+0x32a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b05      	cmp	r3, #5
 800424e:	d10c      	bne.n	800426a <HAL_RCC_OscConfig+0x312>
 8004250:	4b7b      	ldr	r3, [pc, #492]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a7a      	ldr	r2, [pc, #488]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004256:	f043 0304 	orr.w	r3, r3, #4
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	4b78      	ldr	r3, [pc, #480]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a77      	ldr	r2, [pc, #476]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	e00b      	b.n	8004282 <HAL_RCC_OscConfig+0x32a>
 800426a:	4b75      	ldr	r3, [pc, #468]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a74      	ldr	r2, [pc, #464]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
 8004276:	4b72      	ldr	r3, [pc, #456]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a71      	ldr	r2, [pc, #452]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d015      	beq.n	80042b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fe fff1 	bl	8003270 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fe ffed 	bl	8003270 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0c5      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a8:	4b65      	ldr	r3, [pc, #404]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ee      	beq.n	8004292 <HAL_RCC_OscConfig+0x33a>
 80042b4:	e014      	b.n	80042e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b6:	f7fe ffdb 	bl	8003270 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe ffd7 	bl	8003270 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0af      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d4:	4b5a      	ldr	r3, [pc, #360]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ee      	bne.n	80042be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4b56      	ldr	r3, [pc, #344]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	4a55      	ldr	r2, [pc, #340]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 809b 	beq.w	8004432 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d05c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d141      	bne.n	8004394 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004310:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <HAL_RCC_OscConfig+0x4ec>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fe ffab 	bl	8003270 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431e:	f7fe ffa7 	bl	8003270 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e081      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004330:	4b43      	ldr	r3, [pc, #268]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434a:	019b      	lsls	r3, r3, #6
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	3b01      	subs	r3, #1
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	4937      	ldr	r1, [pc, #220]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004366:	4b37      	ldr	r3, [pc, #220]	; (8004444 <HAL_RCC_OscConfig+0x4ec>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fe ff80 	bl	8003270 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004374:	f7fe ff7c 	bl	8003270 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e056      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004386:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x41c>
 8004392:	e04e      	b.n	8004432 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004394:	4b2b      	ldr	r3, [pc, #172]	; (8004444 <HAL_RCC_OscConfig+0x4ec>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7fe ff69 	bl	8003270 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a2:	f7fe ff65 	bl	8003270 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e03f      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b4:	4b22      	ldr	r3, [pc, #136]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <HAL_RCC_OscConfig+0x44a>
 80043c0:	e037      	b.n	8004432 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e032      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043ce:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <HAL_RCC_OscConfig+0x4e8>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d028      	beq.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d121      	bne.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d11a      	bne.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004404:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004406:	4293      	cmp	r3, r2
 8004408:	d111      	bne.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	3b01      	subs	r3, #1
 8004418:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d107      	bne.n	800442e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40007000 	.word	0x40007000
 8004440:	40023800 	.word	0x40023800
 8004444:	42470060 	.word	0x42470060

08004448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0cc      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800445c:	4b68      	ldr	r3, [pc, #416]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d90c      	bls.n	8004484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446a:	4b65      	ldr	r3, [pc, #404]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004472:	4b63      	ldr	r3, [pc, #396]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d001      	beq.n	8004484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0b8      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800449c:	4b59      	ldr	r3, [pc, #356]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4a58      	ldr	r2, [pc, #352]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b4:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a52      	ldr	r2, [pc, #328]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c0:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	494d      	ldr	r1, [pc, #308]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d044      	beq.n	8004568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	4b47      	ldr	r3, [pc, #284]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d119      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e07f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d003      	beq.n	8004506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	2b03      	cmp	r3, #3
 8004504:	d107      	bne.n	8004516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e06f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004516:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e067      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f023 0203 	bic.w	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	4934      	ldr	r1, [pc, #208]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004538:	f7fe fe9a 	bl	8003270 <HAL_GetTick>
 800453c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	e00a      	b.n	8004556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004540:	f7fe fe96 	bl	8003270 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	f241 3288 	movw	r2, #5000	; 0x1388
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e04f      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 020c 	and.w	r2, r3, #12
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	429a      	cmp	r2, r3
 8004566:	d1eb      	bne.n	8004540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d20c      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_RCC_ClockConfig+0x1b8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d001      	beq.n	8004590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e032      	b.n	80045f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459c:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4916      	ldr	r1, [pc, #88]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	490e      	ldr	r1, [pc, #56]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ce:	f000 f821 	bl	8004614 <HAL_RCC_GetSysClockFreq>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	490a      	ldr	r1, [pc, #40]	; (8004608 <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	5ccb      	ldrb	r3, [r1, r3]
 80045e2:	fa22 f303 	lsr.w	r3, r2, r3
 80045e6:	4a09      	ldr	r2, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fdfa 	bl	80031e8 <HAL_InitTick>

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023c00 	.word	0x40023c00
 8004604:	40023800 	.word	0x40023800
 8004608:	080067e8 	.word	0x080067e8
 800460c:	2000001c 	.word	0x2000001c
 8004610:	20000020 	.word	0x20000020

08004614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004614:	b5b0      	push	{r4, r5, r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800461a:	2100      	movs	r1, #0
 800461c:	6079      	str	r1, [r7, #4]
 800461e:	2100      	movs	r1, #0
 8004620:	60f9      	str	r1, [r7, #12]
 8004622:	2100      	movs	r1, #0
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004626:	2100      	movs	r1, #0
 8004628:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800462a:	4952      	ldr	r1, [pc, #328]	; (8004774 <HAL_RCC_GetSysClockFreq+0x160>)
 800462c:	6889      	ldr	r1, [r1, #8]
 800462e:	f001 010c 	and.w	r1, r1, #12
 8004632:	2908      	cmp	r1, #8
 8004634:	d00d      	beq.n	8004652 <HAL_RCC_GetSysClockFreq+0x3e>
 8004636:	2908      	cmp	r1, #8
 8004638:	f200 8094 	bhi.w	8004764 <HAL_RCC_GetSysClockFreq+0x150>
 800463c:	2900      	cmp	r1, #0
 800463e:	d002      	beq.n	8004646 <HAL_RCC_GetSysClockFreq+0x32>
 8004640:	2904      	cmp	r1, #4
 8004642:	d003      	beq.n	800464c <HAL_RCC_GetSysClockFreq+0x38>
 8004644:	e08e      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004646:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <HAL_RCC_GetSysClockFreq+0x164>)
 8004648:	60bb      	str	r3, [r7, #8]
       break;
 800464a:	e08e      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464c:	4b4b      	ldr	r3, [pc, #300]	; (800477c <HAL_RCC_GetSysClockFreq+0x168>)
 800464e:	60bb      	str	r3, [r7, #8]
      break;
 8004650:	e08b      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004652:	4948      	ldr	r1, [pc, #288]	; (8004774 <HAL_RCC_GetSysClockFreq+0x160>)
 8004654:	6849      	ldr	r1, [r1, #4]
 8004656:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800465a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465c:	4945      	ldr	r1, [pc, #276]	; (8004774 <HAL_RCC_GetSysClockFreq+0x160>)
 800465e:	6849      	ldr	r1, [r1, #4]
 8004660:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004664:	2900      	cmp	r1, #0
 8004666:	d024      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004668:	4942      	ldr	r1, [pc, #264]	; (8004774 <HAL_RCC_GetSysClockFreq+0x160>)
 800466a:	6849      	ldr	r1, [r1, #4]
 800466c:	0989      	lsrs	r1, r1, #6
 800466e:	4608      	mov	r0, r1
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004678:	f04f 0500 	mov.w	r5, #0
 800467c:	ea00 0204 	and.w	r2, r0, r4
 8004680:	ea01 0305 	and.w	r3, r1, r5
 8004684:	493d      	ldr	r1, [pc, #244]	; (800477c <HAL_RCC_GetSysClockFreq+0x168>)
 8004686:	fb01 f003 	mul.w	r0, r1, r3
 800468a:	2100      	movs	r1, #0
 800468c:	fb01 f102 	mul.w	r1, r1, r2
 8004690:	1844      	adds	r4, r0, r1
 8004692:	493a      	ldr	r1, [pc, #232]	; (800477c <HAL_RCC_GetSysClockFreq+0x168>)
 8004694:	fba2 0101 	umull	r0, r1, r2, r1
 8004698:	1863      	adds	r3, r4, r1
 800469a:	4619      	mov	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	461a      	mov	r2, r3
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	f7fc faba 	bl	8000c1c <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4613      	mov	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e04a      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b2:	4b30      	ldr	r3, [pc, #192]	; (8004774 <HAL_RCC_GetSysClockFreq+0x160>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	461a      	mov	r2, r3
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046c2:	f04f 0100 	mov.w	r1, #0
 80046c6:	ea02 0400 	and.w	r4, r2, r0
 80046ca:	ea03 0501 	and.w	r5, r3, r1
 80046ce:	4620      	mov	r0, r4
 80046d0:	4629      	mov	r1, r5
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	014b      	lsls	r3, r1, #5
 80046dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046e0:	0142      	lsls	r2, r0, #5
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	1b00      	subs	r0, r0, r4
 80046e8:	eb61 0105 	sbc.w	r1, r1, r5
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	018b      	lsls	r3, r1, #6
 80046f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046fa:	0182      	lsls	r2, r0, #6
 80046fc:	1a12      	subs	r2, r2, r0
 80046fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	00d9      	lsls	r1, r3, #3
 800470c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004710:	00d0      	lsls	r0, r2, #3
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	1912      	adds	r2, r2, r4
 8004718:	eb45 0303 	adc.w	r3, r5, r3
 800471c:	f04f 0000 	mov.w	r0, #0
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	0299      	lsls	r1, r3, #10
 8004726:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800472a:	0290      	lsls	r0, r2, #10
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	461a      	mov	r2, r3
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	f7fc fa6e 	bl	8000c1c <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4613      	mov	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_RCC_GetSysClockFreq+0x160>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	3301      	adds	r3, #1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	60bb      	str	r3, [r7, #8]
      break;
 8004762:	e002      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <HAL_RCC_GetSysClockFreq+0x164>)
 8004766:	60bb      	str	r3, [r7, #8]
      break;
 8004768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476a:	68bb      	ldr	r3, [r7, #8]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bdb0      	pop	{r4, r5, r7, pc}
 8004774:	40023800 	.word	0x40023800
 8004778:	00f42400 	.word	0x00f42400
 800477c:	017d7840 	.word	0x017d7840

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_RCC_GetHCLKFreq+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	2000001c 	.word	0x2000001c

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800479c:	f7ff fff0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4903      	ldr	r1, [pc, #12]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40023800 	.word	0x40023800
 80047bc:	080067f8 	.word	0x080067f8

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047c4:	f7ff ffdc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0b5b      	lsrs	r3, r3, #13
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	080067f8 	.word	0x080067f8

080047e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e03f      	b.n	800487a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fe fb64 	bl	8002edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2224      	movs	r2, #36	; 0x24
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800482a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f929 	bl	8004a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b08a      	sub	sp, #40	; 0x28
 8004886:	af02      	add	r7, sp, #8
 8004888:	60f8      	str	r0, [r7, #12]
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	603b      	str	r3, [r7, #0]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d17c      	bne.n	800499c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <HAL_UART_Transmit+0x2c>
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e075      	b.n	800499e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Transmit+0x3e>
 80048bc:	2302      	movs	r3, #2
 80048be:	e06e      	b.n	800499e <HAL_UART_Transmit+0x11c>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2221      	movs	r2, #33	; 0x21
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048d6:	f7fe fccb 	bl	8003270 <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	88fa      	ldrh	r2, [r7, #6]
 80048e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f0:	d108      	bne.n	8004904 <HAL_UART_Transmit+0x82>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d104      	bne.n	8004904 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	e003      	b.n	800490c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004914:	e02a      	b.n	800496c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2200      	movs	r2, #0
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f840 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e036      	b.n	800499e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	3302      	adds	r3, #2
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e007      	b.n	800495e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1cf      	bne.n	8004916 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2140      	movs	r1, #64	; 0x40
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f810 	bl	80049a6 <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e006      	b.n	800499e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b090      	sub	sp, #64	; 0x40
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	603b      	str	r3, [r7, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b6:	e050      	b.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049be:	d04c      	beq.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80049c6:	f7fe fc53 	bl	8003270 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d241      	bcs.n	8004a5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	330c      	adds	r3, #12
 80049f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049f6:	637a      	str	r2, [r7, #52]	; 0x34
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3314      	adds	r3, #20
 8004a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a2a:	623a      	str	r2, [r7, #32]
 8004a2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	69f9      	ldr	r1, [r7, #28]
 8004a30:	6a3a      	ldr	r2, [r7, #32]
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e5      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e00f      	b.n	8004a7a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d09f      	beq.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3740      	adds	r7, #64	; 0x40
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	b09f      	sub	sp, #124	; 0x7c
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9a:	68d9      	ldr	r1, [r3, #12]
 8004a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	ea40 0301 	orr.w	r3, r0, r1
 8004aa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ac8:	f021 010c 	bic.w	r1, r1, #12
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae2:	6999      	ldr	r1, [r3, #24]
 8004ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	ea40 0301 	orr.w	r3, r0, r1
 8004aec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4bc5      	ldr	r3, [pc, #788]	; (8004e08 <UART_SetConfig+0x384>)
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d004      	beq.n	8004b02 <UART_SetConfig+0x7e>
 8004af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4bc3      	ldr	r3, [pc, #780]	; (8004e0c <UART_SetConfig+0x388>)
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d103      	bne.n	8004b0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b02:	f7ff fe5d 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8004b06:	6778      	str	r0, [r7, #116]	; 0x74
 8004b08:	e002      	b.n	8004b10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b0a:	f7ff fe45 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8004b0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b18:	f040 80b6 	bne.w	8004c88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1e:	461c      	mov	r4, r3
 8004b20:	f04f 0500 	mov.w	r5, #0
 8004b24:	4622      	mov	r2, r4
 8004b26:	462b      	mov	r3, r5
 8004b28:	1891      	adds	r1, r2, r2
 8004b2a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b2c:	415b      	adcs	r3, r3
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b34:	1912      	adds	r2, r2, r4
 8004b36:	eb45 0303 	adc.w	r3, r5, r3
 8004b3a:	f04f 0000 	mov.w	r0, #0
 8004b3e:	f04f 0100 	mov.w	r1, #0
 8004b42:	00d9      	lsls	r1, r3, #3
 8004b44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b48:	00d0      	lsls	r0, r2, #3
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	1911      	adds	r1, r2, r4
 8004b50:	6639      	str	r1, [r7, #96]	; 0x60
 8004b52:	416b      	adcs	r3, r5
 8004b54:	667b      	str	r3, [r7, #100]	; 0x64
 8004b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	1891      	adds	r1, r2, r2
 8004b62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b64:	415b      	adcs	r3, r3
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b70:	f7fc f854 	bl	8000c1c <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4ba5      	ldr	r3, [pc, #660]	; (8004e10 <UART_SetConfig+0x38c>)
 8004b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	011e      	lsls	r6, r3, #4
 8004b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b84:	461c      	mov	r4, r3
 8004b86:	f04f 0500 	mov.w	r5, #0
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	1891      	adds	r1, r2, r2
 8004b90:	6339      	str	r1, [r7, #48]	; 0x30
 8004b92:	415b      	adcs	r3, r3
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
 8004b96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b9a:	1912      	adds	r2, r2, r4
 8004b9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ba0:	f04f 0000 	mov.w	r0, #0
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	00d9      	lsls	r1, r3, #3
 8004baa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bae:	00d0      	lsls	r0, r2, #3
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	1911      	adds	r1, r2, r4
 8004bb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb8:	416b      	adcs	r3, r5
 8004bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	1891      	adds	r1, r2, r2
 8004bc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bca:	415b      	adcs	r3, r3
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004bd6:	f7fc f821 	bl	8000c1c <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4b8c      	ldr	r3, [pc, #560]	; (8004e10 <UART_SetConfig+0x38c>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	; 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	3332      	adds	r3, #50	; 0x32
 8004bf2:	4a87      	ldr	r2, [pc, #540]	; (8004e10 <UART_SetConfig+0x38c>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c00:	441e      	add	r6, r3
 8004c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c04:	4618      	mov	r0, r3
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	1894      	adds	r4, r2, r2
 8004c10:	623c      	str	r4, [r7, #32]
 8004c12:	415b      	adcs	r3, r3
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
 8004c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c1a:	1812      	adds	r2, r2, r0
 8004c1c:	eb41 0303 	adc.w	r3, r1, r3
 8004c20:	f04f 0400 	mov.w	r4, #0
 8004c24:	f04f 0500 	mov.w	r5, #0
 8004c28:	00dd      	lsls	r5, r3, #3
 8004c2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c2e:	00d4      	lsls	r4, r2, #3
 8004c30:	4622      	mov	r2, r4
 8004c32:	462b      	mov	r3, r5
 8004c34:	1814      	adds	r4, r2, r0
 8004c36:	653c      	str	r4, [r7, #80]	; 0x50
 8004c38:	414b      	adcs	r3, r1
 8004c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	461a      	mov	r2, r3
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	1891      	adds	r1, r2, r2
 8004c48:	61b9      	str	r1, [r7, #24]
 8004c4a:	415b      	adcs	r3, r3
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c56:	f7fb ffe1 	bl	8000c1c <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4b6c      	ldr	r3, [pc, #432]	; (8004e10 <UART_SetConfig+0x38c>)
 8004c60:	fba3 1302 	umull	r1, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	2164      	movs	r1, #100	; 0x64
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	3332      	adds	r3, #50	; 0x32
 8004c72:	4a67      	ldr	r2, [pc, #412]	; (8004e10 <UART_SetConfig+0x38c>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f003 0207 	and.w	r2, r3, #7
 8004c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4432      	add	r2, r6
 8004c84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c86:	e0b9      	b.n	8004dfc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8a:	461c      	mov	r4, r3
 8004c8c:	f04f 0500 	mov.w	r5, #0
 8004c90:	4622      	mov	r2, r4
 8004c92:	462b      	mov	r3, r5
 8004c94:	1891      	adds	r1, r2, r2
 8004c96:	6139      	str	r1, [r7, #16]
 8004c98:	415b      	adcs	r3, r3
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ca0:	1912      	adds	r2, r2, r4
 8004ca2:	eb45 0303 	adc.w	r3, r5, r3
 8004ca6:	f04f 0000 	mov.w	r0, #0
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	00d9      	lsls	r1, r3, #3
 8004cb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cb4:	00d0      	lsls	r0, r2, #3
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	eb12 0804 	adds.w	r8, r2, r4
 8004cbe:	eb43 0905 	adc.w	r9, r3, r5
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f04f 0100 	mov.w	r1, #0
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	008b      	lsls	r3, r1, #2
 8004cd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cda:	0082      	lsls	r2, r0, #2
 8004cdc:	4640      	mov	r0, r8
 8004cde:	4649      	mov	r1, r9
 8004ce0:	f7fb ff9c 	bl	8000c1c <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4b49      	ldr	r3, [pc, #292]	; (8004e10 <UART_SetConfig+0x38c>)
 8004cea:	fba3 2302 	umull	r2, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	011e      	lsls	r6, r3, #4
 8004cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	1894      	adds	r4, r2, r2
 8004d00:	60bc      	str	r4, [r7, #8]
 8004d02:	415b      	adcs	r3, r3
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d0a:	1812      	adds	r2, r2, r0
 8004d0c:	eb41 0303 	adc.w	r3, r1, r3
 8004d10:	f04f 0400 	mov.w	r4, #0
 8004d14:	f04f 0500 	mov.w	r5, #0
 8004d18:	00dd      	lsls	r5, r3, #3
 8004d1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d1e:	00d4      	lsls	r4, r2, #3
 8004d20:	4622      	mov	r2, r4
 8004d22:	462b      	mov	r3, r5
 8004d24:	1814      	adds	r4, r2, r0
 8004d26:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d28:	414b      	adcs	r3, r1
 8004d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	008b      	lsls	r3, r1, #2
 8004d40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d44:	0082      	lsls	r2, r0, #2
 8004d46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d4a:	f7fb ff67 	bl	8000c1c <__aeabi_uldivmod>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4b2f      	ldr	r3, [pc, #188]	; (8004e10 <UART_SetConfig+0x38c>)
 8004d54:	fba3 1302 	umull	r1, r3, r3, r2
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	2164      	movs	r1, #100	; 0x64
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	3332      	adds	r3, #50	; 0x32
 8004d66:	4a2a      	ldr	r2, [pc, #168]	; (8004e10 <UART_SetConfig+0x38c>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d72:	441e      	add	r6, r3
 8004d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d76:	4618      	mov	r0, r3
 8004d78:	f04f 0100 	mov.w	r1, #0
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	1894      	adds	r4, r2, r2
 8004d82:	603c      	str	r4, [r7, #0]
 8004d84:	415b      	adcs	r3, r3
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d8c:	1812      	adds	r2, r2, r0
 8004d8e:	eb41 0303 	adc.w	r3, r1, r3
 8004d92:	f04f 0400 	mov.w	r4, #0
 8004d96:	f04f 0500 	mov.w	r5, #0
 8004d9a:	00dd      	lsls	r5, r3, #3
 8004d9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004da0:	00d4      	lsls	r4, r2, #3
 8004da2:	4622      	mov	r2, r4
 8004da4:	462b      	mov	r3, r5
 8004da6:	eb12 0a00 	adds.w	sl, r2, r0
 8004daa:	eb43 0b01 	adc.w	fp, r3, r1
 8004dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f04f 0100 	mov.w	r1, #0
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	008b      	lsls	r3, r1, #2
 8004dc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dc6:	0082      	lsls	r2, r0, #2
 8004dc8:	4650      	mov	r0, sl
 8004dca:	4659      	mov	r1, fp
 8004dcc:	f7fb ff26 	bl	8000c1c <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <UART_SetConfig+0x38c>)
 8004dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2164      	movs	r1, #100	; 0x64
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	3332      	adds	r3, #50	; 0x32
 8004de8:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <UART_SetConfig+0x38c>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	f003 020f 	and.w	r2, r3, #15
 8004df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4432      	add	r2, r6
 8004dfa:	609a      	str	r2, [r3, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	377c      	adds	r7, #124	; 0x7c
 8004e00:	46bd      	mov	sp, r7
 8004e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e06:	bf00      	nop
 8004e08:	40011000 	.word	0x40011000
 8004e0c:	40011400 	.word	0x40011400
 8004e10:	51eb851f 	.word	0x51eb851f

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	; (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000028 	.word	0x20000028

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4d0d      	ldr	r5, [pc, #52]	; (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	; (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1b64      	subs	r4, r4, r5
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4d0b      	ldr	r5, [pc, #44]	; (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	; (8004e64 <__libc_init_array+0x44>)
 8004e34:	f001 fc86 	bl	8006744 <_init>
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	08006a18 	.word	0x08006a18
 8004e5c:	08006a18 	.word	0x08006a18
 8004e60:	08006a18 	.word	0x08006a18
 8004e64:	08006a1c 	.word	0x08006a1c

08004e68 <memset>:
 8004e68:	4402      	add	r2, r0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	f803 1b01 	strb.w	r1, [r3], #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <siprintf>:
 8004e78:	b40e      	push	{r1, r2, r3}
 8004e7a:	b500      	push	{lr}
 8004e7c:	b09c      	sub	sp, #112	; 0x70
 8004e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e80:	9002      	str	r0, [sp, #8]
 8004e82:	9006      	str	r0, [sp, #24]
 8004e84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e88:	4809      	ldr	r0, [pc, #36]	; (8004eb0 <siprintf+0x38>)
 8004e8a:	9107      	str	r1, [sp, #28]
 8004e8c:	9104      	str	r1, [sp, #16]
 8004e8e:	4909      	ldr	r1, [pc, #36]	; (8004eb4 <siprintf+0x3c>)
 8004e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e94:	9105      	str	r1, [sp, #20]
 8004e96:	6800      	ldr	r0, [r0, #0]
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	a902      	add	r1, sp, #8
 8004e9c:	f000 f868 	bl	8004f70 <_svfiprintf_r>
 8004ea0:	9b02      	ldr	r3, [sp, #8]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	b01c      	add	sp, #112	; 0x70
 8004ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eac:	b003      	add	sp, #12
 8004eae:	4770      	bx	lr
 8004eb0:	20000028 	.word	0x20000028
 8004eb4:	ffff0208 	.word	0xffff0208

08004eb8 <__ssputs_r>:
 8004eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ebc:	688e      	ldr	r6, [r1, #8]
 8004ebe:	429e      	cmp	r6, r3
 8004ec0:	4682      	mov	sl, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	4690      	mov	r8, r2
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	d838      	bhi.n	8004f3c <__ssputs_r+0x84>
 8004eca:	898a      	ldrh	r2, [r1, #12]
 8004ecc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ed0:	d032      	beq.n	8004f38 <__ssputs_r+0x80>
 8004ed2:	6825      	ldr	r5, [r4, #0]
 8004ed4:	6909      	ldr	r1, [r1, #16]
 8004ed6:	eba5 0901 	sub.w	r9, r5, r1
 8004eda:	6965      	ldr	r5, [r4, #20]
 8004edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ee0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	444b      	add	r3, r9
 8004ee8:	106d      	asrs	r5, r5, #1
 8004eea:	429d      	cmp	r5, r3
 8004eec:	bf38      	it	cc
 8004eee:	461d      	movcc	r5, r3
 8004ef0:	0553      	lsls	r3, r2, #21
 8004ef2:	d531      	bpl.n	8004f58 <__ssputs_r+0xa0>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	f000 fb47 	bl	8005588 <_malloc_r>
 8004efa:	4606      	mov	r6, r0
 8004efc:	b950      	cbnz	r0, 8004f14 <__ssputs_r+0x5c>
 8004efe:	230c      	movs	r3, #12
 8004f00:	f8ca 3000 	str.w	r3, [sl]
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f0a:	81a3      	strh	r3, [r4, #12]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	6921      	ldr	r1, [r4, #16]
 8004f16:	464a      	mov	r2, r9
 8004f18:	f000 fabe 	bl	8005498 <memcpy>
 8004f1c:	89a3      	ldrh	r3, [r4, #12]
 8004f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f26:	81a3      	strh	r3, [r4, #12]
 8004f28:	6126      	str	r6, [r4, #16]
 8004f2a:	6165      	str	r5, [r4, #20]
 8004f2c:	444e      	add	r6, r9
 8004f2e:	eba5 0509 	sub.w	r5, r5, r9
 8004f32:	6026      	str	r6, [r4, #0]
 8004f34:	60a5      	str	r5, [r4, #8]
 8004f36:	463e      	mov	r6, r7
 8004f38:	42be      	cmp	r6, r7
 8004f3a:	d900      	bls.n	8004f3e <__ssputs_r+0x86>
 8004f3c:	463e      	mov	r6, r7
 8004f3e:	4632      	mov	r2, r6
 8004f40:	6820      	ldr	r0, [r4, #0]
 8004f42:	4641      	mov	r1, r8
 8004f44:	f000 fab6 	bl	80054b4 <memmove>
 8004f48:	68a3      	ldr	r3, [r4, #8]
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	1b9b      	subs	r3, r3, r6
 8004f4e:	4432      	add	r2, r6
 8004f50:	60a3      	str	r3, [r4, #8]
 8004f52:	6022      	str	r2, [r4, #0]
 8004f54:	2000      	movs	r0, #0
 8004f56:	e7db      	b.n	8004f10 <__ssputs_r+0x58>
 8004f58:	462a      	mov	r2, r5
 8004f5a:	f000 fb6f 	bl	800563c <_realloc_r>
 8004f5e:	4606      	mov	r6, r0
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d1e1      	bne.n	8004f28 <__ssputs_r+0x70>
 8004f64:	6921      	ldr	r1, [r4, #16]
 8004f66:	4650      	mov	r0, sl
 8004f68:	f000 fabe 	bl	80054e8 <_free_r>
 8004f6c:	e7c7      	b.n	8004efe <__ssputs_r+0x46>
	...

08004f70 <_svfiprintf_r>:
 8004f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	4698      	mov	r8, r3
 8004f76:	898b      	ldrh	r3, [r1, #12]
 8004f78:	061b      	lsls	r3, r3, #24
 8004f7a:	b09d      	sub	sp, #116	; 0x74
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	460d      	mov	r5, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	d50e      	bpl.n	8004fa2 <_svfiprintf_r+0x32>
 8004f84:	690b      	ldr	r3, [r1, #16]
 8004f86:	b963      	cbnz	r3, 8004fa2 <_svfiprintf_r+0x32>
 8004f88:	2140      	movs	r1, #64	; 0x40
 8004f8a:	f000 fafd 	bl	8005588 <_malloc_r>
 8004f8e:	6028      	str	r0, [r5, #0]
 8004f90:	6128      	str	r0, [r5, #16]
 8004f92:	b920      	cbnz	r0, 8004f9e <_svfiprintf_r+0x2e>
 8004f94:	230c      	movs	r3, #12
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f9c:	e0d1      	b.n	8005142 <_svfiprintf_r+0x1d2>
 8004f9e:	2340      	movs	r3, #64	; 0x40
 8004fa0:	616b      	str	r3, [r5, #20]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa6:	2320      	movs	r3, #32
 8004fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fb0:	2330      	movs	r3, #48	; 0x30
 8004fb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800515c <_svfiprintf_r+0x1ec>
 8004fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fba:	f04f 0901 	mov.w	r9, #1
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	469a      	mov	sl, r3
 8004fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fc6:	b10a      	cbz	r2, 8004fcc <_svfiprintf_r+0x5c>
 8004fc8:	2a25      	cmp	r2, #37	; 0x25
 8004fca:	d1f9      	bne.n	8004fc0 <_svfiprintf_r+0x50>
 8004fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd0:	d00b      	beq.n	8004fea <_svfiprintf_r+0x7a>
 8004fd2:	465b      	mov	r3, fp
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f7ff ff6d 	bl	8004eb8 <__ssputs_r>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	f000 80aa 	beq.w	8005138 <_svfiprintf_r+0x1c8>
 8004fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fe6:	445a      	add	r2, fp
 8004fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8004fea:	f89a 3000 	ldrb.w	r3, [sl]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80a2 	beq.w	8005138 <_svfiprintf_r+0x1c8>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ffe:	f10a 0a01 	add.w	sl, sl, #1
 8005002:	9304      	str	r3, [sp, #16]
 8005004:	9307      	str	r3, [sp, #28]
 8005006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800500a:	931a      	str	r3, [sp, #104]	; 0x68
 800500c:	4654      	mov	r4, sl
 800500e:	2205      	movs	r2, #5
 8005010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005014:	4851      	ldr	r0, [pc, #324]	; (800515c <_svfiprintf_r+0x1ec>)
 8005016:	f7fb f8e3 	bl	80001e0 <memchr>
 800501a:	9a04      	ldr	r2, [sp, #16]
 800501c:	b9d8      	cbnz	r0, 8005056 <_svfiprintf_r+0xe6>
 800501e:	06d0      	lsls	r0, r2, #27
 8005020:	bf44      	itt	mi
 8005022:	2320      	movmi	r3, #32
 8005024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005028:	0711      	lsls	r1, r2, #28
 800502a:	bf44      	itt	mi
 800502c:	232b      	movmi	r3, #43	; 0x2b
 800502e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005032:	f89a 3000 	ldrb.w	r3, [sl]
 8005036:	2b2a      	cmp	r3, #42	; 0x2a
 8005038:	d015      	beq.n	8005066 <_svfiprintf_r+0xf6>
 800503a:	9a07      	ldr	r2, [sp, #28]
 800503c:	4654      	mov	r4, sl
 800503e:	2000      	movs	r0, #0
 8005040:	f04f 0c0a 	mov.w	ip, #10
 8005044:	4621      	mov	r1, r4
 8005046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800504a:	3b30      	subs	r3, #48	; 0x30
 800504c:	2b09      	cmp	r3, #9
 800504e:	d94e      	bls.n	80050ee <_svfiprintf_r+0x17e>
 8005050:	b1b0      	cbz	r0, 8005080 <_svfiprintf_r+0x110>
 8005052:	9207      	str	r2, [sp, #28]
 8005054:	e014      	b.n	8005080 <_svfiprintf_r+0x110>
 8005056:	eba0 0308 	sub.w	r3, r0, r8
 800505a:	fa09 f303 	lsl.w	r3, r9, r3
 800505e:	4313      	orrs	r3, r2
 8005060:	9304      	str	r3, [sp, #16]
 8005062:	46a2      	mov	sl, r4
 8005064:	e7d2      	b.n	800500c <_svfiprintf_r+0x9c>
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	1d19      	adds	r1, r3, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	9103      	str	r1, [sp, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	bfbb      	ittet	lt
 8005072:	425b      	neglt	r3, r3
 8005074:	f042 0202 	orrlt.w	r2, r2, #2
 8005078:	9307      	strge	r3, [sp, #28]
 800507a:	9307      	strlt	r3, [sp, #28]
 800507c:	bfb8      	it	lt
 800507e:	9204      	strlt	r2, [sp, #16]
 8005080:	7823      	ldrb	r3, [r4, #0]
 8005082:	2b2e      	cmp	r3, #46	; 0x2e
 8005084:	d10c      	bne.n	80050a0 <_svfiprintf_r+0x130>
 8005086:	7863      	ldrb	r3, [r4, #1]
 8005088:	2b2a      	cmp	r3, #42	; 0x2a
 800508a:	d135      	bne.n	80050f8 <_svfiprintf_r+0x188>
 800508c:	9b03      	ldr	r3, [sp, #12]
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	9203      	str	r2, [sp, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	bfb8      	it	lt
 8005098:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800509c:	3402      	adds	r4, #2
 800509e:	9305      	str	r3, [sp, #20]
 80050a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800516c <_svfiprintf_r+0x1fc>
 80050a4:	7821      	ldrb	r1, [r4, #0]
 80050a6:	2203      	movs	r2, #3
 80050a8:	4650      	mov	r0, sl
 80050aa:	f7fb f899 	bl	80001e0 <memchr>
 80050ae:	b140      	cbz	r0, 80050c2 <_svfiprintf_r+0x152>
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	eba0 000a 	sub.w	r0, r0, sl
 80050b6:	fa03 f000 	lsl.w	r0, r3, r0
 80050ba:	9b04      	ldr	r3, [sp, #16]
 80050bc:	4303      	orrs	r3, r0
 80050be:	3401      	adds	r4, #1
 80050c0:	9304      	str	r3, [sp, #16]
 80050c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c6:	4826      	ldr	r0, [pc, #152]	; (8005160 <_svfiprintf_r+0x1f0>)
 80050c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050cc:	2206      	movs	r2, #6
 80050ce:	f7fb f887 	bl	80001e0 <memchr>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d038      	beq.n	8005148 <_svfiprintf_r+0x1d8>
 80050d6:	4b23      	ldr	r3, [pc, #140]	; (8005164 <_svfiprintf_r+0x1f4>)
 80050d8:	bb1b      	cbnz	r3, 8005122 <_svfiprintf_r+0x1b2>
 80050da:	9b03      	ldr	r3, [sp, #12]
 80050dc:	3307      	adds	r3, #7
 80050de:	f023 0307 	bic.w	r3, r3, #7
 80050e2:	3308      	adds	r3, #8
 80050e4:	9303      	str	r3, [sp, #12]
 80050e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e8:	4433      	add	r3, r6
 80050ea:	9309      	str	r3, [sp, #36]	; 0x24
 80050ec:	e767      	b.n	8004fbe <_svfiprintf_r+0x4e>
 80050ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80050f2:	460c      	mov	r4, r1
 80050f4:	2001      	movs	r0, #1
 80050f6:	e7a5      	b.n	8005044 <_svfiprintf_r+0xd4>
 80050f8:	2300      	movs	r3, #0
 80050fa:	3401      	adds	r4, #1
 80050fc:	9305      	str	r3, [sp, #20]
 80050fe:	4619      	mov	r1, r3
 8005100:	f04f 0c0a 	mov.w	ip, #10
 8005104:	4620      	mov	r0, r4
 8005106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800510a:	3a30      	subs	r2, #48	; 0x30
 800510c:	2a09      	cmp	r2, #9
 800510e:	d903      	bls.n	8005118 <_svfiprintf_r+0x1a8>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0c5      	beq.n	80050a0 <_svfiprintf_r+0x130>
 8005114:	9105      	str	r1, [sp, #20]
 8005116:	e7c3      	b.n	80050a0 <_svfiprintf_r+0x130>
 8005118:	fb0c 2101 	mla	r1, ip, r1, r2
 800511c:	4604      	mov	r4, r0
 800511e:	2301      	movs	r3, #1
 8005120:	e7f0      	b.n	8005104 <_svfiprintf_r+0x194>
 8005122:	ab03      	add	r3, sp, #12
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	462a      	mov	r2, r5
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <_svfiprintf_r+0x1f8>)
 800512a:	a904      	add	r1, sp, #16
 800512c:	4638      	mov	r0, r7
 800512e:	f3af 8000 	nop.w
 8005132:	1c42      	adds	r2, r0, #1
 8005134:	4606      	mov	r6, r0
 8005136:	d1d6      	bne.n	80050e6 <_svfiprintf_r+0x176>
 8005138:	89ab      	ldrh	r3, [r5, #12]
 800513a:	065b      	lsls	r3, r3, #25
 800513c:	f53f af2c 	bmi.w	8004f98 <_svfiprintf_r+0x28>
 8005140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005142:	b01d      	add	sp, #116	; 0x74
 8005144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005148:	ab03      	add	r3, sp, #12
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	462a      	mov	r2, r5
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <_svfiprintf_r+0x1f8>)
 8005150:	a904      	add	r1, sp, #16
 8005152:	4638      	mov	r0, r7
 8005154:	f000 f87a 	bl	800524c <_printf_i>
 8005158:	e7eb      	b.n	8005132 <_svfiprintf_r+0x1c2>
 800515a:	bf00      	nop
 800515c:	08006800 	.word	0x08006800
 8005160:	0800680a 	.word	0x0800680a
 8005164:	00000000 	.word	0x00000000
 8005168:	08004eb9 	.word	0x08004eb9
 800516c:	08006806 	.word	0x08006806

08005170 <_printf_common>:
 8005170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005174:	4616      	mov	r6, r2
 8005176:	4699      	mov	r9, r3
 8005178:	688a      	ldr	r2, [r1, #8]
 800517a:	690b      	ldr	r3, [r1, #16]
 800517c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005180:	4293      	cmp	r3, r2
 8005182:	bfb8      	it	lt
 8005184:	4613      	movlt	r3, r2
 8005186:	6033      	str	r3, [r6, #0]
 8005188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800518c:	4607      	mov	r7, r0
 800518e:	460c      	mov	r4, r1
 8005190:	b10a      	cbz	r2, 8005196 <_printf_common+0x26>
 8005192:	3301      	adds	r3, #1
 8005194:	6033      	str	r3, [r6, #0]
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	0699      	lsls	r1, r3, #26
 800519a:	bf42      	ittt	mi
 800519c:	6833      	ldrmi	r3, [r6, #0]
 800519e:	3302      	addmi	r3, #2
 80051a0:	6033      	strmi	r3, [r6, #0]
 80051a2:	6825      	ldr	r5, [r4, #0]
 80051a4:	f015 0506 	ands.w	r5, r5, #6
 80051a8:	d106      	bne.n	80051b8 <_printf_common+0x48>
 80051aa:	f104 0a19 	add.w	sl, r4, #25
 80051ae:	68e3      	ldr	r3, [r4, #12]
 80051b0:	6832      	ldr	r2, [r6, #0]
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	42ab      	cmp	r3, r5
 80051b6:	dc26      	bgt.n	8005206 <_printf_common+0x96>
 80051b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051bc:	1e13      	subs	r3, r2, #0
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	bf18      	it	ne
 80051c2:	2301      	movne	r3, #1
 80051c4:	0692      	lsls	r2, r2, #26
 80051c6:	d42b      	bmi.n	8005220 <_printf_common+0xb0>
 80051c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051cc:	4649      	mov	r1, r9
 80051ce:	4638      	mov	r0, r7
 80051d0:	47c0      	blx	r8
 80051d2:	3001      	adds	r0, #1
 80051d4:	d01e      	beq.n	8005214 <_printf_common+0xa4>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	68e5      	ldr	r5, [r4, #12]
 80051da:	6832      	ldr	r2, [r6, #0]
 80051dc:	f003 0306 	and.w	r3, r3, #6
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	bf08      	it	eq
 80051e4:	1aad      	subeq	r5, r5, r2
 80051e6:	68a3      	ldr	r3, [r4, #8]
 80051e8:	6922      	ldr	r2, [r4, #16]
 80051ea:	bf0c      	ite	eq
 80051ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f0:	2500      	movne	r5, #0
 80051f2:	4293      	cmp	r3, r2
 80051f4:	bfc4      	itt	gt
 80051f6:	1a9b      	subgt	r3, r3, r2
 80051f8:	18ed      	addgt	r5, r5, r3
 80051fa:	2600      	movs	r6, #0
 80051fc:	341a      	adds	r4, #26
 80051fe:	42b5      	cmp	r5, r6
 8005200:	d11a      	bne.n	8005238 <_printf_common+0xc8>
 8005202:	2000      	movs	r0, #0
 8005204:	e008      	b.n	8005218 <_printf_common+0xa8>
 8005206:	2301      	movs	r3, #1
 8005208:	4652      	mov	r2, sl
 800520a:	4649      	mov	r1, r9
 800520c:	4638      	mov	r0, r7
 800520e:	47c0      	blx	r8
 8005210:	3001      	adds	r0, #1
 8005212:	d103      	bne.n	800521c <_printf_common+0xac>
 8005214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521c:	3501      	adds	r5, #1
 800521e:	e7c6      	b.n	80051ae <_printf_common+0x3e>
 8005220:	18e1      	adds	r1, r4, r3
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	2030      	movs	r0, #48	; 0x30
 8005226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800522a:	4422      	add	r2, r4
 800522c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005234:	3302      	adds	r3, #2
 8005236:	e7c7      	b.n	80051c8 <_printf_common+0x58>
 8005238:	2301      	movs	r3, #1
 800523a:	4622      	mov	r2, r4
 800523c:	4649      	mov	r1, r9
 800523e:	4638      	mov	r0, r7
 8005240:	47c0      	blx	r8
 8005242:	3001      	adds	r0, #1
 8005244:	d0e6      	beq.n	8005214 <_printf_common+0xa4>
 8005246:	3601      	adds	r6, #1
 8005248:	e7d9      	b.n	80051fe <_printf_common+0x8e>
	...

0800524c <_printf_i>:
 800524c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005250:	460c      	mov	r4, r1
 8005252:	4691      	mov	r9, r2
 8005254:	7e27      	ldrb	r7, [r4, #24]
 8005256:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005258:	2f78      	cmp	r7, #120	; 0x78
 800525a:	4680      	mov	r8, r0
 800525c:	469a      	mov	sl, r3
 800525e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005262:	d807      	bhi.n	8005274 <_printf_i+0x28>
 8005264:	2f62      	cmp	r7, #98	; 0x62
 8005266:	d80a      	bhi.n	800527e <_printf_i+0x32>
 8005268:	2f00      	cmp	r7, #0
 800526a:	f000 80d8 	beq.w	800541e <_printf_i+0x1d2>
 800526e:	2f58      	cmp	r7, #88	; 0x58
 8005270:	f000 80a3 	beq.w	80053ba <_printf_i+0x16e>
 8005274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800527c:	e03a      	b.n	80052f4 <_printf_i+0xa8>
 800527e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005282:	2b15      	cmp	r3, #21
 8005284:	d8f6      	bhi.n	8005274 <_printf_i+0x28>
 8005286:	a001      	add	r0, pc, #4	; (adr r0, 800528c <_printf_i+0x40>)
 8005288:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800528c:	080052e5 	.word	0x080052e5
 8005290:	080052f9 	.word	0x080052f9
 8005294:	08005275 	.word	0x08005275
 8005298:	08005275 	.word	0x08005275
 800529c:	08005275 	.word	0x08005275
 80052a0:	08005275 	.word	0x08005275
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	08005275 	.word	0x08005275
 80052ac:	08005275 	.word	0x08005275
 80052b0:	08005275 	.word	0x08005275
 80052b4:	08005275 	.word	0x08005275
 80052b8:	08005405 	.word	0x08005405
 80052bc:	08005329 	.word	0x08005329
 80052c0:	080053e7 	.word	0x080053e7
 80052c4:	08005275 	.word	0x08005275
 80052c8:	08005275 	.word	0x08005275
 80052cc:	08005427 	.word	0x08005427
 80052d0:	08005275 	.word	0x08005275
 80052d4:	08005329 	.word	0x08005329
 80052d8:	08005275 	.word	0x08005275
 80052dc:	08005275 	.word	0x08005275
 80052e0:	080053ef 	.word	0x080053ef
 80052e4:	680b      	ldr	r3, [r1, #0]
 80052e6:	1d1a      	adds	r2, r3, #4
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	600a      	str	r2, [r1, #0]
 80052ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0a3      	b.n	8005440 <_printf_i+0x1f4>
 80052f8:	6825      	ldr	r5, [r4, #0]
 80052fa:	6808      	ldr	r0, [r1, #0]
 80052fc:	062e      	lsls	r6, r5, #24
 80052fe:	f100 0304 	add.w	r3, r0, #4
 8005302:	d50a      	bpl.n	800531a <_printf_i+0xce>
 8005304:	6805      	ldr	r5, [r0, #0]
 8005306:	600b      	str	r3, [r1, #0]
 8005308:	2d00      	cmp	r5, #0
 800530a:	da03      	bge.n	8005314 <_printf_i+0xc8>
 800530c:	232d      	movs	r3, #45	; 0x2d
 800530e:	426d      	negs	r5, r5
 8005310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005314:	485e      	ldr	r0, [pc, #376]	; (8005490 <_printf_i+0x244>)
 8005316:	230a      	movs	r3, #10
 8005318:	e019      	b.n	800534e <_printf_i+0x102>
 800531a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800531e:	6805      	ldr	r5, [r0, #0]
 8005320:	600b      	str	r3, [r1, #0]
 8005322:	bf18      	it	ne
 8005324:	b22d      	sxthne	r5, r5
 8005326:	e7ef      	b.n	8005308 <_printf_i+0xbc>
 8005328:	680b      	ldr	r3, [r1, #0]
 800532a:	6825      	ldr	r5, [r4, #0]
 800532c:	1d18      	adds	r0, r3, #4
 800532e:	6008      	str	r0, [r1, #0]
 8005330:	0628      	lsls	r0, r5, #24
 8005332:	d501      	bpl.n	8005338 <_printf_i+0xec>
 8005334:	681d      	ldr	r5, [r3, #0]
 8005336:	e002      	b.n	800533e <_printf_i+0xf2>
 8005338:	0669      	lsls	r1, r5, #25
 800533a:	d5fb      	bpl.n	8005334 <_printf_i+0xe8>
 800533c:	881d      	ldrh	r5, [r3, #0]
 800533e:	4854      	ldr	r0, [pc, #336]	; (8005490 <_printf_i+0x244>)
 8005340:	2f6f      	cmp	r7, #111	; 0x6f
 8005342:	bf0c      	ite	eq
 8005344:	2308      	moveq	r3, #8
 8005346:	230a      	movne	r3, #10
 8005348:	2100      	movs	r1, #0
 800534a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800534e:	6866      	ldr	r6, [r4, #4]
 8005350:	60a6      	str	r6, [r4, #8]
 8005352:	2e00      	cmp	r6, #0
 8005354:	bfa2      	ittt	ge
 8005356:	6821      	ldrge	r1, [r4, #0]
 8005358:	f021 0104 	bicge.w	r1, r1, #4
 800535c:	6021      	strge	r1, [r4, #0]
 800535e:	b90d      	cbnz	r5, 8005364 <_printf_i+0x118>
 8005360:	2e00      	cmp	r6, #0
 8005362:	d04d      	beq.n	8005400 <_printf_i+0x1b4>
 8005364:	4616      	mov	r6, r2
 8005366:	fbb5 f1f3 	udiv	r1, r5, r3
 800536a:	fb03 5711 	mls	r7, r3, r1, r5
 800536e:	5dc7      	ldrb	r7, [r0, r7]
 8005370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005374:	462f      	mov	r7, r5
 8005376:	42bb      	cmp	r3, r7
 8005378:	460d      	mov	r5, r1
 800537a:	d9f4      	bls.n	8005366 <_printf_i+0x11a>
 800537c:	2b08      	cmp	r3, #8
 800537e:	d10b      	bne.n	8005398 <_printf_i+0x14c>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	07df      	lsls	r7, r3, #31
 8005384:	d508      	bpl.n	8005398 <_printf_i+0x14c>
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	6861      	ldr	r1, [r4, #4]
 800538a:	4299      	cmp	r1, r3
 800538c:	bfde      	ittt	le
 800538e:	2330      	movle	r3, #48	; 0x30
 8005390:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005394:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005398:	1b92      	subs	r2, r2, r6
 800539a:	6122      	str	r2, [r4, #16]
 800539c:	f8cd a000 	str.w	sl, [sp]
 80053a0:	464b      	mov	r3, r9
 80053a2:	aa03      	add	r2, sp, #12
 80053a4:	4621      	mov	r1, r4
 80053a6:	4640      	mov	r0, r8
 80053a8:	f7ff fee2 	bl	8005170 <_printf_common>
 80053ac:	3001      	adds	r0, #1
 80053ae:	d14c      	bne.n	800544a <_printf_i+0x1fe>
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b4:	b004      	add	sp, #16
 80053b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ba:	4835      	ldr	r0, [pc, #212]	; (8005490 <_printf_i+0x244>)
 80053bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	680e      	ldr	r6, [r1, #0]
 80053c4:	061f      	lsls	r7, r3, #24
 80053c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80053ca:	600e      	str	r6, [r1, #0]
 80053cc:	d514      	bpl.n	80053f8 <_printf_i+0x1ac>
 80053ce:	07d9      	lsls	r1, r3, #31
 80053d0:	bf44      	itt	mi
 80053d2:	f043 0320 	orrmi.w	r3, r3, #32
 80053d6:	6023      	strmi	r3, [r4, #0]
 80053d8:	b91d      	cbnz	r5, 80053e2 <_printf_i+0x196>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	f023 0320 	bic.w	r3, r3, #32
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	2310      	movs	r3, #16
 80053e4:	e7b0      	b.n	8005348 <_printf_i+0xfc>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	f043 0320 	orr.w	r3, r3, #32
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	2378      	movs	r3, #120	; 0x78
 80053f0:	4828      	ldr	r0, [pc, #160]	; (8005494 <_printf_i+0x248>)
 80053f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053f6:	e7e3      	b.n	80053c0 <_printf_i+0x174>
 80053f8:	065e      	lsls	r6, r3, #25
 80053fa:	bf48      	it	mi
 80053fc:	b2ad      	uxthmi	r5, r5
 80053fe:	e7e6      	b.n	80053ce <_printf_i+0x182>
 8005400:	4616      	mov	r6, r2
 8005402:	e7bb      	b.n	800537c <_printf_i+0x130>
 8005404:	680b      	ldr	r3, [r1, #0]
 8005406:	6826      	ldr	r6, [r4, #0]
 8005408:	6960      	ldr	r0, [r4, #20]
 800540a:	1d1d      	adds	r5, r3, #4
 800540c:	600d      	str	r5, [r1, #0]
 800540e:	0635      	lsls	r5, r6, #24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	d501      	bpl.n	8005418 <_printf_i+0x1cc>
 8005414:	6018      	str	r0, [r3, #0]
 8005416:	e002      	b.n	800541e <_printf_i+0x1d2>
 8005418:	0671      	lsls	r1, r6, #25
 800541a:	d5fb      	bpl.n	8005414 <_printf_i+0x1c8>
 800541c:	8018      	strh	r0, [r3, #0]
 800541e:	2300      	movs	r3, #0
 8005420:	6123      	str	r3, [r4, #16]
 8005422:	4616      	mov	r6, r2
 8005424:	e7ba      	b.n	800539c <_printf_i+0x150>
 8005426:	680b      	ldr	r3, [r1, #0]
 8005428:	1d1a      	adds	r2, r3, #4
 800542a:	600a      	str	r2, [r1, #0]
 800542c:	681e      	ldr	r6, [r3, #0]
 800542e:	6862      	ldr	r2, [r4, #4]
 8005430:	2100      	movs	r1, #0
 8005432:	4630      	mov	r0, r6
 8005434:	f7fa fed4 	bl	80001e0 <memchr>
 8005438:	b108      	cbz	r0, 800543e <_printf_i+0x1f2>
 800543a:	1b80      	subs	r0, r0, r6
 800543c:	6060      	str	r0, [r4, #4]
 800543e:	6863      	ldr	r3, [r4, #4]
 8005440:	6123      	str	r3, [r4, #16]
 8005442:	2300      	movs	r3, #0
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005448:	e7a8      	b.n	800539c <_printf_i+0x150>
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	4632      	mov	r2, r6
 800544e:	4649      	mov	r1, r9
 8005450:	4640      	mov	r0, r8
 8005452:	47d0      	blx	sl
 8005454:	3001      	adds	r0, #1
 8005456:	d0ab      	beq.n	80053b0 <_printf_i+0x164>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	079b      	lsls	r3, r3, #30
 800545c:	d413      	bmi.n	8005486 <_printf_i+0x23a>
 800545e:	68e0      	ldr	r0, [r4, #12]
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	4298      	cmp	r0, r3
 8005464:	bfb8      	it	lt
 8005466:	4618      	movlt	r0, r3
 8005468:	e7a4      	b.n	80053b4 <_printf_i+0x168>
 800546a:	2301      	movs	r3, #1
 800546c:	4632      	mov	r2, r6
 800546e:	4649      	mov	r1, r9
 8005470:	4640      	mov	r0, r8
 8005472:	47d0      	blx	sl
 8005474:	3001      	adds	r0, #1
 8005476:	d09b      	beq.n	80053b0 <_printf_i+0x164>
 8005478:	3501      	adds	r5, #1
 800547a:	68e3      	ldr	r3, [r4, #12]
 800547c:	9903      	ldr	r1, [sp, #12]
 800547e:	1a5b      	subs	r3, r3, r1
 8005480:	42ab      	cmp	r3, r5
 8005482:	dcf2      	bgt.n	800546a <_printf_i+0x21e>
 8005484:	e7eb      	b.n	800545e <_printf_i+0x212>
 8005486:	2500      	movs	r5, #0
 8005488:	f104 0619 	add.w	r6, r4, #25
 800548c:	e7f5      	b.n	800547a <_printf_i+0x22e>
 800548e:	bf00      	nop
 8005490:	08006811 	.word	0x08006811
 8005494:	08006822 	.word	0x08006822

08005498 <memcpy>:
 8005498:	440a      	add	r2, r1
 800549a:	4291      	cmp	r1, r2
 800549c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054a0:	d100      	bne.n	80054a4 <memcpy+0xc>
 80054a2:	4770      	bx	lr
 80054a4:	b510      	push	{r4, lr}
 80054a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ae:	4291      	cmp	r1, r2
 80054b0:	d1f9      	bne.n	80054a6 <memcpy+0xe>
 80054b2:	bd10      	pop	{r4, pc}

080054b4 <memmove>:
 80054b4:	4288      	cmp	r0, r1
 80054b6:	b510      	push	{r4, lr}
 80054b8:	eb01 0402 	add.w	r4, r1, r2
 80054bc:	d902      	bls.n	80054c4 <memmove+0x10>
 80054be:	4284      	cmp	r4, r0
 80054c0:	4623      	mov	r3, r4
 80054c2:	d807      	bhi.n	80054d4 <memmove+0x20>
 80054c4:	1e43      	subs	r3, r0, #1
 80054c6:	42a1      	cmp	r1, r4
 80054c8:	d008      	beq.n	80054dc <memmove+0x28>
 80054ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054d2:	e7f8      	b.n	80054c6 <memmove+0x12>
 80054d4:	4402      	add	r2, r0
 80054d6:	4601      	mov	r1, r0
 80054d8:	428a      	cmp	r2, r1
 80054da:	d100      	bne.n	80054de <memmove+0x2a>
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80054e6:	e7f7      	b.n	80054d8 <memmove+0x24>

080054e8 <_free_r>:
 80054e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ea:	2900      	cmp	r1, #0
 80054ec:	d048      	beq.n	8005580 <_free_r+0x98>
 80054ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f2:	9001      	str	r0, [sp, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f1a1 0404 	sub.w	r4, r1, #4
 80054fa:	bfb8      	it	lt
 80054fc:	18e4      	addlt	r4, r4, r3
 80054fe:	f000 f8d3 	bl	80056a8 <__malloc_lock>
 8005502:	4a20      	ldr	r2, [pc, #128]	; (8005584 <_free_r+0x9c>)
 8005504:	9801      	ldr	r0, [sp, #4]
 8005506:	6813      	ldr	r3, [r2, #0]
 8005508:	4615      	mov	r5, r2
 800550a:	b933      	cbnz	r3, 800551a <_free_r+0x32>
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	6014      	str	r4, [r2, #0]
 8005510:	b003      	add	sp, #12
 8005512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005516:	f000 b8cd 	b.w	80056b4 <__malloc_unlock>
 800551a:	42a3      	cmp	r3, r4
 800551c:	d90b      	bls.n	8005536 <_free_r+0x4e>
 800551e:	6821      	ldr	r1, [r4, #0]
 8005520:	1862      	adds	r2, r4, r1
 8005522:	4293      	cmp	r3, r2
 8005524:	bf04      	itt	eq
 8005526:	681a      	ldreq	r2, [r3, #0]
 8005528:	685b      	ldreq	r3, [r3, #4]
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	bf04      	itt	eq
 800552e:	1852      	addeq	r2, r2, r1
 8005530:	6022      	streq	r2, [r4, #0]
 8005532:	602c      	str	r4, [r5, #0]
 8005534:	e7ec      	b.n	8005510 <_free_r+0x28>
 8005536:	461a      	mov	r2, r3
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	b10b      	cbz	r3, 8005540 <_free_r+0x58>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d9fa      	bls.n	8005536 <_free_r+0x4e>
 8005540:	6811      	ldr	r1, [r2, #0]
 8005542:	1855      	adds	r5, r2, r1
 8005544:	42a5      	cmp	r5, r4
 8005546:	d10b      	bne.n	8005560 <_free_r+0x78>
 8005548:	6824      	ldr	r4, [r4, #0]
 800554a:	4421      	add	r1, r4
 800554c:	1854      	adds	r4, r2, r1
 800554e:	42a3      	cmp	r3, r4
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	d1dd      	bne.n	8005510 <_free_r+0x28>
 8005554:	681c      	ldr	r4, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	6053      	str	r3, [r2, #4]
 800555a:	4421      	add	r1, r4
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	e7d7      	b.n	8005510 <_free_r+0x28>
 8005560:	d902      	bls.n	8005568 <_free_r+0x80>
 8005562:	230c      	movs	r3, #12
 8005564:	6003      	str	r3, [r0, #0]
 8005566:	e7d3      	b.n	8005510 <_free_r+0x28>
 8005568:	6825      	ldr	r5, [r4, #0]
 800556a:	1961      	adds	r1, r4, r5
 800556c:	428b      	cmp	r3, r1
 800556e:	bf04      	itt	eq
 8005570:	6819      	ldreq	r1, [r3, #0]
 8005572:	685b      	ldreq	r3, [r3, #4]
 8005574:	6063      	str	r3, [r4, #4]
 8005576:	bf04      	itt	eq
 8005578:	1949      	addeq	r1, r1, r5
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	6054      	str	r4, [r2, #4]
 800557e:	e7c7      	b.n	8005510 <_free_r+0x28>
 8005580:	b003      	add	sp, #12
 8005582:	bd30      	pop	{r4, r5, pc}
 8005584:	200000b4 	.word	0x200000b4

08005588 <_malloc_r>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	1ccd      	adds	r5, r1, #3
 800558c:	f025 0503 	bic.w	r5, r5, #3
 8005590:	3508      	adds	r5, #8
 8005592:	2d0c      	cmp	r5, #12
 8005594:	bf38      	it	cc
 8005596:	250c      	movcc	r5, #12
 8005598:	2d00      	cmp	r5, #0
 800559a:	4606      	mov	r6, r0
 800559c:	db01      	blt.n	80055a2 <_malloc_r+0x1a>
 800559e:	42a9      	cmp	r1, r5
 80055a0:	d903      	bls.n	80055aa <_malloc_r+0x22>
 80055a2:	230c      	movs	r3, #12
 80055a4:	6033      	str	r3, [r6, #0]
 80055a6:	2000      	movs	r0, #0
 80055a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055aa:	f000 f87d 	bl	80056a8 <__malloc_lock>
 80055ae:	4921      	ldr	r1, [pc, #132]	; (8005634 <_malloc_r+0xac>)
 80055b0:	680a      	ldr	r2, [r1, #0]
 80055b2:	4614      	mov	r4, r2
 80055b4:	b99c      	cbnz	r4, 80055de <_malloc_r+0x56>
 80055b6:	4f20      	ldr	r7, [pc, #128]	; (8005638 <_malloc_r+0xb0>)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	b923      	cbnz	r3, 80055c6 <_malloc_r+0x3e>
 80055bc:	4621      	mov	r1, r4
 80055be:	4630      	mov	r0, r6
 80055c0:	f000 f862 	bl	8005688 <_sbrk_r>
 80055c4:	6038      	str	r0, [r7, #0]
 80055c6:	4629      	mov	r1, r5
 80055c8:	4630      	mov	r0, r6
 80055ca:	f000 f85d 	bl	8005688 <_sbrk_r>
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	d123      	bne.n	800561a <_malloc_r+0x92>
 80055d2:	230c      	movs	r3, #12
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 f86c 	bl	80056b4 <__malloc_unlock>
 80055dc:	e7e3      	b.n	80055a6 <_malloc_r+0x1e>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	1b5b      	subs	r3, r3, r5
 80055e2:	d417      	bmi.n	8005614 <_malloc_r+0x8c>
 80055e4:	2b0b      	cmp	r3, #11
 80055e6:	d903      	bls.n	80055f0 <_malloc_r+0x68>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	441c      	add	r4, r3
 80055ec:	6025      	str	r5, [r4, #0]
 80055ee:	e004      	b.n	80055fa <_malloc_r+0x72>
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	42a2      	cmp	r2, r4
 80055f4:	bf0c      	ite	eq
 80055f6:	600b      	streq	r3, [r1, #0]
 80055f8:	6053      	strne	r3, [r2, #4]
 80055fa:	4630      	mov	r0, r6
 80055fc:	f000 f85a 	bl	80056b4 <__malloc_unlock>
 8005600:	f104 000b 	add.w	r0, r4, #11
 8005604:	1d23      	adds	r3, r4, #4
 8005606:	f020 0007 	bic.w	r0, r0, #7
 800560a:	1ac2      	subs	r2, r0, r3
 800560c:	d0cc      	beq.n	80055a8 <_malloc_r+0x20>
 800560e:	1a1b      	subs	r3, r3, r0
 8005610:	50a3      	str	r3, [r4, r2]
 8005612:	e7c9      	b.n	80055a8 <_malloc_r+0x20>
 8005614:	4622      	mov	r2, r4
 8005616:	6864      	ldr	r4, [r4, #4]
 8005618:	e7cc      	b.n	80055b4 <_malloc_r+0x2c>
 800561a:	1cc4      	adds	r4, r0, #3
 800561c:	f024 0403 	bic.w	r4, r4, #3
 8005620:	42a0      	cmp	r0, r4
 8005622:	d0e3      	beq.n	80055ec <_malloc_r+0x64>
 8005624:	1a21      	subs	r1, r4, r0
 8005626:	4630      	mov	r0, r6
 8005628:	f000 f82e 	bl	8005688 <_sbrk_r>
 800562c:	3001      	adds	r0, #1
 800562e:	d1dd      	bne.n	80055ec <_malloc_r+0x64>
 8005630:	e7cf      	b.n	80055d2 <_malloc_r+0x4a>
 8005632:	bf00      	nop
 8005634:	200000b4 	.word	0x200000b4
 8005638:	200000b8 	.word	0x200000b8

0800563c <_realloc_r>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	4607      	mov	r7, r0
 8005640:	4614      	mov	r4, r2
 8005642:	460e      	mov	r6, r1
 8005644:	b921      	cbnz	r1, 8005650 <_realloc_r+0x14>
 8005646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800564a:	4611      	mov	r1, r2
 800564c:	f7ff bf9c 	b.w	8005588 <_malloc_r>
 8005650:	b922      	cbnz	r2, 800565c <_realloc_r+0x20>
 8005652:	f7ff ff49 	bl	80054e8 <_free_r>
 8005656:	4625      	mov	r5, r4
 8005658:	4628      	mov	r0, r5
 800565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800565c:	f000 f830 	bl	80056c0 <_malloc_usable_size_r>
 8005660:	42a0      	cmp	r0, r4
 8005662:	d20f      	bcs.n	8005684 <_realloc_r+0x48>
 8005664:	4621      	mov	r1, r4
 8005666:	4638      	mov	r0, r7
 8005668:	f7ff ff8e 	bl	8005588 <_malloc_r>
 800566c:	4605      	mov	r5, r0
 800566e:	2800      	cmp	r0, #0
 8005670:	d0f2      	beq.n	8005658 <_realloc_r+0x1c>
 8005672:	4631      	mov	r1, r6
 8005674:	4622      	mov	r2, r4
 8005676:	f7ff ff0f 	bl	8005498 <memcpy>
 800567a:	4631      	mov	r1, r6
 800567c:	4638      	mov	r0, r7
 800567e:	f7ff ff33 	bl	80054e8 <_free_r>
 8005682:	e7e9      	b.n	8005658 <_realloc_r+0x1c>
 8005684:	4635      	mov	r5, r6
 8005686:	e7e7      	b.n	8005658 <_realloc_r+0x1c>

08005688 <_sbrk_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4d06      	ldr	r5, [pc, #24]	; (80056a4 <_sbrk_r+0x1c>)
 800568c:	2300      	movs	r3, #0
 800568e:	4604      	mov	r4, r0
 8005690:	4608      	mov	r0, r1
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	f7fd fc94 	bl	8002fc0 <_sbrk>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d102      	bne.n	80056a2 <_sbrk_r+0x1a>
 800569c:	682b      	ldr	r3, [r5, #0]
 800569e:	b103      	cbz	r3, 80056a2 <_sbrk_r+0x1a>
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
 80056a4:	2000294c 	.word	0x2000294c

080056a8 <__malloc_lock>:
 80056a8:	4801      	ldr	r0, [pc, #4]	; (80056b0 <__malloc_lock+0x8>)
 80056aa:	f000 b811 	b.w	80056d0 <__retarget_lock_acquire_recursive>
 80056ae:	bf00      	nop
 80056b0:	20002954 	.word	0x20002954

080056b4 <__malloc_unlock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__malloc_unlock+0x8>)
 80056b6:	f000 b80c 	b.w	80056d2 <__retarget_lock_release_recursive>
 80056ba:	bf00      	nop
 80056bc:	20002954 	.word	0x20002954

080056c0 <_malloc_usable_size_r>:
 80056c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056c4:	1f18      	subs	r0, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	bfbc      	itt	lt
 80056ca:	580b      	ldrlt	r3, [r1, r0]
 80056cc:	18c0      	addlt	r0, r0, r3
 80056ce:	4770      	bx	lr

080056d0 <__retarget_lock_acquire_recursive>:
 80056d0:	4770      	bx	lr

080056d2 <__retarget_lock_release_recursive>:
 80056d2:	4770      	bx	lr
 80056d4:	0000      	movs	r0, r0
	...

080056d8 <sin>:
 80056d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056da:	ec53 2b10 	vmov	r2, r3, d0
 80056de:	4826      	ldr	r0, [pc, #152]	; (8005778 <sin+0xa0>)
 80056e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056e4:	4281      	cmp	r1, r0
 80056e6:	dc07      	bgt.n	80056f8 <sin+0x20>
 80056e8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005770 <sin+0x98>
 80056ec:	2000      	movs	r0, #0
 80056ee:	f000 fe5b 	bl	80063a8 <__kernel_sin>
 80056f2:	ec51 0b10 	vmov	r0, r1, d0
 80056f6:	e007      	b.n	8005708 <sin+0x30>
 80056f8:	4820      	ldr	r0, [pc, #128]	; (800577c <sin+0xa4>)
 80056fa:	4281      	cmp	r1, r0
 80056fc:	dd09      	ble.n	8005712 <sin+0x3a>
 80056fe:	ee10 0a10 	vmov	r0, s0
 8005702:	4619      	mov	r1, r3
 8005704:	f7fa fdc0 	bl	8000288 <__aeabi_dsub>
 8005708:	ec41 0b10 	vmov	d0, r0, r1
 800570c:	b005      	add	sp, #20
 800570e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005712:	4668      	mov	r0, sp
 8005714:	f000 f834 	bl	8005780 <__ieee754_rem_pio2>
 8005718:	f000 0003 	and.w	r0, r0, #3
 800571c:	2801      	cmp	r0, #1
 800571e:	d008      	beq.n	8005732 <sin+0x5a>
 8005720:	2802      	cmp	r0, #2
 8005722:	d00d      	beq.n	8005740 <sin+0x68>
 8005724:	b9d0      	cbnz	r0, 800575c <sin+0x84>
 8005726:	ed9d 1b02 	vldr	d1, [sp, #8]
 800572a:	ed9d 0b00 	vldr	d0, [sp]
 800572e:	2001      	movs	r0, #1
 8005730:	e7dd      	b.n	80056ee <sin+0x16>
 8005732:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005736:	ed9d 0b00 	vldr	d0, [sp]
 800573a:	f000 fa2d 	bl	8005b98 <__kernel_cos>
 800573e:	e7d8      	b.n	80056f2 <sin+0x1a>
 8005740:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005744:	ed9d 0b00 	vldr	d0, [sp]
 8005748:	2001      	movs	r0, #1
 800574a:	f000 fe2d 	bl	80063a8 <__kernel_sin>
 800574e:	ec53 2b10 	vmov	r2, r3, d0
 8005752:	ee10 0a10 	vmov	r0, s0
 8005756:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800575a:	e7d5      	b.n	8005708 <sin+0x30>
 800575c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005760:	ed9d 0b00 	vldr	d0, [sp]
 8005764:	f000 fa18 	bl	8005b98 <__kernel_cos>
 8005768:	e7f1      	b.n	800574e <sin+0x76>
 800576a:	bf00      	nop
 800576c:	f3af 8000 	nop.w
	...
 8005778:	3fe921fb 	.word	0x3fe921fb
 800577c:	7fefffff 	.word	0x7fefffff

08005780 <__ieee754_rem_pio2>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	ed2d 8b02 	vpush	{d8}
 8005788:	ec55 4b10 	vmov	r4, r5, d0
 800578c:	4bca      	ldr	r3, [pc, #808]	; (8005ab8 <__ieee754_rem_pio2+0x338>)
 800578e:	b08b      	sub	sp, #44	; 0x2c
 8005790:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005794:	4598      	cmp	r8, r3
 8005796:	4682      	mov	sl, r0
 8005798:	9502      	str	r5, [sp, #8]
 800579a:	dc08      	bgt.n	80057ae <__ieee754_rem_pio2+0x2e>
 800579c:	2200      	movs	r2, #0
 800579e:	2300      	movs	r3, #0
 80057a0:	ed80 0b00 	vstr	d0, [r0]
 80057a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80057a8:	f04f 0b00 	mov.w	fp, #0
 80057ac:	e028      	b.n	8005800 <__ieee754_rem_pio2+0x80>
 80057ae:	4bc3      	ldr	r3, [pc, #780]	; (8005abc <__ieee754_rem_pio2+0x33c>)
 80057b0:	4598      	cmp	r8, r3
 80057b2:	dc78      	bgt.n	80058a6 <__ieee754_rem_pio2+0x126>
 80057b4:	9b02      	ldr	r3, [sp, #8]
 80057b6:	4ec2      	ldr	r6, [pc, #776]	; (8005ac0 <__ieee754_rem_pio2+0x340>)
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	ee10 0a10 	vmov	r0, s0
 80057be:	a3b0      	add	r3, pc, #704	; (adr r3, 8005a80 <__ieee754_rem_pio2+0x300>)
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	4629      	mov	r1, r5
 80057c6:	dd39      	ble.n	800583c <__ieee754_rem_pio2+0xbc>
 80057c8:	f7fa fd5e 	bl	8000288 <__aeabi_dsub>
 80057cc:	45b0      	cmp	r8, r6
 80057ce:	4604      	mov	r4, r0
 80057d0:	460d      	mov	r5, r1
 80057d2:	d01b      	beq.n	800580c <__ieee754_rem_pio2+0x8c>
 80057d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005a88 <__ieee754_rem_pio2+0x308>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f7fa fd55 	bl	8000288 <__aeabi_dsub>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	e9ca 2300 	strd	r2, r3, [sl]
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fa fd4d 	bl	8000288 <__aeabi_dsub>
 80057ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8005a88 <__ieee754_rem_pio2+0x308>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f7fa fd48 	bl	8000288 <__aeabi_dsub>
 80057f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80057fc:	f04f 0b01 	mov.w	fp, #1
 8005800:	4658      	mov	r0, fp
 8005802:	b00b      	add	sp, #44	; 0x2c
 8005804:	ecbd 8b02 	vpop	{d8}
 8005808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005a90 <__ieee754_rem_pio2+0x310>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fd39 	bl	8000288 <__aeabi_dsub>
 8005816:	a3a0      	add	r3, pc, #640	; (adr r3, 8005a98 <__ieee754_rem_pio2+0x318>)
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	4604      	mov	r4, r0
 800581e:	460d      	mov	r5, r1
 8005820:	f7fa fd32 	bl	8000288 <__aeabi_dsub>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	e9ca 2300 	strd	r2, r3, [sl]
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fa fd2a 	bl	8000288 <__aeabi_dsub>
 8005834:	a398      	add	r3, pc, #608	; (adr r3, 8005a98 <__ieee754_rem_pio2+0x318>)
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	e7db      	b.n	80057f4 <__ieee754_rem_pio2+0x74>
 800583c:	f7fa fd26 	bl	800028c <__adddf3>
 8005840:	45b0      	cmp	r8, r6
 8005842:	4604      	mov	r4, r0
 8005844:	460d      	mov	r5, r1
 8005846:	d016      	beq.n	8005876 <__ieee754_rem_pio2+0xf6>
 8005848:	a38f      	add	r3, pc, #572	; (adr r3, 8005a88 <__ieee754_rem_pio2+0x308>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f7fa fd1d 	bl	800028c <__adddf3>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	e9ca 2300 	strd	r2, r3, [sl]
 800585a:	4620      	mov	r0, r4
 800585c:	4629      	mov	r1, r5
 800585e:	f7fa fd13 	bl	8000288 <__aeabi_dsub>
 8005862:	a389      	add	r3, pc, #548	; (adr r3, 8005a88 <__ieee754_rem_pio2+0x308>)
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f7fa fd10 	bl	800028c <__adddf3>
 800586c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005870:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005874:	e7c4      	b.n	8005800 <__ieee754_rem_pio2+0x80>
 8005876:	a386      	add	r3, pc, #536	; (adr r3, 8005a90 <__ieee754_rem_pio2+0x310>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa fd06 	bl	800028c <__adddf3>
 8005880:	a385      	add	r3, pc, #532	; (adr r3, 8005a98 <__ieee754_rem_pio2+0x318>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	4604      	mov	r4, r0
 8005888:	460d      	mov	r5, r1
 800588a:	f7fa fcff 	bl	800028c <__adddf3>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	e9ca 2300 	strd	r2, r3, [sl]
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fa fcf5 	bl	8000288 <__aeabi_dsub>
 800589e:	a37e      	add	r3, pc, #504	; (adr r3, 8005a98 <__ieee754_rem_pio2+0x318>)
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	e7e0      	b.n	8005868 <__ieee754_rem_pio2+0xe8>
 80058a6:	4b87      	ldr	r3, [pc, #540]	; (8005ac4 <__ieee754_rem_pio2+0x344>)
 80058a8:	4598      	cmp	r8, r3
 80058aa:	f300 80d9 	bgt.w	8005a60 <__ieee754_rem_pio2+0x2e0>
 80058ae:	f000 fe39 	bl	8006524 <fabs>
 80058b2:	ec55 4b10 	vmov	r4, r5, d0
 80058b6:	ee10 0a10 	vmov	r0, s0
 80058ba:	a379      	add	r3, pc, #484	; (adr r3, 8005aa0 <__ieee754_rem_pio2+0x320>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	4629      	mov	r1, r5
 80058c2:	f7fa fe99 	bl	80005f8 <__aeabi_dmul>
 80058c6:	4b80      	ldr	r3, [pc, #512]	; (8005ac8 <__ieee754_rem_pio2+0x348>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	f7fa fcdf 	bl	800028c <__adddf3>
 80058ce:	f7fb f92d 	bl	8000b2c <__aeabi_d2iz>
 80058d2:	4683      	mov	fp, r0
 80058d4:	f7fa fe26 	bl	8000524 <__aeabi_i2d>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	ec43 2b18 	vmov	d8, r2, r3
 80058e0:	a367      	add	r3, pc, #412	; (adr r3, 8005a80 <__ieee754_rem_pio2+0x300>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fe87 	bl	80005f8 <__aeabi_dmul>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4620      	mov	r0, r4
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7fa fcc9 	bl	8000288 <__aeabi_dsub>
 80058f6:	a364      	add	r3, pc, #400	; (adr r3, 8005a88 <__ieee754_rem_pio2+0x308>)
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	4606      	mov	r6, r0
 80058fe:	460f      	mov	r7, r1
 8005900:	ec51 0b18 	vmov	r0, r1, d8
 8005904:	f7fa fe78 	bl	80005f8 <__aeabi_dmul>
 8005908:	f1bb 0f1f 	cmp.w	fp, #31
 800590c:	4604      	mov	r4, r0
 800590e:	460d      	mov	r5, r1
 8005910:	dc0d      	bgt.n	800592e <__ieee754_rem_pio2+0x1ae>
 8005912:	4b6e      	ldr	r3, [pc, #440]	; (8005acc <__ieee754_rem_pio2+0x34c>)
 8005914:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591c:	4543      	cmp	r3, r8
 800591e:	d006      	beq.n	800592e <__ieee754_rem_pio2+0x1ae>
 8005920:	4622      	mov	r2, r4
 8005922:	462b      	mov	r3, r5
 8005924:	4630      	mov	r0, r6
 8005926:	4639      	mov	r1, r7
 8005928:	f7fa fcae 	bl	8000288 <__aeabi_dsub>
 800592c:	e00f      	b.n	800594e <__ieee754_rem_pio2+0x1ce>
 800592e:	462b      	mov	r3, r5
 8005930:	4622      	mov	r2, r4
 8005932:	4630      	mov	r0, r6
 8005934:	4639      	mov	r1, r7
 8005936:	f7fa fca7 	bl	8000288 <__aeabi_dsub>
 800593a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005944:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005948:	f1b8 0f10 	cmp.w	r8, #16
 800594c:	dc02      	bgt.n	8005954 <__ieee754_rem_pio2+0x1d4>
 800594e:	e9ca 0100 	strd	r0, r1, [sl]
 8005952:	e039      	b.n	80059c8 <__ieee754_rem_pio2+0x248>
 8005954:	a34e      	add	r3, pc, #312	; (adr r3, 8005a90 <__ieee754_rem_pio2+0x310>)
 8005956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595a:	ec51 0b18 	vmov	r0, r1, d8
 800595e:	f7fa fe4b 	bl	80005f8 <__aeabi_dmul>
 8005962:	4604      	mov	r4, r0
 8005964:	460d      	mov	r5, r1
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4630      	mov	r0, r6
 800596c:	4639      	mov	r1, r7
 800596e:	f7fa fc8b 	bl	8000288 <__aeabi_dsub>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4680      	mov	r8, r0
 8005978:	4689      	mov	r9, r1
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fa fc83 	bl	8000288 <__aeabi_dsub>
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	f7fa fc7f 	bl	8000288 <__aeabi_dsub>
 800598a:	a343      	add	r3, pc, #268	; (adr r3, 8005a98 <__ieee754_rem_pio2+0x318>)
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	4604      	mov	r4, r0
 8005992:	460d      	mov	r5, r1
 8005994:	ec51 0b18 	vmov	r0, r1, d8
 8005998:	f7fa fe2e 	bl	80005f8 <__aeabi_dmul>
 800599c:	4622      	mov	r2, r4
 800599e:	462b      	mov	r3, r5
 80059a0:	f7fa fc72 	bl	8000288 <__aeabi_dsub>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4604      	mov	r4, r0
 80059aa:	460d      	mov	r5, r1
 80059ac:	4640      	mov	r0, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	f7fa fc6a 	bl	8000288 <__aeabi_dsub>
 80059b4:	9a03      	ldr	r2, [sp, #12]
 80059b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b31      	cmp	r3, #49	; 0x31
 80059be:	dc24      	bgt.n	8005a0a <__ieee754_rem_pio2+0x28a>
 80059c0:	e9ca 0100 	strd	r0, r1, [sl]
 80059c4:	4646      	mov	r6, r8
 80059c6:	464f      	mov	r7, r9
 80059c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80059cc:	4630      	mov	r0, r6
 80059ce:	4642      	mov	r2, r8
 80059d0:	464b      	mov	r3, r9
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fa fc58 	bl	8000288 <__aeabi_dsub>
 80059d8:	462b      	mov	r3, r5
 80059da:	4622      	mov	r2, r4
 80059dc:	f7fa fc54 	bl	8000288 <__aeabi_dsub>
 80059e0:	9b02      	ldr	r3, [sp, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80059e8:	f6bf af0a 	bge.w	8005800 <__ieee754_rem_pio2+0x80>
 80059ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80059f0:	f8ca 3004 	str.w	r3, [sl, #4]
 80059f4:	f8ca 8000 	str.w	r8, [sl]
 80059f8:	f8ca 0008 	str.w	r0, [sl, #8]
 80059fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a00:	f8ca 300c 	str.w	r3, [sl, #12]
 8005a04:	f1cb 0b00 	rsb	fp, fp, #0
 8005a08:	e6fa      	b.n	8005800 <__ieee754_rem_pio2+0x80>
 8005a0a:	a327      	add	r3, pc, #156	; (adr r3, 8005aa8 <__ieee754_rem_pio2+0x328>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	ec51 0b18 	vmov	r0, r1, d8
 8005a14:	f7fa fdf0 	bl	80005f8 <__aeabi_dmul>
 8005a18:	4604      	mov	r4, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4640      	mov	r0, r8
 8005a22:	4649      	mov	r1, r9
 8005a24:	f7fa fc30 	bl	8000288 <__aeabi_dsub>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	4640      	mov	r0, r8
 8005a32:	4649      	mov	r1, r9
 8005a34:	f7fa fc28 	bl	8000288 <__aeabi_dsub>
 8005a38:	4622      	mov	r2, r4
 8005a3a:	462b      	mov	r3, r5
 8005a3c:	f7fa fc24 	bl	8000288 <__aeabi_dsub>
 8005a40:	a31b      	add	r3, pc, #108	; (adr r3, 8005ab0 <__ieee754_rem_pio2+0x330>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	4604      	mov	r4, r0
 8005a48:	460d      	mov	r5, r1
 8005a4a:	ec51 0b18 	vmov	r0, r1, d8
 8005a4e:	f7fa fdd3 	bl	80005f8 <__aeabi_dmul>
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	f7fa fc17 	bl	8000288 <__aeabi_dsub>
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	e75f      	b.n	8005920 <__ieee754_rem_pio2+0x1a0>
 8005a60:	4b1b      	ldr	r3, [pc, #108]	; (8005ad0 <__ieee754_rem_pio2+0x350>)
 8005a62:	4598      	cmp	r8, r3
 8005a64:	dd36      	ble.n	8005ad4 <__ieee754_rem_pio2+0x354>
 8005a66:	ee10 2a10 	vmov	r2, s0
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4629      	mov	r1, r5
 8005a70:	f7fa fc0a 	bl	8000288 <__aeabi_dsub>
 8005a74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a78:	e9ca 0100 	strd	r0, r1, [sl]
 8005a7c:	e694      	b.n	80057a8 <__ieee754_rem_pio2+0x28>
 8005a7e:	bf00      	nop
 8005a80:	54400000 	.word	0x54400000
 8005a84:	3ff921fb 	.word	0x3ff921fb
 8005a88:	1a626331 	.word	0x1a626331
 8005a8c:	3dd0b461 	.word	0x3dd0b461
 8005a90:	1a600000 	.word	0x1a600000
 8005a94:	3dd0b461 	.word	0x3dd0b461
 8005a98:	2e037073 	.word	0x2e037073
 8005a9c:	3ba3198a 	.word	0x3ba3198a
 8005aa0:	6dc9c883 	.word	0x6dc9c883
 8005aa4:	3fe45f30 	.word	0x3fe45f30
 8005aa8:	2e000000 	.word	0x2e000000
 8005aac:	3ba3198a 	.word	0x3ba3198a
 8005ab0:	252049c1 	.word	0x252049c1
 8005ab4:	397b839a 	.word	0x397b839a
 8005ab8:	3fe921fb 	.word	0x3fe921fb
 8005abc:	4002d97b 	.word	0x4002d97b
 8005ac0:	3ff921fb 	.word	0x3ff921fb
 8005ac4:	413921fb 	.word	0x413921fb
 8005ac8:	3fe00000 	.word	0x3fe00000
 8005acc:	08006834 	.word	0x08006834
 8005ad0:	7fefffff 	.word	0x7fefffff
 8005ad4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005ad8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005adc:	ee10 0a10 	vmov	r0, s0
 8005ae0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005ae4:	ee10 6a10 	vmov	r6, s0
 8005ae8:	460f      	mov	r7, r1
 8005aea:	f7fb f81f 	bl	8000b2c <__aeabi_d2iz>
 8005aee:	f7fa fd19 	bl	8000524 <__aeabi_i2d>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4630      	mov	r0, r6
 8005af8:	4639      	mov	r1, r7
 8005afa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005afe:	f7fa fbc3 	bl	8000288 <__aeabi_dsub>
 8005b02:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <__ieee754_rem_pio2+0x40c>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	f7fa fd77 	bl	80005f8 <__aeabi_dmul>
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	f7fb f80d 	bl	8000b2c <__aeabi_d2iz>
 8005b12:	f7fa fd07 	bl	8000524 <__aeabi_i2d>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b22:	f7fa fbb1 	bl	8000288 <__aeabi_dsub>
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <__ieee754_rem_pio2+0x40c>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f7fa fd65 	bl	80005f8 <__aeabi_dmul>
 8005b2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005b32:	ad04      	add	r5, sp, #16
 8005b34:	f04f 0803 	mov.w	r8, #3
 8005b38:	46a9      	mov	r9, r5
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	2700      	movs	r7, #0
 8005b3e:	4632      	mov	r2, r6
 8005b40:	463b      	mov	r3, r7
 8005b42:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005b46:	46c3      	mov	fp, r8
 8005b48:	3d08      	subs	r5, #8
 8005b4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005b4e:	f7fa ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d1f3      	bne.n	8005b3e <__ieee754_rem_pio2+0x3be>
 8005b56:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <__ieee754_rem_pio2+0x410>)
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	4622      	mov	r2, r4
 8005b60:	465b      	mov	r3, fp
 8005b62:	4651      	mov	r1, sl
 8005b64:	4648      	mov	r0, r9
 8005b66:	f000 f8df 	bl	8005d28 <__kernel_rem_pio2>
 8005b6a:	9b02      	ldr	r3, [sp, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	4683      	mov	fp, r0
 8005b70:	f6bf ae46 	bge.w	8005800 <__ieee754_rem_pio2+0x80>
 8005b74:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005b78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b7c:	f8ca 3004 	str.w	r3, [sl, #4]
 8005b80:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005b84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b88:	e73a      	b.n	8005a00 <__ieee754_rem_pio2+0x280>
 8005b8a:	bf00      	nop
 8005b8c:	41700000 	.word	0x41700000
 8005b90:	080068b4 	.word	0x080068b4
 8005b94:	00000000 	.word	0x00000000

08005b98 <__kernel_cos>:
 8005b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9c:	ec57 6b10 	vmov	r6, r7, d0
 8005ba0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005ba4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005ba8:	ed8d 1b00 	vstr	d1, [sp]
 8005bac:	da07      	bge.n	8005bbe <__kernel_cos+0x26>
 8005bae:	ee10 0a10 	vmov	r0, s0
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa ffba 	bl	8000b2c <__aeabi_d2iz>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f000 8088 	beq.w	8005cce <__kernel_cos+0x136>
 8005bbe:	4632      	mov	r2, r6
 8005bc0:	463b      	mov	r3, r7
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	f7fa fd17 	bl	80005f8 <__aeabi_dmul>
 8005bca:	4b51      	ldr	r3, [pc, #324]	; (8005d10 <__kernel_cos+0x178>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4604      	mov	r4, r0
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	f7fa fd11 	bl	80005f8 <__aeabi_dmul>
 8005bd6:	a340      	add	r3, pc, #256	; (adr r3, 8005cd8 <__kernel_cos+0x140>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	4682      	mov	sl, r0
 8005bde:	468b      	mov	fp, r1
 8005be0:	4620      	mov	r0, r4
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7fa fd08 	bl	80005f8 <__aeabi_dmul>
 8005be8:	a33d      	add	r3, pc, #244	; (adr r3, 8005ce0 <__kernel_cos+0x148>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fb4d 	bl	800028c <__adddf3>
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	f7fa fcff 	bl	80005f8 <__aeabi_dmul>
 8005bfa:	a33b      	add	r3, pc, #236	; (adr r3, 8005ce8 <__kernel_cos+0x150>)
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f7fa fb42 	bl	8000288 <__aeabi_dsub>
 8005c04:	4622      	mov	r2, r4
 8005c06:	462b      	mov	r3, r5
 8005c08:	f7fa fcf6 	bl	80005f8 <__aeabi_dmul>
 8005c0c:	a338      	add	r3, pc, #224	; (adr r3, 8005cf0 <__kernel_cos+0x158>)
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f7fa fb3b 	bl	800028c <__adddf3>
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	f7fa fced 	bl	80005f8 <__aeabi_dmul>
 8005c1e:	a336      	add	r3, pc, #216	; (adr r3, 8005cf8 <__kernel_cos+0x160>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f7fa fb30 	bl	8000288 <__aeabi_dsub>
 8005c28:	4622      	mov	r2, r4
 8005c2a:	462b      	mov	r3, r5
 8005c2c:	f7fa fce4 	bl	80005f8 <__aeabi_dmul>
 8005c30:	a333      	add	r3, pc, #204	; (adr r3, 8005d00 <__kernel_cos+0x168>)
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	f7fa fb29 	bl	800028c <__adddf3>
 8005c3a:	4622      	mov	r2, r4
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	f7fa fcdb 	bl	80005f8 <__aeabi_dmul>
 8005c42:	4622      	mov	r2, r4
 8005c44:	462b      	mov	r3, r5
 8005c46:	f7fa fcd7 	bl	80005f8 <__aeabi_dmul>
 8005c4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c4e:	4604      	mov	r4, r0
 8005c50:	460d      	mov	r5, r1
 8005c52:	4630      	mov	r0, r6
 8005c54:	4639      	mov	r1, r7
 8005c56:	f7fa fccf 	bl	80005f8 <__aeabi_dmul>
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4620      	mov	r0, r4
 8005c62:	f7fa fb11 	bl	8000288 <__aeabi_dsub>
 8005c66:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <__kernel_cos+0x17c>)
 8005c68:	4598      	cmp	r8, r3
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	460f      	mov	r7, r1
 8005c6e:	dc10      	bgt.n	8005c92 <__kernel_cos+0xfa>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4650      	mov	r0, sl
 8005c76:	4659      	mov	r1, fp
 8005c78:	f7fa fb06 	bl	8000288 <__aeabi_dsub>
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4926      	ldr	r1, [pc, #152]	; (8005d18 <__kernel_cos+0x180>)
 8005c80:	4602      	mov	r2, r0
 8005c82:	2000      	movs	r0, #0
 8005c84:	f7fa fb00 	bl	8000288 <__aeabi_dsub>
 8005c88:	ec41 0b10 	vmov	d0, r0, r1
 8005c8c:	b003      	add	sp, #12
 8005c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c92:	4b22      	ldr	r3, [pc, #136]	; (8005d1c <__kernel_cos+0x184>)
 8005c94:	4920      	ldr	r1, [pc, #128]	; (8005d18 <__kernel_cos+0x180>)
 8005c96:	4598      	cmp	r8, r3
 8005c98:	bfcc      	ite	gt
 8005c9a:	4d21      	ldrgt	r5, [pc, #132]	; (8005d20 <__kernel_cos+0x188>)
 8005c9c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005ca0:	2400      	movs	r4, #0
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	462b      	mov	r3, r5
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f7fa faee 	bl	8000288 <__aeabi_dsub>
 8005cac:	4622      	mov	r2, r4
 8005cae:	4680      	mov	r8, r0
 8005cb0:	4689      	mov	r9, r1
 8005cb2:	462b      	mov	r3, r5
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	f7fa fae6 	bl	8000288 <__aeabi_dsub>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	f7fa fae2 	bl	8000288 <__aeabi_dsub>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4640      	mov	r0, r8
 8005cca:	4649      	mov	r1, r9
 8005ccc:	e7da      	b.n	8005c84 <__kernel_cos+0xec>
 8005cce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005d08 <__kernel_cos+0x170>
 8005cd2:	e7db      	b.n	8005c8c <__kernel_cos+0xf4>
 8005cd4:	f3af 8000 	nop.w
 8005cd8:	be8838d4 	.word	0xbe8838d4
 8005cdc:	bda8fae9 	.word	0xbda8fae9
 8005ce0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005ce4:	3e21ee9e 	.word	0x3e21ee9e
 8005ce8:	809c52ad 	.word	0x809c52ad
 8005cec:	3e927e4f 	.word	0x3e927e4f
 8005cf0:	19cb1590 	.word	0x19cb1590
 8005cf4:	3efa01a0 	.word	0x3efa01a0
 8005cf8:	16c15177 	.word	0x16c15177
 8005cfc:	3f56c16c 	.word	0x3f56c16c
 8005d00:	5555554c 	.word	0x5555554c
 8005d04:	3fa55555 	.word	0x3fa55555
 8005d08:	00000000 	.word	0x00000000
 8005d0c:	3ff00000 	.word	0x3ff00000
 8005d10:	3fe00000 	.word	0x3fe00000
 8005d14:	3fd33332 	.word	0x3fd33332
 8005d18:	3ff00000 	.word	0x3ff00000
 8005d1c:	3fe90000 	.word	0x3fe90000
 8005d20:	3fd20000 	.word	0x3fd20000
 8005d24:	00000000 	.word	0x00000000

08005d28 <__kernel_rem_pio2>:
 8005d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d2c:	ed2d 8b02 	vpush	{d8}
 8005d30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005d34:	f112 0f14 	cmn.w	r2, #20
 8005d38:	9308      	str	r3, [sp, #32]
 8005d3a:	9101      	str	r1, [sp, #4]
 8005d3c:	4bc6      	ldr	r3, [pc, #792]	; (8006058 <__kernel_rem_pio2+0x330>)
 8005d3e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005d40:	9009      	str	r0, [sp, #36]	; 0x24
 8005d42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d46:	9304      	str	r3, [sp, #16]
 8005d48:	9b08      	ldr	r3, [sp, #32]
 8005d4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005d4e:	bfa8      	it	ge
 8005d50:	1ed4      	subge	r4, r2, #3
 8005d52:	9306      	str	r3, [sp, #24]
 8005d54:	bfb2      	itee	lt
 8005d56:	2400      	movlt	r4, #0
 8005d58:	2318      	movge	r3, #24
 8005d5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005d5e:	f06f 0317 	mvn.w	r3, #23
 8005d62:	fb04 3303 	mla	r3, r4, r3, r3
 8005d66:	eb03 0a02 	add.w	sl, r3, r2
 8005d6a:	9b04      	ldr	r3, [sp, #16]
 8005d6c:	9a06      	ldr	r2, [sp, #24]
 8005d6e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8006048 <__kernel_rem_pio2+0x320>
 8005d72:	eb03 0802 	add.w	r8, r3, r2
 8005d76:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005d78:	1aa7      	subs	r7, r4, r2
 8005d7a:	ae20      	add	r6, sp, #128	; 0x80
 8005d7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005d80:	2500      	movs	r5, #0
 8005d82:	4545      	cmp	r5, r8
 8005d84:	dd18      	ble.n	8005db8 <__kernel_rem_pio2+0x90>
 8005d86:	9b08      	ldr	r3, [sp, #32]
 8005d88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005d8c:	aa20      	add	r2, sp, #128	; 0x80
 8005d8e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006048 <__kernel_rem_pio2+0x320>
 8005d92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005d96:	f1c3 0301 	rsb	r3, r3, #1
 8005d9a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005d9e:	9307      	str	r3, [sp, #28]
 8005da0:	9b07      	ldr	r3, [sp, #28]
 8005da2:	9a04      	ldr	r2, [sp, #16]
 8005da4:	4443      	add	r3, r8
 8005da6:	429a      	cmp	r2, r3
 8005da8:	db2f      	blt.n	8005e0a <__kernel_rem_pio2+0xe2>
 8005daa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005dae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005db2:	462f      	mov	r7, r5
 8005db4:	2600      	movs	r6, #0
 8005db6:	e01b      	b.n	8005df0 <__kernel_rem_pio2+0xc8>
 8005db8:	42ef      	cmn	r7, r5
 8005dba:	d407      	bmi.n	8005dcc <__kernel_rem_pio2+0xa4>
 8005dbc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005dc0:	f7fa fbb0 	bl	8000524 <__aeabi_i2d>
 8005dc4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005dc8:	3501      	adds	r5, #1
 8005dca:	e7da      	b.n	8005d82 <__kernel_rem_pio2+0x5a>
 8005dcc:	ec51 0b18 	vmov	r0, r1, d8
 8005dd0:	e7f8      	b.n	8005dc4 <__kernel_rem_pio2+0x9c>
 8005dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dd6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005dda:	f7fa fc0d 	bl	80005f8 <__aeabi_dmul>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005de6:	f7fa fa51 	bl	800028c <__adddf3>
 8005dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dee:	3601      	adds	r6, #1
 8005df0:	9b06      	ldr	r3, [sp, #24]
 8005df2:	429e      	cmp	r6, r3
 8005df4:	f1a7 0708 	sub.w	r7, r7, #8
 8005df8:	ddeb      	ble.n	8005dd2 <__kernel_rem_pio2+0xaa>
 8005dfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dfe:	3508      	adds	r5, #8
 8005e00:	ecab 7b02 	vstmia	fp!, {d7}
 8005e04:	f108 0801 	add.w	r8, r8, #1
 8005e08:	e7ca      	b.n	8005da0 <__kernel_rem_pio2+0x78>
 8005e0a:	9b04      	ldr	r3, [sp, #16]
 8005e0c:	aa0c      	add	r2, sp, #48	; 0x30
 8005e0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e14:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005e16:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005e1a:	9c04      	ldr	r4, [sp, #16]
 8005e1c:	930a      	str	r3, [sp, #40]	; 0x28
 8005e1e:	ab98      	add	r3, sp, #608	; 0x260
 8005e20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e24:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005e28:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005e2c:	f8cd b008 	str.w	fp, [sp, #8]
 8005e30:	4625      	mov	r5, r4
 8005e32:	2d00      	cmp	r5, #0
 8005e34:	dc78      	bgt.n	8005f28 <__kernel_rem_pio2+0x200>
 8005e36:	ec47 6b10 	vmov	d0, r6, r7
 8005e3a:	4650      	mov	r0, sl
 8005e3c:	f000 fbfc 	bl	8006638 <scalbn>
 8005e40:	ec57 6b10 	vmov	r6, r7, d0
 8005e44:	2200      	movs	r2, #0
 8005e46:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005e4a:	ee10 0a10 	vmov	r0, s0
 8005e4e:	4639      	mov	r1, r7
 8005e50:	f7fa fbd2 	bl	80005f8 <__aeabi_dmul>
 8005e54:	ec41 0b10 	vmov	d0, r0, r1
 8005e58:	f000 fb6e 	bl	8006538 <floor>
 8005e5c:	4b7f      	ldr	r3, [pc, #508]	; (800605c <__kernel_rem_pio2+0x334>)
 8005e5e:	ec51 0b10 	vmov	r0, r1, d0
 8005e62:	2200      	movs	r2, #0
 8005e64:	f7fa fbc8 	bl	80005f8 <__aeabi_dmul>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	4639      	mov	r1, r7
 8005e70:	f7fa fa0a 	bl	8000288 <__aeabi_dsub>
 8005e74:	460f      	mov	r7, r1
 8005e76:	4606      	mov	r6, r0
 8005e78:	f7fa fe58 	bl	8000b2c <__aeabi_d2iz>
 8005e7c:	9007      	str	r0, [sp, #28]
 8005e7e:	f7fa fb51 	bl	8000524 <__aeabi_i2d>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4630      	mov	r0, r6
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa f9fd 	bl	8000288 <__aeabi_dsub>
 8005e8e:	f1ba 0f00 	cmp.w	sl, #0
 8005e92:	4606      	mov	r6, r0
 8005e94:	460f      	mov	r7, r1
 8005e96:	dd70      	ble.n	8005f7a <__kernel_rem_pio2+0x252>
 8005e98:	1e62      	subs	r2, r4, #1
 8005e9a:	ab0c      	add	r3, sp, #48	; 0x30
 8005e9c:	9d07      	ldr	r5, [sp, #28]
 8005e9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005ea2:	f1ca 0118 	rsb	r1, sl, #24
 8005ea6:	fa40 f301 	asr.w	r3, r0, r1
 8005eaa:	441d      	add	r5, r3
 8005eac:	408b      	lsls	r3, r1
 8005eae:	1ac0      	subs	r0, r0, r3
 8005eb0:	ab0c      	add	r3, sp, #48	; 0x30
 8005eb2:	9507      	str	r5, [sp, #28]
 8005eb4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005eb8:	f1ca 0317 	rsb	r3, sl, #23
 8005ebc:	fa40 f303 	asr.w	r3, r0, r3
 8005ec0:	9302      	str	r3, [sp, #8]
 8005ec2:	9b02      	ldr	r3, [sp, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd66      	ble.n	8005f96 <__kernel_rem_pio2+0x26e>
 8005ec8:	9b07      	ldr	r3, [sp, #28]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	3301      	adds	r3, #1
 8005ece:	9307      	str	r3, [sp, #28]
 8005ed0:	4615      	mov	r5, r2
 8005ed2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005ed6:	4294      	cmp	r4, r2
 8005ed8:	f300 8099 	bgt.w	800600e <__kernel_rem_pio2+0x2e6>
 8005edc:	f1ba 0f00 	cmp.w	sl, #0
 8005ee0:	dd07      	ble.n	8005ef2 <__kernel_rem_pio2+0x1ca>
 8005ee2:	f1ba 0f01 	cmp.w	sl, #1
 8005ee6:	f000 80a5 	beq.w	8006034 <__kernel_rem_pio2+0x30c>
 8005eea:	f1ba 0f02 	cmp.w	sl, #2
 8005eee:	f000 80c1 	beq.w	8006074 <__kernel_rem_pio2+0x34c>
 8005ef2:	9b02      	ldr	r3, [sp, #8]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d14e      	bne.n	8005f96 <__kernel_rem_pio2+0x26e>
 8005ef8:	4632      	mov	r2, r6
 8005efa:	463b      	mov	r3, r7
 8005efc:	4958      	ldr	r1, [pc, #352]	; (8006060 <__kernel_rem_pio2+0x338>)
 8005efe:	2000      	movs	r0, #0
 8005f00:	f7fa f9c2 	bl	8000288 <__aeabi_dsub>
 8005f04:	4606      	mov	r6, r0
 8005f06:	460f      	mov	r7, r1
 8005f08:	2d00      	cmp	r5, #0
 8005f0a:	d044      	beq.n	8005f96 <__kernel_rem_pio2+0x26e>
 8005f0c:	4650      	mov	r0, sl
 8005f0e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8006050 <__kernel_rem_pio2+0x328>
 8005f12:	f000 fb91 	bl	8006638 <scalbn>
 8005f16:	4630      	mov	r0, r6
 8005f18:	4639      	mov	r1, r7
 8005f1a:	ec53 2b10 	vmov	r2, r3, d0
 8005f1e:	f7fa f9b3 	bl	8000288 <__aeabi_dsub>
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	e036      	b.n	8005f96 <__kernel_rem_pio2+0x26e>
 8005f28:	4b4e      	ldr	r3, [pc, #312]	; (8006064 <__kernel_rem_pio2+0x33c>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	4639      	mov	r1, r7
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	f7fa fdfa 	bl	8000b2c <__aeabi_d2iz>
 8005f38:	f7fa faf4 	bl	8000524 <__aeabi_i2d>
 8005f3c:	4b4a      	ldr	r3, [pc, #296]	; (8006068 <__kernel_rem_pio2+0x340>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	4680      	mov	r8, r0
 8005f42:	4689      	mov	r9, r1
 8005f44:	f7fa fb58 	bl	80005f8 <__aeabi_dmul>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	4639      	mov	r1, r7
 8005f50:	f7fa f99a 	bl	8000288 <__aeabi_dsub>
 8005f54:	f7fa fdea 	bl	8000b2c <__aeabi_d2iz>
 8005f58:	9b02      	ldr	r3, [sp, #8]
 8005f5a:	f843 0b04 	str.w	r0, [r3], #4
 8005f5e:	3d01      	subs	r5, #1
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	ab70      	add	r3, sp, #448	; 0x1c0
 8005f64:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	4649      	mov	r1, r9
 8005f70:	f7fa f98c 	bl	800028c <__adddf3>
 8005f74:	4606      	mov	r6, r0
 8005f76:	460f      	mov	r7, r1
 8005f78:	e75b      	b.n	8005e32 <__kernel_rem_pio2+0x10a>
 8005f7a:	d105      	bne.n	8005f88 <__kernel_rem_pio2+0x260>
 8005f7c:	1e63      	subs	r3, r4, #1
 8005f7e:	aa0c      	add	r2, sp, #48	; 0x30
 8005f80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005f84:	15c3      	asrs	r3, r0, #23
 8005f86:	e79b      	b.n	8005ec0 <__kernel_rem_pio2+0x198>
 8005f88:	4b38      	ldr	r3, [pc, #224]	; (800606c <__kernel_rem_pio2+0x344>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f7fa fdba 	bl	8000b04 <__aeabi_dcmpge>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d139      	bne.n	8006008 <__kernel_rem_pio2+0x2e0>
 8005f94:	9002      	str	r0, [sp, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	f7fa fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	f000 80b4 	beq.w	8006110 <__kernel_rem_pio2+0x3e8>
 8005fa8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8005fac:	465b      	mov	r3, fp
 8005fae:	2200      	movs	r2, #0
 8005fb0:	9904      	ldr	r1, [sp, #16]
 8005fb2:	428b      	cmp	r3, r1
 8005fb4:	da65      	bge.n	8006082 <__kernel_rem_pio2+0x35a>
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	d07b      	beq.n	80060b2 <__kernel_rem_pio2+0x38a>
 8005fba:	ab0c      	add	r3, sp, #48	; 0x30
 8005fbc:	f1aa 0a18 	sub.w	sl, sl, #24
 8005fc0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 80a0 	beq.w	800610a <__kernel_rem_pio2+0x3e2>
 8005fca:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8006050 <__kernel_rem_pio2+0x328>
 8005fce:	4650      	mov	r0, sl
 8005fd0:	f000 fb32 	bl	8006638 <scalbn>
 8005fd4:	4f23      	ldr	r7, [pc, #140]	; (8006064 <__kernel_rem_pio2+0x33c>)
 8005fd6:	ec55 4b10 	vmov	r4, r5, d0
 8005fda:	46d8      	mov	r8, fp
 8005fdc:	2600      	movs	r6, #0
 8005fde:	f1b8 0f00 	cmp.w	r8, #0
 8005fe2:	f280 80cf 	bge.w	8006184 <__kernel_rem_pio2+0x45c>
 8005fe6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8006048 <__kernel_rem_pio2+0x320>
 8005fea:	465f      	mov	r7, fp
 8005fec:	f04f 0800 	mov.w	r8, #0
 8005ff0:	2f00      	cmp	r7, #0
 8005ff2:	f2c0 80fd 	blt.w	80061f0 <__kernel_rem_pio2+0x4c8>
 8005ff6:	ab70      	add	r3, sp, #448	; 0x1c0
 8005ff8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006070 <__kernel_rem_pio2+0x348>
 8005ffc:	ec55 4b18 	vmov	r4, r5, d8
 8006000:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006004:	2600      	movs	r6, #0
 8006006:	e0e5      	b.n	80061d4 <__kernel_rem_pio2+0x4ac>
 8006008:	2302      	movs	r3, #2
 800600a:	9302      	str	r3, [sp, #8]
 800600c:	e75c      	b.n	8005ec8 <__kernel_rem_pio2+0x1a0>
 800600e:	f8db 3000 	ldr.w	r3, [fp]
 8006012:	b955      	cbnz	r5, 800602a <__kernel_rem_pio2+0x302>
 8006014:	b123      	cbz	r3, 8006020 <__kernel_rem_pio2+0x2f8>
 8006016:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800601a:	f8cb 3000 	str.w	r3, [fp]
 800601e:	2301      	movs	r3, #1
 8006020:	3201      	adds	r2, #1
 8006022:	f10b 0b04 	add.w	fp, fp, #4
 8006026:	461d      	mov	r5, r3
 8006028:	e755      	b.n	8005ed6 <__kernel_rem_pio2+0x1ae>
 800602a:	1acb      	subs	r3, r1, r3
 800602c:	f8cb 3000 	str.w	r3, [fp]
 8006030:	462b      	mov	r3, r5
 8006032:	e7f5      	b.n	8006020 <__kernel_rem_pio2+0x2f8>
 8006034:	1e62      	subs	r2, r4, #1
 8006036:	ab0c      	add	r3, sp, #48	; 0x30
 8006038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006040:	a90c      	add	r1, sp, #48	; 0x30
 8006042:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006046:	e754      	b.n	8005ef2 <__kernel_rem_pio2+0x1ca>
	...
 8006054:	3ff00000 	.word	0x3ff00000
 8006058:	08006a00 	.word	0x08006a00
 800605c:	40200000 	.word	0x40200000
 8006060:	3ff00000 	.word	0x3ff00000
 8006064:	3e700000 	.word	0x3e700000
 8006068:	41700000 	.word	0x41700000
 800606c:	3fe00000 	.word	0x3fe00000
 8006070:	080069c0 	.word	0x080069c0
 8006074:	1e62      	subs	r2, r4, #1
 8006076:	ab0c      	add	r3, sp, #48	; 0x30
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006080:	e7de      	b.n	8006040 <__kernel_rem_pio2+0x318>
 8006082:	a90c      	add	r1, sp, #48	; 0x30
 8006084:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006088:	3b01      	subs	r3, #1
 800608a:	430a      	orrs	r2, r1
 800608c:	e790      	b.n	8005fb0 <__kernel_rem_pio2+0x288>
 800608e:	3301      	adds	r3, #1
 8006090:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006094:	2900      	cmp	r1, #0
 8006096:	d0fa      	beq.n	800608e <__kernel_rem_pio2+0x366>
 8006098:	9a08      	ldr	r2, [sp, #32]
 800609a:	18e3      	adds	r3, r4, r3
 800609c:	18a6      	adds	r6, r4, r2
 800609e:	aa20      	add	r2, sp, #128	; 0x80
 80060a0:	1c65      	adds	r5, r4, #1
 80060a2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80060a6:	9302      	str	r3, [sp, #8]
 80060a8:	9b02      	ldr	r3, [sp, #8]
 80060aa:	42ab      	cmp	r3, r5
 80060ac:	da04      	bge.n	80060b8 <__kernel_rem_pio2+0x390>
 80060ae:	461c      	mov	r4, r3
 80060b0:	e6b5      	b.n	8005e1e <__kernel_rem_pio2+0xf6>
 80060b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060b4:	2301      	movs	r3, #1
 80060b6:	e7eb      	b.n	8006090 <__kernel_rem_pio2+0x368>
 80060b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060be:	f7fa fa31 	bl	8000524 <__aeabi_i2d>
 80060c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80060c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c8:	46b3      	mov	fp, r6
 80060ca:	461c      	mov	r4, r3
 80060cc:	2700      	movs	r7, #0
 80060ce:	f04f 0800 	mov.w	r8, #0
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	429f      	cmp	r7, r3
 80060da:	dd06      	ble.n	80060ea <__kernel_rem_pio2+0x3c2>
 80060dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80060de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80060e2:	e9c3 8900 	strd	r8, r9, [r3]
 80060e6:	3501      	adds	r5, #1
 80060e8:	e7de      	b.n	80060a8 <__kernel_rem_pio2+0x380>
 80060ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80060ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80060f2:	f7fa fa81 	bl	80005f8 <__aeabi_dmul>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4640      	mov	r0, r8
 80060fc:	4649      	mov	r1, r9
 80060fe:	f7fa f8c5 	bl	800028c <__adddf3>
 8006102:	3701      	adds	r7, #1
 8006104:	4680      	mov	r8, r0
 8006106:	4689      	mov	r9, r1
 8006108:	e7e5      	b.n	80060d6 <__kernel_rem_pio2+0x3ae>
 800610a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800610e:	e754      	b.n	8005fba <__kernel_rem_pio2+0x292>
 8006110:	ec47 6b10 	vmov	d0, r6, r7
 8006114:	f1ca 0000 	rsb	r0, sl, #0
 8006118:	f000 fa8e 	bl	8006638 <scalbn>
 800611c:	ec57 6b10 	vmov	r6, r7, d0
 8006120:	4b9f      	ldr	r3, [pc, #636]	; (80063a0 <__kernel_rem_pio2+0x678>)
 8006122:	ee10 0a10 	vmov	r0, s0
 8006126:	2200      	movs	r2, #0
 8006128:	4639      	mov	r1, r7
 800612a:	f7fa fceb 	bl	8000b04 <__aeabi_dcmpge>
 800612e:	b300      	cbz	r0, 8006172 <__kernel_rem_pio2+0x44a>
 8006130:	4b9c      	ldr	r3, [pc, #624]	; (80063a4 <__kernel_rem_pio2+0x67c>)
 8006132:	2200      	movs	r2, #0
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa fa5e 	bl	80005f8 <__aeabi_dmul>
 800613c:	f7fa fcf6 	bl	8000b2c <__aeabi_d2iz>
 8006140:	4605      	mov	r5, r0
 8006142:	f7fa f9ef 	bl	8000524 <__aeabi_i2d>
 8006146:	4b96      	ldr	r3, [pc, #600]	; (80063a0 <__kernel_rem_pio2+0x678>)
 8006148:	2200      	movs	r2, #0
 800614a:	f7fa fa55 	bl	80005f8 <__aeabi_dmul>
 800614e:	460b      	mov	r3, r1
 8006150:	4602      	mov	r2, r0
 8006152:	4639      	mov	r1, r7
 8006154:	4630      	mov	r0, r6
 8006156:	f7fa f897 	bl	8000288 <__aeabi_dsub>
 800615a:	f7fa fce7 	bl	8000b2c <__aeabi_d2iz>
 800615e:	f104 0b01 	add.w	fp, r4, #1
 8006162:	ab0c      	add	r3, sp, #48	; 0x30
 8006164:	f10a 0a18 	add.w	sl, sl, #24
 8006168:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800616c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8006170:	e72b      	b.n	8005fca <__kernel_rem_pio2+0x2a2>
 8006172:	4630      	mov	r0, r6
 8006174:	4639      	mov	r1, r7
 8006176:	f7fa fcd9 	bl	8000b2c <__aeabi_d2iz>
 800617a:	ab0c      	add	r3, sp, #48	; 0x30
 800617c:	46a3      	mov	fp, r4
 800617e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006182:	e722      	b.n	8005fca <__kernel_rem_pio2+0x2a2>
 8006184:	ab70      	add	r3, sp, #448	; 0x1c0
 8006186:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800618a:	ab0c      	add	r3, sp, #48	; 0x30
 800618c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006190:	f7fa f9c8 	bl	8000524 <__aeabi_i2d>
 8006194:	4622      	mov	r2, r4
 8006196:	462b      	mov	r3, r5
 8006198:	f7fa fa2e 	bl	80005f8 <__aeabi_dmul>
 800619c:	4632      	mov	r2, r6
 800619e:	e9c9 0100 	strd	r0, r1, [r9]
 80061a2:	463b      	mov	r3, r7
 80061a4:	4620      	mov	r0, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	f7fa fa26 	bl	80005f8 <__aeabi_dmul>
 80061ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80061b0:	4604      	mov	r4, r0
 80061b2:	460d      	mov	r5, r1
 80061b4:	e713      	b.n	8005fde <__kernel_rem_pio2+0x2b6>
 80061b6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80061ba:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80061be:	f7fa fa1b 	bl	80005f8 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4620      	mov	r0, r4
 80061c8:	4629      	mov	r1, r5
 80061ca:	f7fa f85f 	bl	800028c <__adddf3>
 80061ce:	3601      	adds	r6, #1
 80061d0:	4604      	mov	r4, r0
 80061d2:	460d      	mov	r5, r1
 80061d4:	9b04      	ldr	r3, [sp, #16]
 80061d6:	429e      	cmp	r6, r3
 80061d8:	dc01      	bgt.n	80061de <__kernel_rem_pio2+0x4b6>
 80061da:	45b0      	cmp	r8, r6
 80061dc:	daeb      	bge.n	80061b6 <__kernel_rem_pio2+0x48e>
 80061de:	ab48      	add	r3, sp, #288	; 0x120
 80061e0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80061e4:	e9c3 4500 	strd	r4, r5, [r3]
 80061e8:	3f01      	subs	r7, #1
 80061ea:	f108 0801 	add.w	r8, r8, #1
 80061ee:	e6ff      	b.n	8005ff0 <__kernel_rem_pio2+0x2c8>
 80061f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	dc0b      	bgt.n	800620e <__kernel_rem_pio2+0x4e6>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dc6e      	bgt.n	80062d8 <__kernel_rem_pio2+0x5b0>
 80061fa:	d045      	beq.n	8006288 <__kernel_rem_pio2+0x560>
 80061fc:	9b07      	ldr	r3, [sp, #28]
 80061fe:	f003 0007 	and.w	r0, r3, #7
 8006202:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006206:	ecbd 8b02 	vpop	{d8}
 800620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006210:	2b03      	cmp	r3, #3
 8006212:	d1f3      	bne.n	80061fc <__kernel_rem_pio2+0x4d4>
 8006214:	ab48      	add	r3, sp, #288	; 0x120
 8006216:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800621a:	46d0      	mov	r8, sl
 800621c:	46d9      	mov	r9, fp
 800621e:	f1b9 0f00 	cmp.w	r9, #0
 8006222:	f1a8 0808 	sub.w	r8, r8, #8
 8006226:	dc64      	bgt.n	80062f2 <__kernel_rem_pio2+0x5ca>
 8006228:	465c      	mov	r4, fp
 800622a:	2c01      	cmp	r4, #1
 800622c:	f1aa 0a08 	sub.w	sl, sl, #8
 8006230:	dc7e      	bgt.n	8006330 <__kernel_rem_pio2+0x608>
 8006232:	2000      	movs	r0, #0
 8006234:	2100      	movs	r1, #0
 8006236:	f1bb 0f01 	cmp.w	fp, #1
 800623a:	f300 8097 	bgt.w	800636c <__kernel_rem_pio2+0x644>
 800623e:	9b02      	ldr	r3, [sp, #8]
 8006240:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8006244:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8006248:	2b00      	cmp	r3, #0
 800624a:	f040 8099 	bne.w	8006380 <__kernel_rem_pio2+0x658>
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	e9c3 5600 	strd	r5, r6, [r3]
 8006254:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006258:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800625c:	e7ce      	b.n	80061fc <__kernel_rem_pio2+0x4d4>
 800625e:	ab48      	add	r3, sp, #288	; 0x120
 8006260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f7fa f810 	bl	800028c <__adddf3>
 800626c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006270:	f1bb 0f00 	cmp.w	fp, #0
 8006274:	daf3      	bge.n	800625e <__kernel_rem_pio2+0x536>
 8006276:	9b02      	ldr	r3, [sp, #8]
 8006278:	b113      	cbz	r3, 8006280 <__kernel_rem_pio2+0x558>
 800627a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800627e:	4619      	mov	r1, r3
 8006280:	9b01      	ldr	r3, [sp, #4]
 8006282:	e9c3 0100 	strd	r0, r1, [r3]
 8006286:	e7b9      	b.n	80061fc <__kernel_rem_pio2+0x4d4>
 8006288:	2000      	movs	r0, #0
 800628a:	2100      	movs	r1, #0
 800628c:	e7f0      	b.n	8006270 <__kernel_rem_pio2+0x548>
 800628e:	ab48      	add	r3, sp, #288	; 0x120
 8006290:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f7f9 fff8 	bl	800028c <__adddf3>
 800629c:	3c01      	subs	r4, #1
 800629e:	2c00      	cmp	r4, #0
 80062a0:	daf5      	bge.n	800628e <__kernel_rem_pio2+0x566>
 80062a2:	9b02      	ldr	r3, [sp, #8]
 80062a4:	b1e3      	cbz	r3, 80062e0 <__kernel_rem_pio2+0x5b8>
 80062a6:	4602      	mov	r2, r0
 80062a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062ac:	9c01      	ldr	r4, [sp, #4]
 80062ae:	e9c4 2300 	strd	r2, r3, [r4]
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80062ba:	f7f9 ffe5 	bl	8000288 <__aeabi_dsub>
 80062be:	ad4a      	add	r5, sp, #296	; 0x128
 80062c0:	2401      	movs	r4, #1
 80062c2:	45a3      	cmp	fp, r4
 80062c4:	da0f      	bge.n	80062e6 <__kernel_rem_pio2+0x5be>
 80062c6:	9b02      	ldr	r3, [sp, #8]
 80062c8:	b113      	cbz	r3, 80062d0 <__kernel_rem_pio2+0x5a8>
 80062ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80062ce:	4619      	mov	r1, r3
 80062d0:	9b01      	ldr	r3, [sp, #4]
 80062d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80062d6:	e791      	b.n	80061fc <__kernel_rem_pio2+0x4d4>
 80062d8:	465c      	mov	r4, fp
 80062da:	2000      	movs	r0, #0
 80062dc:	2100      	movs	r1, #0
 80062de:	e7de      	b.n	800629e <__kernel_rem_pio2+0x576>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	e7e2      	b.n	80062ac <__kernel_rem_pio2+0x584>
 80062e6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80062ea:	f7f9 ffcf 	bl	800028c <__adddf3>
 80062ee:	3401      	adds	r4, #1
 80062f0:	e7e7      	b.n	80062c2 <__kernel_rem_pio2+0x59a>
 80062f2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80062f6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80062fa:	4620      	mov	r0, r4
 80062fc:	4632      	mov	r2, r6
 80062fe:	463b      	mov	r3, r7
 8006300:	4629      	mov	r1, r5
 8006302:	f7f9 ffc3 	bl	800028c <__adddf3>
 8006306:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7f9 ffb9 	bl	8000288 <__aeabi_dsub>
 8006316:	4632      	mov	r2, r6
 8006318:	463b      	mov	r3, r7
 800631a:	f7f9 ffb7 	bl	800028c <__adddf3>
 800631e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006322:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8006326:	ed88 7b00 	vstr	d7, [r8]
 800632a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800632e:	e776      	b.n	800621e <__kernel_rem_pio2+0x4f6>
 8006330:	e9da 8900 	ldrd	r8, r9, [sl]
 8006334:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006338:	4640      	mov	r0, r8
 800633a:	4632      	mov	r2, r6
 800633c:	463b      	mov	r3, r7
 800633e:	4649      	mov	r1, r9
 8006340:	f7f9 ffa4 	bl	800028c <__adddf3>
 8006344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4640      	mov	r0, r8
 800634e:	4649      	mov	r1, r9
 8006350:	f7f9 ff9a 	bl	8000288 <__aeabi_dsub>
 8006354:	4632      	mov	r2, r6
 8006356:	463b      	mov	r3, r7
 8006358:	f7f9 ff98 	bl	800028c <__adddf3>
 800635c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006360:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006364:	ed8a 7b00 	vstr	d7, [sl]
 8006368:	3c01      	subs	r4, #1
 800636a:	e75e      	b.n	800622a <__kernel_rem_pio2+0x502>
 800636c:	ab48      	add	r3, sp, #288	; 0x120
 800636e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7f9 ff89 	bl	800028c <__adddf3>
 800637a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800637e:	e75a      	b.n	8006236 <__kernel_rem_pio2+0x50e>
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	9a01      	ldr	r2, [sp, #4]
 8006384:	601d      	str	r5, [r3, #0]
 8006386:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800638a:	605c      	str	r4, [r3, #4]
 800638c:	609f      	str	r7, [r3, #8]
 800638e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006392:	60d3      	str	r3, [r2, #12]
 8006394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006398:	6110      	str	r0, [r2, #16]
 800639a:	6153      	str	r3, [r2, #20]
 800639c:	e72e      	b.n	80061fc <__kernel_rem_pio2+0x4d4>
 800639e:	bf00      	nop
 80063a0:	41700000 	.word	0x41700000
 80063a4:	3e700000 	.word	0x3e700000

080063a8 <__kernel_sin>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	ed2d 8b04 	vpush	{d8-d9}
 80063b0:	eeb0 8a41 	vmov.f32	s16, s2
 80063b4:	eef0 8a61 	vmov.f32	s17, s3
 80063b8:	ec55 4b10 	vmov	r4, r5, d0
 80063bc:	b083      	sub	sp, #12
 80063be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80063c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80063c6:	9001      	str	r0, [sp, #4]
 80063c8:	da06      	bge.n	80063d8 <__kernel_sin+0x30>
 80063ca:	ee10 0a10 	vmov	r0, s0
 80063ce:	4629      	mov	r1, r5
 80063d0:	f7fa fbac 	bl	8000b2c <__aeabi_d2iz>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d051      	beq.n	800647c <__kernel_sin+0xd4>
 80063d8:	4622      	mov	r2, r4
 80063da:	462b      	mov	r3, r5
 80063dc:	4620      	mov	r0, r4
 80063de:	4629      	mov	r1, r5
 80063e0:	f7fa f90a 	bl	80005f8 <__aeabi_dmul>
 80063e4:	4682      	mov	sl, r0
 80063e6:	468b      	mov	fp, r1
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7fa f902 	bl	80005f8 <__aeabi_dmul>
 80063f4:	a341      	add	r3, pc, #260	; (adr r3, 80064fc <__kernel_sin+0x154>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	4680      	mov	r8, r0
 80063fc:	4689      	mov	r9, r1
 80063fe:	4650      	mov	r0, sl
 8006400:	4659      	mov	r1, fp
 8006402:	f7fa f8f9 	bl	80005f8 <__aeabi_dmul>
 8006406:	a33f      	add	r3, pc, #252	; (adr r3, 8006504 <__kernel_sin+0x15c>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7f9 ff3c 	bl	8000288 <__aeabi_dsub>
 8006410:	4652      	mov	r2, sl
 8006412:	465b      	mov	r3, fp
 8006414:	f7fa f8f0 	bl	80005f8 <__aeabi_dmul>
 8006418:	a33c      	add	r3, pc, #240	; (adr r3, 800650c <__kernel_sin+0x164>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f7f9 ff35 	bl	800028c <__adddf3>
 8006422:	4652      	mov	r2, sl
 8006424:	465b      	mov	r3, fp
 8006426:	f7fa f8e7 	bl	80005f8 <__aeabi_dmul>
 800642a:	a33a      	add	r3, pc, #232	; (adr r3, 8006514 <__kernel_sin+0x16c>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7f9 ff2a 	bl	8000288 <__aeabi_dsub>
 8006434:	4652      	mov	r2, sl
 8006436:	465b      	mov	r3, fp
 8006438:	f7fa f8de 	bl	80005f8 <__aeabi_dmul>
 800643c:	a337      	add	r3, pc, #220	; (adr r3, 800651c <__kernel_sin+0x174>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7f9 ff23 	bl	800028c <__adddf3>
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	4606      	mov	r6, r0
 800644a:	460f      	mov	r7, r1
 800644c:	b9eb      	cbnz	r3, 800648a <__kernel_sin+0xe2>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4650      	mov	r0, sl
 8006454:	4659      	mov	r1, fp
 8006456:	f7fa f8cf 	bl	80005f8 <__aeabi_dmul>
 800645a:	a325      	add	r3, pc, #148	; (adr r3, 80064f0 <__kernel_sin+0x148>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f7f9 ff12 	bl	8000288 <__aeabi_dsub>
 8006464:	4642      	mov	r2, r8
 8006466:	464b      	mov	r3, r9
 8006468:	f7fa f8c6 	bl	80005f8 <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4620      	mov	r0, r4
 8006472:	4629      	mov	r1, r5
 8006474:	f7f9 ff0a 	bl	800028c <__adddf3>
 8006478:	4604      	mov	r4, r0
 800647a:	460d      	mov	r5, r1
 800647c:	ec45 4b10 	vmov	d0, r4, r5
 8006480:	b003      	add	sp, #12
 8006482:	ecbd 8b04 	vpop	{d8-d9}
 8006486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648a:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <__kernel_sin+0x150>)
 800648c:	ec51 0b18 	vmov	r0, r1, d8
 8006490:	2200      	movs	r2, #0
 8006492:	f7fa f8b1 	bl	80005f8 <__aeabi_dmul>
 8006496:	4632      	mov	r2, r6
 8006498:	ec41 0b19 	vmov	d9, r0, r1
 800649c:	463b      	mov	r3, r7
 800649e:	4640      	mov	r0, r8
 80064a0:	4649      	mov	r1, r9
 80064a2:	f7fa f8a9 	bl	80005f8 <__aeabi_dmul>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	ec51 0b19 	vmov	r0, r1, d9
 80064ae:	f7f9 feeb 	bl	8000288 <__aeabi_dsub>
 80064b2:	4652      	mov	r2, sl
 80064b4:	465b      	mov	r3, fp
 80064b6:	f7fa f89f 	bl	80005f8 <__aeabi_dmul>
 80064ba:	ec53 2b18 	vmov	r2, r3, d8
 80064be:	f7f9 fee3 	bl	8000288 <__aeabi_dsub>
 80064c2:	a30b      	add	r3, pc, #44	; (adr r3, 80064f0 <__kernel_sin+0x148>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	4606      	mov	r6, r0
 80064ca:	460f      	mov	r7, r1
 80064cc:	4640      	mov	r0, r8
 80064ce:	4649      	mov	r1, r9
 80064d0:	f7fa f892 	bl	80005f8 <__aeabi_dmul>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	f7f9 fed6 	bl	800028c <__adddf3>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4620      	mov	r0, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7f9 fece 	bl	8000288 <__aeabi_dsub>
 80064ec:	e7c4      	b.n	8006478 <__kernel_sin+0xd0>
 80064ee:	bf00      	nop
 80064f0:	55555549 	.word	0x55555549
 80064f4:	3fc55555 	.word	0x3fc55555
 80064f8:	3fe00000 	.word	0x3fe00000
 80064fc:	5acfd57c 	.word	0x5acfd57c
 8006500:	3de5d93a 	.word	0x3de5d93a
 8006504:	8a2b9ceb 	.word	0x8a2b9ceb
 8006508:	3e5ae5e6 	.word	0x3e5ae5e6
 800650c:	57b1fe7d 	.word	0x57b1fe7d
 8006510:	3ec71de3 	.word	0x3ec71de3
 8006514:	19c161d5 	.word	0x19c161d5
 8006518:	3f2a01a0 	.word	0x3f2a01a0
 800651c:	1110f8a6 	.word	0x1110f8a6
 8006520:	3f811111 	.word	0x3f811111

08006524 <fabs>:
 8006524:	ec51 0b10 	vmov	r0, r1, d0
 8006528:	ee10 2a10 	vmov	r2, s0
 800652c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006530:	ec43 2b10 	vmov	d0, r2, r3
 8006534:	4770      	bx	lr
	...

08006538 <floor>:
 8006538:	ec51 0b10 	vmov	r0, r1, d0
 800653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006540:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006544:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006548:	2e13      	cmp	r6, #19
 800654a:	ee10 5a10 	vmov	r5, s0
 800654e:	ee10 8a10 	vmov	r8, s0
 8006552:	460c      	mov	r4, r1
 8006554:	dc32      	bgt.n	80065bc <floor+0x84>
 8006556:	2e00      	cmp	r6, #0
 8006558:	da14      	bge.n	8006584 <floor+0x4c>
 800655a:	a333      	add	r3, pc, #204	; (adr r3, 8006628 <floor+0xf0>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7f9 fe94 	bl	800028c <__adddf3>
 8006564:	2200      	movs	r2, #0
 8006566:	2300      	movs	r3, #0
 8006568:	f7fa fad6 	bl	8000b18 <__aeabi_dcmpgt>
 800656c:	b138      	cbz	r0, 800657e <floor+0x46>
 800656e:	2c00      	cmp	r4, #0
 8006570:	da57      	bge.n	8006622 <floor+0xea>
 8006572:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006576:	431d      	orrs	r5, r3
 8006578:	d001      	beq.n	800657e <floor+0x46>
 800657a:	4c2d      	ldr	r4, [pc, #180]	; (8006630 <floor+0xf8>)
 800657c:	2500      	movs	r5, #0
 800657e:	4621      	mov	r1, r4
 8006580:	4628      	mov	r0, r5
 8006582:	e025      	b.n	80065d0 <floor+0x98>
 8006584:	4f2b      	ldr	r7, [pc, #172]	; (8006634 <floor+0xfc>)
 8006586:	4137      	asrs	r7, r6
 8006588:	ea01 0307 	and.w	r3, r1, r7
 800658c:	4303      	orrs	r3, r0
 800658e:	d01f      	beq.n	80065d0 <floor+0x98>
 8006590:	a325      	add	r3, pc, #148	; (adr r3, 8006628 <floor+0xf0>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f7f9 fe79 	bl	800028c <__adddf3>
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	f7fa fabb 	bl	8000b18 <__aeabi_dcmpgt>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d0eb      	beq.n	800657e <floor+0x46>
 80065a6:	2c00      	cmp	r4, #0
 80065a8:	bfbe      	ittt	lt
 80065aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80065ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80065b2:	19a4      	addlt	r4, r4, r6
 80065b4:	ea24 0407 	bic.w	r4, r4, r7
 80065b8:	2500      	movs	r5, #0
 80065ba:	e7e0      	b.n	800657e <floor+0x46>
 80065bc:	2e33      	cmp	r6, #51	; 0x33
 80065be:	dd0b      	ble.n	80065d8 <floor+0xa0>
 80065c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80065c4:	d104      	bne.n	80065d0 <floor+0x98>
 80065c6:	ee10 2a10 	vmov	r2, s0
 80065ca:	460b      	mov	r3, r1
 80065cc:	f7f9 fe5e 	bl	800028c <__adddf3>
 80065d0:	ec41 0b10 	vmov	d0, r0, r1
 80065d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065e0:	fa23 f707 	lsr.w	r7, r3, r7
 80065e4:	4207      	tst	r7, r0
 80065e6:	d0f3      	beq.n	80065d0 <floor+0x98>
 80065e8:	a30f      	add	r3, pc, #60	; (adr r3, 8006628 <floor+0xf0>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7f9 fe4d 	bl	800028c <__adddf3>
 80065f2:	2200      	movs	r2, #0
 80065f4:	2300      	movs	r3, #0
 80065f6:	f7fa fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d0bf      	beq.n	800657e <floor+0x46>
 80065fe:	2c00      	cmp	r4, #0
 8006600:	da02      	bge.n	8006608 <floor+0xd0>
 8006602:	2e14      	cmp	r6, #20
 8006604:	d103      	bne.n	800660e <floor+0xd6>
 8006606:	3401      	adds	r4, #1
 8006608:	ea25 0507 	bic.w	r5, r5, r7
 800660c:	e7b7      	b.n	800657e <floor+0x46>
 800660e:	2301      	movs	r3, #1
 8006610:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006614:	fa03 f606 	lsl.w	r6, r3, r6
 8006618:	4435      	add	r5, r6
 800661a:	4545      	cmp	r5, r8
 800661c:	bf38      	it	cc
 800661e:	18e4      	addcc	r4, r4, r3
 8006620:	e7f2      	b.n	8006608 <floor+0xd0>
 8006622:	2500      	movs	r5, #0
 8006624:	462c      	mov	r4, r5
 8006626:	e7aa      	b.n	800657e <floor+0x46>
 8006628:	8800759c 	.word	0x8800759c
 800662c:	7e37e43c 	.word	0x7e37e43c
 8006630:	bff00000 	.word	0xbff00000
 8006634:	000fffff 	.word	0x000fffff

08006638 <scalbn>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	ec55 4b10 	vmov	r4, r5, d0
 800663e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006642:	4606      	mov	r6, r0
 8006644:	462b      	mov	r3, r5
 8006646:	b99a      	cbnz	r2, 8006670 <scalbn+0x38>
 8006648:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800664c:	4323      	orrs	r3, r4
 800664e:	d036      	beq.n	80066be <scalbn+0x86>
 8006650:	4b39      	ldr	r3, [pc, #228]	; (8006738 <scalbn+0x100>)
 8006652:	4629      	mov	r1, r5
 8006654:	ee10 0a10 	vmov	r0, s0
 8006658:	2200      	movs	r2, #0
 800665a:	f7f9 ffcd 	bl	80005f8 <__aeabi_dmul>
 800665e:	4b37      	ldr	r3, [pc, #220]	; (800673c <scalbn+0x104>)
 8006660:	429e      	cmp	r6, r3
 8006662:	4604      	mov	r4, r0
 8006664:	460d      	mov	r5, r1
 8006666:	da10      	bge.n	800668a <scalbn+0x52>
 8006668:	a32b      	add	r3, pc, #172	; (adr r3, 8006718 <scalbn+0xe0>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	e03a      	b.n	80066e6 <scalbn+0xae>
 8006670:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006674:	428a      	cmp	r2, r1
 8006676:	d10c      	bne.n	8006692 <scalbn+0x5a>
 8006678:	ee10 2a10 	vmov	r2, s0
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f7f9 fe04 	bl	800028c <__adddf3>
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	e019      	b.n	80066be <scalbn+0x86>
 800668a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800668e:	460b      	mov	r3, r1
 8006690:	3a36      	subs	r2, #54	; 0x36
 8006692:	4432      	add	r2, r6
 8006694:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006698:	428a      	cmp	r2, r1
 800669a:	dd08      	ble.n	80066ae <scalbn+0x76>
 800669c:	2d00      	cmp	r5, #0
 800669e:	a120      	add	r1, pc, #128	; (adr r1, 8006720 <scalbn+0xe8>)
 80066a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066a4:	da1c      	bge.n	80066e0 <scalbn+0xa8>
 80066a6:	a120      	add	r1, pc, #128	; (adr r1, 8006728 <scalbn+0xf0>)
 80066a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ac:	e018      	b.n	80066e0 <scalbn+0xa8>
 80066ae:	2a00      	cmp	r2, #0
 80066b0:	dd08      	ble.n	80066c4 <scalbn+0x8c>
 80066b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066be:	ec45 4b10 	vmov	d0, r4, r5
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066c8:	da19      	bge.n	80066fe <scalbn+0xc6>
 80066ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066ce:	429e      	cmp	r6, r3
 80066d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80066d4:	dd0a      	ble.n	80066ec <scalbn+0xb4>
 80066d6:	a112      	add	r1, pc, #72	; (adr r1, 8006720 <scalbn+0xe8>)
 80066d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e2      	bne.n	80066a6 <scalbn+0x6e>
 80066e0:	a30f      	add	r3, pc, #60	; (adr r3, 8006720 <scalbn+0xe8>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f7f9 ff87 	bl	80005f8 <__aeabi_dmul>
 80066ea:	e7cb      	b.n	8006684 <scalbn+0x4c>
 80066ec:	a10a      	add	r1, pc, #40	; (adr r1, 8006718 <scalbn+0xe0>)
 80066ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0b8      	beq.n	8006668 <scalbn+0x30>
 80066f6:	a10e      	add	r1, pc, #56	; (adr r1, 8006730 <scalbn+0xf8>)
 80066f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066fc:	e7b4      	b.n	8006668 <scalbn+0x30>
 80066fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006702:	3236      	adds	r2, #54	; 0x36
 8006704:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006708:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800670c:	4620      	mov	r0, r4
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <scalbn+0x108>)
 8006710:	2200      	movs	r2, #0
 8006712:	e7e8      	b.n	80066e6 <scalbn+0xae>
 8006714:	f3af 8000 	nop.w
 8006718:	c2f8f359 	.word	0xc2f8f359
 800671c:	01a56e1f 	.word	0x01a56e1f
 8006720:	8800759c 	.word	0x8800759c
 8006724:	7e37e43c 	.word	0x7e37e43c
 8006728:	8800759c 	.word	0x8800759c
 800672c:	fe37e43c 	.word	0xfe37e43c
 8006730:	c2f8f359 	.word	0xc2f8f359
 8006734:	81a56e1f 	.word	0x81a56e1f
 8006738:	43500000 	.word	0x43500000
 800673c:	ffff3cb0 	.word	0xffff3cb0
 8006740:	3c900000 	.word	0x3c900000

08006744 <_init>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr

08006750 <_fini>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr

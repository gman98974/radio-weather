
sineWave_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc4  080001a8  080001a8  000101a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08003d70  08003d70  00013d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe8  08003fe8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0000282c  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002848  20002848  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000046b6  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bf2  00000000  00000000  00024702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a0  00000000  00000000  000252f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000248  00000000  00000000  00025598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198ef  00000000  00000000  000257e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002dcd  00000000  00000000  0003f0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e4ba  00000000  00000000  00041e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d0356  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000db8  00000000  00000000  000d03ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08003d54 	.word	0x08003d54

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000020 	.word	0x20000020
 80001e4:	08003d54 	.word	0x08003d54

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_d2iz>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a9c:	d215      	bcs.n	8000aca <__aeabi_d2iz+0x36>
 8000a9e:	d511      	bpl.n	8000ac4 <__aeabi_d2iz+0x30>
 8000aa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa8:	d912      	bls.n	8000ad0 <__aeabi_d2iz+0x3c>
 8000aaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	bf18      	it	ne
 8000ac0:	4240      	negne	r0, r0
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d105      	bne.n	8000adc <__aeabi_d2iz+0x48>
 8000ad0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad4:	bf08      	it	eq
 8000ad6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2f>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aec:	bf24      	itt	cs
 8000aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af6:	d90d      	bls.n	8000b14 <__aeabi_d2f+0x30>
 8000af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b0c:	bf08      	it	eq
 8000b0e:	f020 0001 	biceq.w	r0, r0, #1
 8000b12:	4770      	bx	lr
 8000b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b18:	d121      	bne.n	8000b5e <__aeabi_d2f+0x7a>
 8000b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1e:	bfbc      	itt	lt
 8000b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	4770      	bxlt	lr
 8000b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2e:	f1c2 0218 	rsb	r2, r2, #24
 8000b32:	f1c2 0c20 	rsb	ip, r2, #32
 8000b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3e:	bf18      	it	ne
 8000b40:	f040 0001 	orrne.w	r0, r0, #1
 8000b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b50:	ea40 000c 	orr.w	r0, r0, ip
 8000b54:	fa23 f302 	lsr.w	r3, r3, r2
 8000b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b5c:	e7cc      	b.n	8000af8 <__aeabi_d2f+0x14>
 8000b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b62:	d107      	bne.n	8000b74 <__aeabi_d2f+0x90>
 8000b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b68:	bf1e      	ittt	ne
 8000b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b72:	4770      	bxne	lr
 8000b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_uldivmod>:
 8000b84:	b953      	cbnz	r3, 8000b9c <__aeabi_uldivmod+0x18>
 8000b86:	b94a      	cbnz	r2, 8000b9c <__aeabi_uldivmod+0x18>
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	2800      	cmpeq	r0, #0
 8000b8e:	bf1c      	itt	ne
 8000b90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b98:	f000 b96e 	b.w	8000e78 <__aeabi_idiv0>
 8000b9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba4:	f000 f806 	bl	8000bb4 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4770      	bx	lr

08000bb4 <__udivmoddi4>:
 8000bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb8:	9d08      	ldr	r5, [sp, #32]
 8000bba:	4604      	mov	r4, r0
 8000bbc:	468c      	mov	ip, r1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8083 	bne.w	8000cca <__udivmoddi4+0x116>
 8000bc4:	428a      	cmp	r2, r1
 8000bc6:	4617      	mov	r7, r2
 8000bc8:	d947      	bls.n	8000c5a <__udivmoddi4+0xa6>
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	b142      	cbz	r2, 8000be2 <__udivmoddi4+0x2e>
 8000bd0:	f1c2 0020 	rsb	r0, r2, #32
 8000bd4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	4097      	lsls	r7, r2
 8000bdc:	ea40 0c01 	orr.w	ip, r0, r1
 8000be0:	4094      	lsls	r4, r2
 8000be2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000be6:	0c23      	lsrs	r3, r4, #16
 8000be8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bec:	fa1f fe87 	uxth.w	lr, r7
 8000bf0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x60>
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c06:	f080 8119 	bcs.w	8000e3c <__udivmoddi4+0x288>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 8116 	bls.w	8000e3c <__udivmoddi4+0x288>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	443b      	add	r3, r7
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c28:	45a6      	cmp	lr, r4
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x8c>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c32:	f080 8105 	bcs.w	8000e40 <__udivmoddi4+0x28c>
 8000c36:	45a6      	cmp	lr, r4
 8000c38:	f240 8102 	bls.w	8000e40 <__udivmoddi4+0x28c>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	443c      	add	r4, r7
 8000c40:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c44:	eba4 040e 	sub.w	r4, r4, lr
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa0>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	b902      	cbnz	r2, 8000c5e <__udivmoddi4+0xaa>
 8000c5c:	deff      	udf	#255	; 0xff
 8000c5e:	fab2 f282 	clz	r2, r2
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d150      	bne.n	8000d08 <__udivmoddi4+0x154>
 8000c66:	1bcb      	subs	r3, r1, r7
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	fa1f f887 	uxth.w	r8, r7
 8000c70:	2601      	movs	r6, #1
 8000c72:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c76:	0c21      	lsrs	r1, r4, #16
 8000c78:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c80:	fb08 f30c 	mul.w	r3, r8, ip
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xe4>
 8000c88:	1879      	adds	r1, r7, r1
 8000c8a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0xe2>
 8000c90:	428b      	cmp	r3, r1
 8000c92:	f200 80e9 	bhi.w	8000e68 <__udivmoddi4+0x2b4>
 8000c96:	4684      	mov	ip, r0
 8000c98:	1ac9      	subs	r1, r1, r3
 8000c9a:	b2a3      	uxth	r3, r4
 8000c9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca8:	fb08 f800 	mul.w	r8, r8, r0
 8000cac:	45a0      	cmp	r8, r4
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x10c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x10a>
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	f200 80d9 	bhi.w	8000e70 <__udivmoddi4+0x2bc>
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	eba4 0408 	sub.w	r4, r4, r8
 8000cc4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc8:	e7bf      	b.n	8000c4a <__udivmoddi4+0x96>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d909      	bls.n	8000ce2 <__udivmoddi4+0x12e>
 8000cce:	2d00      	cmp	r5, #0
 8000cd0:	f000 80b1 	beq.w	8000e36 <__udivmoddi4+0x282>
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cda:	4630      	mov	r0, r6
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	fab3 f683 	clz	r6, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d14a      	bne.n	8000d80 <__udivmoddi4+0x1cc>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0x140>
 8000cee:	4282      	cmp	r2, r0
 8000cf0:	f200 80b8 	bhi.w	8000e64 <__udivmoddi4+0x2b0>
 8000cf4:	1a84      	subs	r4, r0, r2
 8000cf6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	468c      	mov	ip, r1
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d0a8      	beq.n	8000c54 <__udivmoddi4+0xa0>
 8000d02:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0xa0>
 8000d08:	f1c2 0320 	rsb	r3, r2, #32
 8000d0c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d10:	4097      	lsls	r7, r2
 8000d12:	fa01 f002 	lsl.w	r0, r1, r2
 8000d16:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1a:	40d9      	lsrs	r1, r3
 8000d1c:	4330      	orrs	r0, r6
 8000d1e:	0c03      	lsrs	r3, r0, #16
 8000d20:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d24:	fa1f f887 	uxth.w	r8, r7
 8000d28:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d30:	fb06 f108 	mul.w	r1, r6, r8
 8000d34:	4299      	cmp	r1, r3
 8000d36:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3a:	d909      	bls.n	8000d50 <__udivmoddi4+0x19c>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d42:	f080 808d 	bcs.w	8000e60 <__udivmoddi4+0x2ac>
 8000d46:	4299      	cmp	r1, r3
 8000d48:	f240 808a 	bls.w	8000e60 <__udivmoddi4+0x2ac>
 8000d4c:	3e02      	subs	r6, #2
 8000d4e:	443b      	add	r3, r7
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	b281      	uxth	r1, r0
 8000d54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d60:	fb00 f308 	mul.w	r3, r0, r8
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x1c4>
 8000d68:	1879      	adds	r1, r7, r1
 8000d6a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d6e:	d273      	bcs.n	8000e58 <__udivmoddi4+0x2a4>
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d971      	bls.n	8000e58 <__udivmoddi4+0x2a4>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4439      	add	r1, r7
 8000d78:	1acb      	subs	r3, r1, r3
 8000d7a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d7e:	e778      	b.n	8000c72 <__udivmoddi4+0xbe>
 8000d80:	f1c6 0c20 	rsb	ip, r6, #32
 8000d84:	fa03 f406 	lsl.w	r4, r3, r6
 8000d88:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d8c:	431c      	orrs	r4, r3
 8000d8e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d92:	fa01 f306 	lsl.w	r3, r1, r6
 8000d96:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d9e:	431f      	orrs	r7, r3
 8000da0:	0c3b      	lsrs	r3, r7, #16
 8000da2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da6:	fa1f f884 	uxth.w	r8, r4
 8000daa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dae:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db2:	fb09 fa08 	mul.w	sl, r9, r8
 8000db6:	458a      	cmp	sl, r1
 8000db8:	fa02 f206 	lsl.w	r2, r2, r6
 8000dbc:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x220>
 8000dc2:	1861      	adds	r1, r4, r1
 8000dc4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dc8:	d248      	bcs.n	8000e5c <__udivmoddi4+0x2a8>
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	d946      	bls.n	8000e5c <__udivmoddi4+0x2a8>
 8000dce:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd2:	4421      	add	r1, r4
 8000dd4:	eba1 010a 	sub.w	r1, r1, sl
 8000dd8:	b2bf      	uxth	r7, r7
 8000dda:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dde:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000de6:	fb00 f808 	mul.w	r8, r0, r8
 8000dea:	45b8      	cmp	r8, r7
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x24a>
 8000dee:	19e7      	adds	r7, r4, r7
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d22e      	bcs.n	8000e54 <__udivmoddi4+0x2a0>
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d92c      	bls.n	8000e54 <__udivmoddi4+0x2a0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4427      	add	r7, r4
 8000dfe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e02:	eba7 0708 	sub.w	r7, r7, r8
 8000e06:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0a:	454f      	cmp	r7, r9
 8000e0c:	46c6      	mov	lr, r8
 8000e0e:	4649      	mov	r1, r9
 8000e10:	d31a      	bcc.n	8000e48 <__udivmoddi4+0x294>
 8000e12:	d017      	beq.n	8000e44 <__udivmoddi4+0x290>
 8000e14:	b15d      	cbz	r5, 8000e2e <__udivmoddi4+0x27a>
 8000e16:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e1e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e22:	40f2      	lsrs	r2, r6
 8000e24:	ea4c 0202 	orr.w	r2, ip, r2
 8000e28:	40f7      	lsrs	r7, r6
 8000e2a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e70b      	b.n	8000c54 <__udivmoddi4+0xa0>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e9      	b.n	8000c14 <__udivmoddi4+0x60>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6fd      	b.n	8000c40 <__udivmoddi4+0x8c>
 8000e44:	4543      	cmp	r3, r8
 8000e46:	d2e5      	bcs.n	8000e14 <__udivmoddi4+0x260>
 8000e48:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e4c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7df      	b.n	8000e14 <__udivmoddi4+0x260>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e7d2      	b.n	8000dfe <__udivmoddi4+0x24a>
 8000e58:	4660      	mov	r0, ip
 8000e5a:	e78d      	b.n	8000d78 <__udivmoddi4+0x1c4>
 8000e5c:	4681      	mov	r9, r0
 8000e5e:	e7b9      	b.n	8000dd4 <__udivmoddi4+0x220>
 8000e60:	4666      	mov	r6, ip
 8000e62:	e775      	b.n	8000d50 <__udivmoddi4+0x19c>
 8000e64:	4630      	mov	r0, r6
 8000e66:	e74a      	b.n	8000cfe <__udivmoddi4+0x14a>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	4439      	add	r1, r7
 8000e6e:	e713      	b.n	8000c98 <__udivmoddi4+0xe4>
 8000e70:	3802      	subs	r0, #2
 8000e72:	443c      	add	r4, r7
 8000e74:	e724      	b.n	8000cc0 <__udivmoddi4+0x10c>
 8000e76:	bf00      	nop

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <Configure_GPIO_Output>:
I2C_TypeDef *AudioI2C = (I2C_TypeDef *) I2C1_BASE;
SPI_TypeDef *AudioI2S = (SPI_TypeDef *) SPI3_BASE;

#define externalClockFrequency 8000000U

void Configure_GPIO_Output(GPIO_TypeDef *port, uint32_t pin, uint32_t speed, int32_t alternate) {
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  // MODER set to "01" (general purpose output) or "02" (alternate function)
  // OTYPER set to "0" (push-pull output)
  // OSPEEDR set to "10" (high-speed)
  // PUPDR set to "00" (no pull-up or pull-down required)
	// AFR set to requested alternate if required (set alternate to -1 if not required).
  unsigned long bitMask = ~(3UL << 2*pin);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	617b      	str	r3, [r7, #20]
	uint16_t mode = (alternate >= 0) ? 2UL : 1UL;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db01      	blt.n	8000fb6 <Configure_GPIO_Output+0x26>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e000      	b.n	8000fb8 <Configure_GPIO_Output+0x28>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	827b      	strh	r3, [r7, #18]
  port->MODER = (port->MODER & bitMask) | (mode << 2*pin);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	8a79      	ldrh	r1, [r7, #18]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	0052      	lsls	r2, r2, #1
 8000fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	601a      	str	r2, [r3, #0]
  port->OTYPER &= ~(1UL << pin);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	605a      	str	r2, [r3, #4]
  port->OSPEEDR = (port->OSPEEDR & bitMask) | ((speed % 3UL) << 2*pin);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	ea02 0003 	and.w	r0, r2, r3
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <Configure_GPIO_Output+0xf8>)
 8000ff4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ff8:	085a      	lsrs	r2, r3, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	1aca      	subs	r2, r1, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	ea40 0203 	orr.w	r2, r0, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	609a      	str	r2, [r3, #8]
  port->PUPDR = (port->PUPDR & bitMask) | (0UL << 2*pin);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	401a      	ands	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	60da      	str	r2, [r3, #12]
	if (alternate >= 0 && pin > 7) port->AFR[1] = (port->AFR[1] & ~(0x0F << 4*(pin-8))) | (alternate << 4*(pin-8));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db16      	blt.n	8001052 <Configure_GPIO_Output+0xc2>
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b07      	cmp	r3, #7
 8001028:	d913      	bls.n	8001052 <Configure_GPIO_Output+0xc2>
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	3a08      	subs	r2, #8
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	210f      	movs	r1, #15
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	43d2      	mvns	r2, r2
 800103c:	4013      	ands	r3, r2
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	3a08      	subs	r2, #8
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	6839      	ldr	r1, [r7, #0]
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	431a      	orrs	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
	else if (alternate >= 0) port->AFR[0] = (port->AFR[0] & ~(0x0F << 4*pin)) | (alternate << 4*pin);	
}	
 8001050:	e013      	b.n	800107a <Configure_GPIO_Output+0xea>
	else if (alternate >= 0) port->AFR[0] = (port->AFR[0] & ~(0x0F << 4*pin)) | (alternate << 4*pin);	
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db10      	blt.n	800107a <Configure_GPIO_Output+0xea>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	0092      	lsls	r2, r2, #2
 8001060:	210f      	movs	r1, #15
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	43d2      	mvns	r2, r2
 8001068:	4013      	ands	r3, r2
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	431a      	orrs	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	621a      	str	r2, [r3, #32]
}	
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	aaaaaaab 	.word	0xaaaaaaab

0800108c <initAudioTimer>:
///////////////////////////////////////////////////////////////////////////////////////
// I'm going to need a timeout function which doesn't use the system timer.
// I'll use TIM11 for this.  No particular reason, and I'll make it easy to change this
// if required (any counter from TIM10, TIM11, TIM13 or TIM14 should work fine).
static TIM_TypeDef * audioTimer = TIM11;
void initAudioTimer() {
 800108c:	b4b0      	push	{r4, r5, r7}
 800108e:	b08b      	sub	sp, #44	; 0x2c
 8001090:	af00      	add	r7, sp, #0
	// Sets the timer up: enables the clock to it, sets the prescaler, and 
	// calculates the factor to convert milliseconds to the count value.
	if (audioTimer == TIM10) RCC->APB2ENR |= RCC_APB2ENR_TIM10EN;
 8001092:	4b39      	ldr	r3, [pc, #228]	; (8001178 <initAudioTimer+0xec>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a39      	ldr	r2, [pc, #228]	; (800117c <initAudioTimer+0xf0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d106      	bne.n	80010aa <initAudioTimer+0x1e>
 800109c:	4b38      	ldr	r3, [pc, #224]	; (8001180 <initAudioTimer+0xf4>)
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	4a37      	ldr	r2, [pc, #220]	; (8001180 <initAudioTimer+0xf4>)
 80010a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a6:	6453      	str	r3, [r2, #68]	; 0x44
 80010a8:	e022      	b.n	80010f0 <initAudioTimer+0x64>
	else if (audioTimer == TIM11) RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <initAudioTimer+0xec>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a35      	ldr	r2, [pc, #212]	; (8001184 <initAudioTimer+0xf8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d106      	bne.n	80010c2 <initAudioTimer+0x36>
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <initAudioTimer+0xf4>)
 80010b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b8:	4a31      	ldr	r2, [pc, #196]	; (8001180 <initAudioTimer+0xf4>)
 80010ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010be:	6453      	str	r3, [r2, #68]	; 0x44
 80010c0:	e016      	b.n	80010f0 <initAudioTimer+0x64>
	else if (audioTimer == TIM13) RCC->APB1ENR |= RCC_APB1ENR_TIM13EN;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <initAudioTimer+0xec>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a30      	ldr	r2, [pc, #192]	; (8001188 <initAudioTimer+0xfc>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d106      	bne.n	80010da <initAudioTimer+0x4e>
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <initAudioTimer+0xf4>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a2b      	ldr	r2, [pc, #172]	; (8001180 <initAudioTimer+0xf4>)
 80010d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	e00a      	b.n	80010f0 <initAudioTimer+0x64>
	else if (audioTimer == TIM14) RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <initAudioTimer+0xec>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a2b      	ldr	r2, [pc, #172]	; (800118c <initAudioTimer+0x100>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d105      	bne.n	80010f0 <initAudioTimer+0x64>
 80010e4:	4b26      	ldr	r3, [pc, #152]	; (8001180 <initAudioTimer+0xf4>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a25      	ldr	r2, [pc, #148]	; (8001180 <initAudioTimer+0xf4>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
	
	// Disable the timer for now:
	audioTimer->CR1 &= ~TIM_CR1_CEN;
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <initAudioTimer+0xec>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <initAudioTimer+0xec>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
	
	// Work out the APB clock speed:
	uint32_t PPRE2_Factors[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8001100:	4b23      	ldr	r3, [pc, #140]	; (8001190 <initAudioTimer+0x104>)
 8001102:	463c      	mov	r4, r7
 8001104:	461d      	mov	r5, r3
 8001106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800110e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t divideIndex = (RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <initAudioTimer+0xf4>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	0b5b      	lsrs	r3, r3, #13
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t counterSpeed = 2 * SystemCoreClock >> (PPRE2_Factors[divideIndex] % 0x07);
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <initAudioTimer+0x108>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	0058      	lsls	r0, r3, #1
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800112c:	4413      	add	r3, r2
 800112e:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <initAudioTimer+0x10c>)
 8001134:	fba3 2301 	umull	r2, r3, r3, r1
 8001138:	1aca      	subs	r2, r1, r3
 800113a:	0852      	lsrs	r2, r2, #1
 800113c:	4413      	add	r3, r2
 800113e:	089a      	lsrs	r2, r3, #2
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	1aca      	subs	r2, r1, r3
 8001148:	fa20 f302 	lsr.w	r3, r0, r2
 800114c:	623b      	str	r3, [r7, #32]
	TIM11->EGR = TIM_EGR_UG; // Generate an update event to reload the prescaler
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <initAudioTimer+0xf8>)
 8001150:	2201      	movs	r2, #1
 8001152:	615a      	str	r2, [r3, #20]
	
	// Set divider so that the counter counts ten times per millisecond:
	audioTimer->PSC = counterSpeed / 10000 - 1;
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	4a11      	ldr	r2, [pc, #68]	; (800119c <initAudioTimer+0x110>)
 8001158:	fba2 2303 	umull	r2, r3, r2, r3
 800115c:	0b5a      	lsrs	r2, r3, #13
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <initAudioTimer+0xec>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3a01      	subs	r2, #1
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
	audioTimer->CR1 = TIM_CR1_OPM; // Put the counter in one-shot mode
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <initAudioTimer+0xec>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2208      	movs	r2, #8
 800116c:	601a      	str	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	372c      	adds	r7, #44	; 0x2c
 8001172:	46bd      	mov	sp, r7
 8001174:	bcb0      	pop	{r4, r5, r7}
 8001176:	4770      	bx	lr
 8001178:	2000000c 	.word	0x2000000c
 800117c:	40014400 	.word	0x40014400
 8001180:	40023800 	.word	0x40023800
 8001184:	40014800 	.word	0x40014800
 8001188:	40001c00 	.word	0x40001c00
 800118c:	40002000 	.word	0x40002000
 8001190:	08003d70 	.word	0x08003d70
 8001194:	20000018 	.word	0x20000018
 8001198:	24924925 	.word	0x24924925
 800119c:	d1b71759 	.word	0xd1b71759

080011a0 <setAudioTimer>:
void setAudioTimer(uint32_t delayInMilliSeconds) {
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	// Sets the timer so that it takes the specified time to counts up from zero to the auto-reload value,
	// then sets the timer going.  The calling function then just has to wait until the counter overflows.
	// The counter is put into one-pulse mode so that it stops after generating the overflow event.
	audioTimer->CR1 &= ~TIM_CR1_CEN; // Disable the counter
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <setAudioTimer+0x88>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <setAudioTimer+0x88>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
	uint32_t countToWaitFor = (delayInMilliSeconds < 6500) ? 10 * delayInMilliSeconds : 65000;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f641 1263 	movw	r2, #6499	; 0x1963
 80011be:	4293      	cmp	r3, r2
 80011c0:	d805      	bhi.n	80011ce <setAudioTimer+0x2e>
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	e001      	b.n	80011d2 <setAudioTimer+0x32>
 80011ce:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 80011d2:	60fb      	str	r3, [r7, #12]
	audioTimer->CCR1 = countToWaitFor;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <setAudioTimer+0x88>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
	audioTimer->ARR = countToWaitFor;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <setAudioTimer+0x88>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
	audioTimer->CCER |= TIM_CCER_CC1E;  // Enable the compare channel
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <setAudioTimer+0x88>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a1a      	ldr	r2, [r3, #32]
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <setAudioTimer+0x88>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	621a      	str	r2, [r3, #32]
	audioTimer->EGR = TIM_EGR_UG;    // Re-initialise the counter
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <setAudioTimer+0x88>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	615a      	str	r2, [r3, #20]
	audioTimer->SR &= ~0x07;         // Clear status flags before enabling counter
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <setAudioTimer+0x88>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <setAudioTimer+0x88>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0207 	bic.w	r2, r2, #7
 800120a:	611a      	str	r2, [r3, #16]
	audioTimer->CR1 |= TIM_CR1_CEN;  // Enable the counter (again)
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <setAudioTimer+0x88>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <setAudioTimer+0x88>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0201 	orr.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	2000000c 	.word	0x2000000c

0800122c <hasAudioTimerFinished>:
uint32_t hasAudioTimerFinished() {
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	return audioTimer->SR & TIM_SR_CC1IF;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <hasAudioTimerFinished+0x18>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	f003 0302 	and.w	r3, r3, #2
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	2000000c 	.word	0x2000000c

08001248 <audioDelay>:
void audioDelay(uint32_t delayInMilliSeconds) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	setAudioTimer(delayInMilliSeconds);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffa5 	bl	80011a0 <setAudioTimer>
	while (!hasAudioTimerFinished()) {}
 8001256:	bf00      	nop
 8001258:	f7ff ffe8 	bl	800122c <hasAudioTimerFinished>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0fa      	beq.n	8001258 <audioDelay+0x10>
  return;
 8001262:	bf00      	nop
}
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <waitForFlagWithTimeout>:

uint32_t waitForFlagWithTimeout(volatile uint32_t *address, uint32_t bit, uint32_t valueToWaitFor, uint32_t timeoutInMilliSeconds) {
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	603b      	str	r3, [r7, #0]
	// timeoutInMilliSeconds.  If the timeout happens first, it returns 1, otherwise it returns 0.
	// Timeout can be a maximum of 6.5 seconds.
	volatile uint32_t temp;
	
	// Can I return immediately?  If so, don't waste time setting up the timeout timer:
	temp = ((*address) >> bit) & 0x01;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	617b      	str	r3, [r7, #20]
	if (temp == valueToWaitFor) return 0;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d101      	bne.n	8001294 <waitForFlagWithTimeout+0x2a>
 8001290:	2300      	movs	r3, #0
 8001292:	e017      	b.n	80012c4 <waitForFlagWithTimeout+0x5a>
  
	// I'll have to wait...
	setAudioTimer(timeoutInMilliSeconds);
 8001294:	6838      	ldr	r0, [r7, #0]
 8001296:	f7ff ff83 	bl	80011a0 <setAudioTimer>
	while (!hasAudioTimerFinished()) {
 800129a:	e00d      	b.n	80012b8 <waitForFlagWithTimeout+0x4e>
		temp = ((*address) >> bit) & 0x01;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
		if (temp == valueToWaitFor) return 0;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d101      	bne.n	80012b8 <waitForFlagWithTimeout+0x4e>
 80012b4:	2300      	movs	r3, #0
 80012b6:	e005      	b.n	80012c4 <waitForFlagWithTimeout+0x5a>
	while (!hasAudioTimerFinished()) {
 80012b8:	f7ff ffb8 	bl	800122c <hasAudioTimerFinished>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0ec      	beq.n	800129c <waitForFlagWithTimeout+0x32>
	}
	return 1;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <myConfigureI2SClock>:

/////////////////////////////////////////////////////////////////////////////////////
// Next: speed the clock up so it's going at the maximum 168 MHz, and provide some functions
// for working out the clock speeds of the various clocks.
MY_AUDIO_StatusTypeDef myConfigureI2SClock(uint32_t newN, uint32_t newR)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t retValue = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]

  // First disable the I2S clock PLL (and wait until it is disabled):
	RCC->CR &= ~RCC_CR_PLLI2SON;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <myConfigureI2SClock+0x70>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <myConfigureI2SClock+0x70>)
 80012e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80012e4:	6013      	str	r3, [r2, #0]
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_PLLI2SON_Pos, 0, 100);
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	2200      	movs	r2, #0
 80012ea:	211a      	movs	r1, #26
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <myConfigureI2SClock+0x70>)
 80012ee:	f7ff ffbc 	bl	800126a <waitForFlagWithTimeout>
 80012f2:	60f8      	str	r0, [r7, #12]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <myConfigureI2SClock+0x32>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e01a      	b.n	8001334 <myConfigureI2SClock+0x68>
	
	// Then configure the PLL (N = 192, R = 2):
  RCC->PLLI2SCFGR = (newN << RCC_PLLI2SCFGR_PLLI2SN_Pos) | (newR << RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	019a      	lsls	r2, r3, #6
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	071b      	lsls	r3, r3, #28
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <myConfigureI2SClock+0x70>)
 8001308:	4313      	orrs	r3, r2
 800130a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

	// Then enable the PLL again, and ensure that it's running OK:
	RCC->CR |= RCC_CR_PLLI2SON;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <myConfigureI2SClock+0x70>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <myConfigureI2SClock+0x70>)
 8001314:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001318:	6013      	str	r3, [r2, #0]
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_PLLI2SRDY_Pos, 1, 100);
 800131a:	2364      	movs	r3, #100	; 0x64
 800131c:	2201      	movs	r2, #1
 800131e:	211b      	movs	r1, #27
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <myConfigureI2SClock+0x70>)
 8001322:	f7ff ffa2 	bl	800126a <waitForFlagWithTimeout>
 8001326:	60f8      	str	r0, [r7, #12]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <myConfigureI2SClock+0x66>
 800132e:	2303      	movs	r3, #3
 8001330:	e000      	b.n	8001334 <myConfigureI2SClock+0x68>
		
  return MY_AUDIO_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800

08001340 <myConfigureTheMainClockPLL>:
// Take the clock source from the high-speed external (HSE) 16 MHz crystal oscillator
// on the discovery board, and multiply it up by 10.5 using the PLL to give a 168 MHz
// system clock.  The STM32CubeMX utility recommends doing this using PLL values of
// M = 8, N = 336, P = 2, Q = 7.  This gives a 168 MHz PLLCLK as required.
MY_AUDIO_StatusTypeDef myConfigureTheMainClockPLL()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
  uint32_t retValue;

	// First, ensure that the high-speed external oscillator is on:
	RCC->CR |= RCC_CR_HSEON;
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a27      	ldr	r2, [pc, #156]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
  
	// Then wait until the HSE clock is ready and going:
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_HSERDY_Pos, 1, 100);
 8001352:	2364      	movs	r3, #100	; 0x64
 8001354:	2201      	movs	r2, #1
 8001356:	2111      	movs	r1, #17
 8001358:	4823      	ldr	r0, [pc, #140]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 800135a:	f7ff ff86 	bl	800126a <waitForFlagWithTimeout>
 800135e:	6078      	str	r0, [r7, #4]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <myConfigureTheMainClockPLL+0x2a>
 8001366:	2303      	movs	r3, #3
 8001368:	e039      	b.n	80013de <myConfigureTheMainClockPLL+0x9e>

	// Disable the main PLL, and wait for the system to switch over to the HSE clock:
	RCC->CR &= ~RCC_CR_PLLON;
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1e      	ldr	r2, [pc, #120]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 8001370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001374:	6013      	str	r3, [r2, #0]
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_PLLRDY_Pos, 0, 100);
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	2200      	movs	r2, #0
 800137a:	2119      	movs	r1, #25
 800137c:	481a      	ldr	r0, [pc, #104]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 800137e:	f7ff ff74 	bl	800126a <waitForFlagWithTimeout>
 8001382:	6078      	str	r0, [r7, #4]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <myConfigureTheMainClockPLL+0x4e>
 800138a:	2303      	movs	r3, #3
 800138c:	e027      	b.n	80013de <myConfigureTheMainClockPLL+0x9e>

	// Configure the main PLL.  This uses values for the variables of M = 8, N = 336, P = 2, Q = 7.
	uint32_t newPLLConfig = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
	newPLLConfig |= 8 << RCC_PLLCFGR_PLLM_Pos;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	603b      	str	r3, [r7, #0]
	newPLLConfig |= 336 << RCC_PLLCFGR_PLLN_Pos;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 80013a0:	603b      	str	r3, [r7, #0]
	newPLLConfig |= ((2 >> 1) - 1) << RCC_PLLCFGR_PLLP_Pos;
	newPLLConfig |= 7 << RCC_PLLCFGR_PLLQ_Pos;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013a8:	603b      	str	r3, [r7, #0]
	newPLLConfig |= 1 << RCC_PLLCFGR_PLLSRC_Pos;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b0:	603b      	str	r3, [r7, #0]
	RCC->PLLCFGR = newPLLConfig;
 80013b2:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6053      	str	r3, [r2, #4]
	
	// Then re-enable the main PLL, and wait for it to lock and the system to become ready to move on:
	RCC->CR |= RCC_CR_PLLON;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	6013      	str	r3, [r2, #0]
	retValue = waitForFlagWithTimeout(&RCC->CR, RCC_CR_PLLRDY_Pos, 1, 100);
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	2201      	movs	r2, #1
 80013c8:	2119      	movs	r1, #25
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <myConfigureTheMainClockPLL+0xa8>)
 80013cc:	f7ff ff4d 	bl	800126a <waitForFlagWithTimeout>
 80013d0:	6078      	str	r0, [r7, #4]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <myConfigureTheMainClockPLL+0x9c>
 80013d8:	2303      	movs	r3, #3
 80013da:	e000      	b.n	80013de <myConfigureTheMainClockPLL+0x9e>

  return MY_AUDIO_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <myConfigureFlashWaitStatesAndBusClocks>:

// This one configures all the system clocks, now that the master clock has been set to 168 MHz.
MY_AUDIO_StatusTypeDef myConfigureFlashWaitStatesAndBusClocks()
{
 80013ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013f0:	b087      	sub	sp, #28
 80013f2:	af00      	add	r7, sp, #0
  uint32_t retValue;

  // If required, increase the number of flash wait states to five (required for 168 MHz operation)
	// at this supply voltage:
  if(FLASH_ACR_LATENCY_5WS > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013f4:	4b61      	ldr	r3, [pc, #388]	; (800157c <myConfigureFlashWaitStatesAndBusClocks+0x190>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d80f      	bhi.n	8001420 <myConfigureFlashWaitStatesAndBusClocks+0x34>
  {
    // Program the new number of wait states to the LATENCY bits in the FLASH_ACR register, and 
		// check that this has worked:
		FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_ACR_LATENCY_5WS;
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <myConfigureFlashWaitStatesAndBusClocks+0x190>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 0307 	bic.w	r3, r3, #7
 8001408:	4a5c      	ldr	r2, [pc, #368]	; (800157c <myConfigureFlashWaitStatesAndBusClocks+0x190>)
 800140a:	f043 0305 	orr.w	r3, r3, #5
 800140e:	6013      	str	r3, [r2, #0]
		if (FLASH_ACR_LATENCY_5WS != (FLASH->ACR & FLASH_ACR_LATENCY)) return MY_AUDIO_ERROR;
 8001410:	4b5a      	ldr	r3, [pc, #360]	; (800157c <myConfigureFlashWaitStatesAndBusClocks+0x190>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	2b05      	cmp	r3, #5
 800141a:	d001      	beq.n	8001420 <myConfigureFlashWaitStatesAndBusClocks+0x34>
 800141c:	2301      	movs	r3, #1
 800141e:	e0a8      	b.n	8001572 <myConfigureFlashWaitStatesAndBusClocks+0x186>
  }

  // Set the highest APBx dividers in order to ensure that we do not go through
  // a non-spec phase whatever we decrease or increase HCLK.
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE1) | RCC_CFGR_PPRE1_DIV16;
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a56      	ldr	r2, [pc, #344]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800142a:	6093      	str	r3, [r2, #8]
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE2) | RCC_CFGR_PPRE2_DIV16;
 800142c:	4b54      	ldr	r3, [pc, #336]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a53      	ldr	r2, [pc, #332]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001436:	6093      	str	r3, [r2, #8]
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_HPRE) | RCC_CFGR_HPRE_DIV1;
 8001438:	4b51      	ldr	r3, [pc, #324]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a50      	ldr	r2, [pc, #320]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800143e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001442:	6093      	str	r3, [r2, #8]

	if ((RCC->CR & RCC_CR_PLLRDY) == 0) return MY_AUDIO_ERROR;
 8001444:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <myConfigureFlashWaitStatesAndBusClocks+0x68>
 8001450:	2301      	movs	r3, #1
 8001452:	e08e      	b.n	8001572 <myConfigureFlashWaitStatesAndBusClocks+0x186>

	// Ensure that the clock for the system clock is taken from the PLL clock source, and wait
	// until the PLL source is successfully enabled and working:
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_PLL;
 8001454:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f023 0303 	bic.w	r3, r3, #3
 800145c:	4a48      	ldr	r2, [pc, #288]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	6093      	str	r3, [r2, #8]
	retValue = waitForFlagWithTimeout(&RCC->CFGR, 3, 1, 100);
 8001464:	2364      	movs	r3, #100	; 0x64
 8001466:	2201      	movs	r2, #1
 8001468:	2103      	movs	r1, #3
 800146a:	4846      	ldr	r0, [pc, #280]	; (8001584 <myConfigureFlashWaitStatesAndBusClocks+0x198>)
 800146c:	f7ff fefd 	bl	800126a <waitForFlagWithTimeout>
 8001470:	6138      	str	r0, [r7, #16]
	if (retValue != 0) return MY_AUDIO_TIMEOUT;
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <myConfigureFlashWaitStatesAndBusClocks+0x90>
 8001478:	2303      	movs	r3, #3
 800147a:	e07a      	b.n	8001572 <myConfigureFlashWaitStatesAndBusClocks+0x186>
	
	// Set-up the PCLK1 as HCLK divided by four:
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE1) | RCC_CFGR_PPRE1_DIV4;
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001484:	4a3e      	ldr	r2, [pc, #248]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001486:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800148a:	6093      	str	r3, [r2, #8]
	
	// Set-up the PCLK2 as HCLK divided by two:
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PPRE2) | RCC_CFGR_PPRE1_DIV2;
 800148c:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001494:	4a3a      	ldr	r2, [pc, #232]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001496:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800149a:	6093      	str	r3, [r2, #8]

	// Update the SystemCoreClock global variable.  I could just assume this is 168 MHz, but
	// I'll check and re-calculate it, just in case something has gone wrong.  This is the
	// general method of working out the system clock, adapted from the  routines:
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U, pllsource = 0U, pllFreq = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
	
	if ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSI) pllFreq = 16000000U;
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <myConfigureFlashWaitStatesAndBusClocks+0xd4>
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <myConfigureFlashWaitStatesAndBusClocks+0x19c>)
 80014be:	617b      	str	r3, [r7, #20]
	if ((RCC->CFGR & RCC_CFGR_SWS) == RCC_CFGR_SWS_HSE) pllFreq = 8000000U;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d101      	bne.n	80014d0 <myConfigureFlashWaitStatesAndBusClocks+0xe4>
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <myConfigureFlashWaitStatesAndBusClocks+0x1a0>)
 80014ce:	617b      	str	r3, [r7, #20]

	pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d0:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014d8:	60fb      	str	r3, [r7, #12]
	pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	0c1b      	lsrs	r3, r3, #16
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	3301      	adds	r3, #1
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	607b      	str	r3, [r7, #4]
	
	pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) ? 8000000U : 16000000U;
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <myConfigureFlashWaitStatesAndBusClocks+0x10e>
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <myConfigureFlashWaitStatesAndBusClocks+0x1a0>)
 80014f8:	e000      	b.n	80014fc <myConfigureFlashWaitStatesAndBusClocks+0x110>
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <myConfigureFlashWaitStatesAndBusClocks+0x19c>)
 80014fc:	603b      	str	r3, [r7, #0]
	pllvco = (uint32_t) ((((uint64_t) pllsource * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	491e      	ldr	r1, [pc, #120]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 8001508:	6849      	ldr	r1, [r1, #4]
 800150a:	0989      	lsrs	r1, r1, #6
 800150c:	4608      	mov	r0, r1
 800150e:	f04f 0100 	mov.w	r1, #0
 8001512:	f240 18ff 	movw	r8, #511	; 0x1ff
 8001516:	f04f 0900 	mov.w	r9, #0
 800151a:	ea00 0408 	and.w	r4, r0, r8
 800151e:	ea01 0509 	and.w	r5, r1, r9
 8001522:	fb04 f003 	mul.w	r0, r4, r3
 8001526:	fb02 f105 	mul.w	r1, r2, r5
 800152a:	1846      	adds	r6, r0, r1
 800152c:	fba2 0104 	umull	r0, r1, r2, r4
 8001530:	1873      	adds	r3, r6, r1
 8001532:	4619      	mov	r1, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	461a      	mov	r2, r3
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	f7ff fb22 	bl	8000b84 <__aeabi_uldivmod>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4613      	mov	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
	if (pllFreq == 0) pllFreq = pllvco / pllp;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d104      	bne.n	8001558 <myConfigureFlashWaitStatesAndBusClocks+0x16c>
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]

  SystemCoreClock = pllFreq >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <myConfigureFlashWaitStatesAndBusClocks+0x194>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <myConfigureFlashWaitStatesAndBusClocks+0x1a4>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	461a      	mov	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	40d3      	lsrs	r3, r2
 800156c:	4a09      	ldr	r2, [pc, #36]	; (8001594 <myConfigureFlashWaitStatesAndBusClocks+0x1a8>)
 800156e:	6013      	str	r3, [r2, #0]

  return MY_AUDIO_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800157c:	40023c00 	.word	0x40023c00
 8001580:	40023800 	.word	0x40023800
 8001584:	40023808 	.word	0x40023808
 8001588:	00f42400 	.word	0x00f42400
 800158c:	007a1200 	.word	0x007a1200
 8001590:	08003df0 	.word	0x08003df0
 8001594:	20000018 	.word	0x20000018

08001598 <myAudioSpeedUpTheSystemClock>:


MY_AUDIO_StatusTypeDef myAudioSpeedUpTheSystemClock(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  // I'll need to check that the power options are set correctly, so the first thing to do is
	// enable the clock to the power controller so I can read and write from it.  The original 
	// HAL code has a small delay at this point; I'm not sure why, but I'll add something in here
	// which should do the same thing:
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <myAudioSpeedUpTheSystemClock+0x6c>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a18      	ldr	r2, [pc, #96]	; (8001604 <myAudioSpeedUpTheSystemClock+0x6c>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
	while ((RCC->APB1ENR & RCC_APB1ENR_PWREN) == 0) {}
 80015a8:	bf00      	nop
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <myAudioSpeedUpTheSystemClock+0x6c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f9      	beq.n	80015aa <myAudioSpeedUpTheSystemClock+0x12>

	// With the power controller enabled, I can set the regulator voltage scaling to scale one
	// mode (required for maximum clock rates):
	PWR->CR = (PWR->CR & ~PWR_CR_VOS) | PWR_CR_VOS;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <myAudioSpeedUpTheSystemClock+0x70>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <myAudioSpeedUpTheSystemClock+0x70>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6013      	str	r3, [r2, #0]

	// Configure the PLL to speed up the system clock:
  if (myConfigureTheMainClockPLL() != MY_AUDIO_OK) return MY_AUDIO_ERROR;
 80015c2:	f7ff febd 	bl	8001340 <myConfigureTheMainClockPLL>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <myAudioSpeedUpTheSystemClock+0x38>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e017      	b.n	8001600 <myAudioSpeedUpTheSystemClock+0x68>

	// Initializes the CPU, AHB and APB busses clocks:
  if (myConfigureFlashWaitStatesAndBusClocks() != MY_AUDIO_OK) return MY_AUDIO_ERROR;
 80015d0:	f7ff ff0c 	bl	80013ec <myConfigureFlashWaitStatesAndBusClocks>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <myAudioSpeedUpTheSystemClock+0x46>
 80015da:	2301      	movs	r3, #1
 80015dc:	e010      	b.n	8001600 <myAudioSpeedUpTheSystemClock+0x68>
	// function gets it wrong, since it assumes the HSE is 25 MHz.  So I'll just 
	// include it in the previous function call myself.
	// SystemCoreClockUpdate(); // Don't use without changing HSE_VALUE in "system_stm32f4xx.c"

	// Finally, configure the I2S clock required for the interface to the DAC:
  if (myConfigureI2SClock(192, 2) != MY_AUDIO_OK) return MY_AUDIO_ERROR;
 80015de:	2102      	movs	r1, #2
 80015e0:	20c0      	movs	r0, #192	; 0xc0
 80015e2:	f7ff fe73 	bl	80012cc <myConfigureI2SClock>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <myAudioSpeedUpTheSystemClock+0x58>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e007      	b.n	8001600 <myAudioSpeedUpTheSystemClock+0x68>

	return SystemCoreClock == 168000000 ? MY_AUDIO_OK : MY_AUDIO_ERROR;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <myAudioSpeedUpTheSystemClock+0x74>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <myAudioSpeedUpTheSystemClock+0x78>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	bf14      	ite	ne
 80015fa:	2301      	movne	r3, #1
 80015fc:	2300      	moveq	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000
 800160c:	20000018 	.word	0x20000018
 8001610:	0a037a00 	.word	0x0a037a00

08001614 <configureAudioDACI2CRegisters>:
// Now the I2C stuff.  I'll restrict these to seven-bit addressing mode and blocking operation 
// for simplicity.  They also only work for standard I2C speeds of up to 100 kbit/s, and in master mode.
const uint32_t I2CMaxTimeOut = 0x1000;
const uint32_t I2CDefaultTimeOut = 25;

MY_AUDIO_StatusTypeDef configureAudioDACI2CRegisters() {	
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
	// Note these functions only work for standard I2C speeds of up to 100 kbit/s.
	// But that's OK, since I'll define the clock speed to be 100000.  I'm only
	// operating in master mode, so I won't bother to set the own address fields,
	// and I'm only using 7-bit addressing, with all other settings left as 
	// defaults.
	uint32_t clockSpeed = 100000;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <configureAudioDACI2CRegisters+0x78>)
 800161c:	607b      	str	r3, [r7, #4]
  uint32_t peripheralClockFreq = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]

  // Disable the I2C1 peripheral
	I2C1->CR1 &=  ~I2C_CR1_PE;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <configureAudioDACI2CRegisters+0x7c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <configureAudioDACI2CRegisters+0x7c>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6013      	str	r3, [r2, #0]

  // Get the peripheral clock frequency (APB clock)
	peripheralClockFreq = (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <configureAudioDACI2CRegisters+0x80>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <configureAudioDACI2CRegisters+0x84>)
 8001634:	6892      	ldr	r2, [r2, #8]
 8001636:	0a92      	lsrs	r2, r2, #10
 8001638:	f002 0207 	and.w	r2, r2, #7
 800163c:	4917      	ldr	r1, [pc, #92]	; (800169c <configureAudioDACI2CRegisters+0x88>)
 800163e:	5c8a      	ldrb	r2, [r1, r2]
 8001640:	40d3      	lsrs	r3, r2
 8001642:	603b      	str	r3, [r7, #0]

  // Configure CR2 with the frequency of the clock in MHz, and set the rise time accordingly:
	I2C1->CR2 = peripheralClockFreq / 1000000;
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <configureAudioDACI2CRegisters+0x7c>)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	4915      	ldr	r1, [pc, #84]	; (80016a0 <configureAudioDACI2CRegisters+0x8c>)
 800164a:	fba1 1303 	umull	r1, r3, r1, r3
 800164e:	0c9b      	lsrs	r3, r3, #18
 8001650:	6053      	str	r3, [r2, #4]
	I2C1->TRISE = I2C1->CR2 + 1;
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <configureAudioDACI2CRegisters+0x7c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <configureAudioDACI2CRegisters+0x7c>)
 8001658:	3301      	adds	r3, #1
 800165a:	6213      	str	r3, [r2, #32]
	
	// Set the speed of transfer to 100 kbaud:
  I2C1->CCR = peripheralClockFreq / clockSpeed / 2;
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <configureAudioDACI2CRegisters+0x7c>)
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	61d3      	str	r3, [r2, #28]

  // Enable the I2C1 peripheral
	I2C1->CR1 |=  I2C_CR1_PE;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <configureAudioDACI2CRegisters+0x7c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <configureAudioDACI2CRegisters+0x7c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6013      	str	r3, [r2, #0]

	// Mark the peripheral as OK and return:
	audioI2CStatus = MY_AUDIO_OK;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <configureAudioDACI2CRegisters+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
  return MY_AUDIO_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	000186a0 	.word	0x000186a0
 8001690:	40005400 	.word	0x40005400
 8001694:	20000018 	.word	0x20000018
 8001698:	40023800 	.word	0x40023800
 800169c:	08003e00 	.word	0x08003e00
 80016a0:	431bde83 	.word	0x431bde83
 80016a4:	20000002 	.word	0x20000002

080016a8 <setupClocksAndGPIOForAudioI2C>:

static void setupClocksAndGPIOForAudioI2C(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  // Enable the clocks to the GPIO ports for the I2C signals:
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <setupClocksAndGPIOForAudioI2C+0xa8>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <setupClocksAndGPIOForAudioI2C+0xa8>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
	
	// Configure the GPIO ports for the I2C signals (noting that they are open-drain):
	Configure_GPIO_Output(GPIOB, 6, 2, 4);
 80016b8:	2304      	movs	r3, #4
 80016ba:	2202      	movs	r2, #2
 80016bc:	2106      	movs	r1, #6
 80016be:	4825      	ldr	r0, [pc, #148]	; (8001754 <setupClocksAndGPIOForAudioI2C+0xac>)
 80016c0:	f7ff fc66 	bl	8000f90 <Configure_GPIO_Output>
	Configure_GPIO_Output(GPIOB, 9, 2, 4);
 80016c4:	2304      	movs	r3, #4
 80016c6:	2202      	movs	r2, #2
 80016c8:	2109      	movs	r1, #9
 80016ca:	4822      	ldr	r0, [pc, #136]	; (8001754 <setupClocksAndGPIOForAudioI2C+0xac>)
 80016cc:	f7ff fc60 	bl	8000f90 <Configure_GPIO_Output>
	GPIOB->OTYPER |= 0x01 << 6;
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <setupClocksAndGPIOForAudioI2C+0xac>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <setupClocksAndGPIOForAudioI2C+0xac>)
 80016d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016da:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= 0x01 << 9;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <setupClocksAndGPIOForAudioI2C+0xac>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <setupClocksAndGPIOForAudioI2C+0xac>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6053      	str	r3, [r2, #4]

  // Enable the peripheral clock to the I2C1 peripheral:
  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <setupClocksAndGPIOForAudioI2C+0xa8>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	4a18      	ldr	r2, [pc, #96]	; (8001750 <setupClocksAndGPIOForAudioI2C+0xa8>)
 80016ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f2:	6413      	str	r3, [r2, #64]	; 0x40
	
  // Force the I2C peripheral to reset to get into a known state:
	RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 80016f4:	4b16      	ldr	r3, [pc, #88]	; (8001750 <setupClocksAndGPIOForAudioI2C+0xa8>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a15      	ldr	r2, [pc, #84]	; (8001750 <setupClocksAndGPIOForAudioI2C+0xa8>)
 80016fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016fe:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~(RCC_APB1RSTR_I2C1RST);
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <setupClocksAndGPIOForAudioI2C+0xa8>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a12      	ldr	r2, [pc, #72]	; (8001750 <setupClocksAndGPIOForAudioI2C+0xa8>)
 8001706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800170a:	6213      	str	r3, [r2, #32]

  // Enable and set I2Cx event interrupts to the highest priority
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 800170c:	f7ff fbb6 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001710:	4603      	mov	r3, r0
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fc06 	bl	8000f28 <NVIC_EncodePriority>
 800171c:	4603      	mov	r3, r0
 800171e:	4619      	mov	r1, r3
 8001720:	201f      	movs	r0, #31
 8001722:	f7ff fbd7 	bl	8000ed4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001726:	201f      	movs	r0, #31
 8001728:	f7ff fbb6 	bl	8000e98 <__NVIC_EnableIRQ>

  // Enable and set I2Cx error interrupts to the highest priority
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 800172c:	f7ff fba6 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001730:	4603      	mov	r3, r0
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fbf6 	bl	8000f28 <NVIC_EncodePriority>
 800173c:	4603      	mov	r3, r0
 800173e:	4619      	mov	r1, r3
 8001740:	2020      	movs	r0, #32
 8001742:	f7ff fbc7 	bl	8000ed4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001746:	2020      	movs	r0, #32
 8001748:	f7ff fba6 	bl	8000e98 <__NVIC_EnableIRQ>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <setupAudioI2CPeripheral>:

static void setupAudioI2CPeripheral(void) {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	if (audioI2CStatus == MY_AUDIO_RESET) {     
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <setupAudioI2CPeripheral+0x18>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d103      	bne.n	800176c <setupAudioI2CPeripheral+0x14>
    // Set up the GPIO pins, enable clocks in the RCC and interrupts in the NVIC:
    setupClocksAndGPIOForAudioI2C();
 8001764:	f7ff ffa0 	bl	80016a8 <setupClocksAndGPIOForAudioI2C>
		
		// Initialise the I2C periperhal itself:
    configureAudioDACI2CRegisters();
 8001768:	f7ff ff54 	bl	8001614 <configureAudioDACI2CRegisters>
	}
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000002 	.word	0x20000002

08001774 <setupResetForAudioDAC>:

void setupResetForAudioDAC(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  
  // Ensure the clock is enabled for the GPIO bus which has the reset pin on it (GPIOD):
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <setupResetForAudioDAC+0x44>)
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <setupResetForAudioDAC+0x44>)
 800177e:	f043 0308 	orr.w	r3, r3, #8
 8001782:	6313      	str	r3, [r2, #48]	; 0x30
  
	// Set up the reset pin for the DAC as a general purpose output:
	Configure_GPIO_Output(GPIOD, 4, 2, -1);
 8001784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001788:	2202      	movs	r2, #2
 800178a:	2104      	movs	r1, #4
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <setupResetForAudioDAC+0x48>)
 800178e:	f7ff fbff 	bl	8000f90 <Configure_GPIO_Output>
  
  // Reset the codec:
	GPIOD->BSRR = 0x01 << (16 + 4);
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <setupResetForAudioDAC+0x48>)
 8001794:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001798:	619a      	str	r2, [r3, #24]
	audioDelay(5);
 800179a:	2005      	movs	r0, #5
 800179c:	f7ff fd54 	bl	8001248 <audioDelay>
	GPIOD->BSRR = 0x01 << 4;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <setupResetForAudioDAC+0x48>)
 80017a2:	2210      	movs	r2, #16
 80017a4:	619a      	str	r2, [r3, #24]
	audioDelay(5);
 80017a6:	2005      	movs	r0, #5
 80017a8:	f7ff fd4e 	bl	8001248 <audioDelay>
		
	// The DAC should now be reset:
	audioDACStatus = MY_AUDIO_RESET;
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <setupResetForAudioDAC+0x4c>)
 80017ae:	2204      	movs	r2, #4
 80017b0:	701a      	strb	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	20000003 	.word	0x20000003

080017c4 <waitForI2CMasterAddressFlagUntilTimeout>:

static MY_AUDIO_StatusTypeDef waitForI2CMasterAddressFlagUntilTimeout(uint32_t Timeout)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	// Deals with the I2C timeout for the case where the master (the STM32F4) is sending the address.
	// It waits until the ADDR flag in SR1 is set (indicating the end of the address transmission),
	// or the timeout occurs, or the AF bit is set (indicating that no acknowledgement was received).
	
	setAudioTimer(Timeout);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fce7 	bl	80011a0 <setAudioTimer>
	while ((I2C1->SR1 & I2C_SR1_ADDR) == 0) {
 80017d2:	e020      	b.n	8001816 <waitForI2CMasterAddressFlagUntilTimeout+0x52>
		if ((I2C1->SR1 & I2C_SR1_AF) != 0) {
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d010      	beq.n	8001802 <waitForI2CMasterAddressFlagUntilTimeout+0x3e>
			// No acknowledgement received.  Release the bus, clear flag and exit with an error code:
			I2C1->CR1 |= I2C_CR1_STOP;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a11      	ldr	r2, [pc, #68]	; (800182c <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6013      	str	r3, [r2, #0]
			I2C1->SR1 &= ~I2C_SR1_AF;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 80017f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017f6:	6153      	str	r3, [r2, #20]
			audioI2CStatus = MY_AUDIO_ERROR;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <waitForI2CMasterAddressFlagUntilTimeout+0x6c>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e010      	b.n	8001824 <waitForI2CMasterAddressFlagUntilTimeout+0x60>
		}
		if (hasAudioTimerFinished()) {
 8001802:	f7ff fd13 	bl	800122c <hasAudioTimerFinished>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <waitForI2CMasterAddressFlagUntilTimeout+0x52>
			audioI2CStatus = MY_AUDIO_TIMEOUT;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <waitForI2CMasterAddressFlagUntilTimeout+0x6c>)
 800180e:	2203      	movs	r2, #3
 8001810:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e006      	b.n	8001824 <waitForI2CMasterAddressFlagUntilTimeout+0x60>
	while ((I2C1->SR1 & I2C_SR1_ADDR) == 0) {
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <waitForI2CMasterAddressFlagUntilTimeout+0x68>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0d8      	beq.n	80017d4 <waitForI2CMasterAddressFlagUntilTimeout+0x10>
		}
	}
	return MY_AUDIO_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40005400 	.word	0x40005400
 8001830:	20000002 	.word	0x20000002

08001834 <waitForI2CTXEFlagUntilTimeout>:

static MY_AUDIO_StatusTypeDef waitForI2CTXEFlagUntilTimeout(uint32_t Timeout)
{    
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	// Waits for TXE flag to be set, indicating the successful end of a transmission (DR empty).
	// Can also return with a timeout error, or an error if the acknowledgement flag (AF) indicates
	// no acknowledgement is received.  In the latter case, the AF flag needs to be reset.
	setAudioTimer(Timeout);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fcaf 	bl	80011a0 <setAudioTimer>
	while ((I2C1->SR1 & I2C_SR1_TXE) == 0) {
 8001842:	e01a      	b.n	800187a <waitForI2CTXEFlagUntilTimeout+0x46>
		if ((I2C1->SR1 & I2C_SR1_AF) != 0) {
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00d      	beq.n	800186c <waitForI2CTXEFlagUntilTimeout+0x38>
			// No acknowledgement received.  Release the bus, clear flag and exit with an error code:
			I2C1->CR1 |= I2C_CR1_STOP;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185a:	6013      	str	r3, [r2, #0]
			I2C1->SR1 &= ~I2C_SR1_AF;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 8001862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001866:	6153      	str	r3, [r2, #20]
			return MY_AUDIO_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e00d      	b.n	8001888 <waitForI2CTXEFlagUntilTimeout+0x54>
		}
		if (hasAudioTimerFinished()) {
 800186c:	f7ff fcde 	bl	800122c <hasAudioTimerFinished>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <waitForI2CTXEFlagUntilTimeout+0x46>
			return MY_AUDIO_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e006      	b.n	8001888 <waitForI2CTXEFlagUntilTimeout+0x54>
	while ((I2C1->SR1 & I2C_SR1_TXE) == 0) {
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <waitForI2CTXEFlagUntilTimeout+0x5c>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0de      	beq.n	8001844 <waitForI2CTXEFlagUntilTimeout+0x10>
		}
	}
	return MY_AUDIO_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40005400 	.word	0x40005400

08001894 <waitForI2CBTFFlagUntilTimeout>:

static MY_AUDIO_StatusTypeDef waitForI2CBTFFlagUntilTimeout(uint32_t Timeout)
{  
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	// Waiting for the byte transfer to complete.  This can end one of three ways: a successful
	// byte transfer can occur (including acknowledgement being received), a failed acknowledgment
	// (in which case the AF flag is detected), or a timeout.
	setAudioTimer(Timeout);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff fc7f 	bl	80011a0 <setAudioTimer>

	while((I2C1->SR1 & I2C_SR1_BTF) == 0) {
 80018a2:	e01a      	b.n	80018da <waitForI2CBTFFlagUntilTimeout+0x46>
		// Check the AF flag is set (indicating a failed acknowledgement):
		if ((I2C1->SR1 & I2C_SR1_AF) != 0) {
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <waitForI2CBTFFlagUntilTimeout+0x5c>)
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <waitForI2CBTFFlagUntilTimeout+0x32>
			I2C1->SR1 &= ~I2C_SR1_AF;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <waitForI2CBTFFlagUntilTimeout+0x5c>)
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <waitForI2CBTFFlagUntilTimeout+0x5c>)
 80018b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018ba:	6153      	str	r3, [r2, #20]
			audioI2CStatus = MY_AUDIO_ERROR;
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <waitForI2CBTFFlagUntilTimeout+0x60>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e010      	b.n	80018e8 <waitForI2CBTFFlagUntilTimeout+0x54>
		}
		// Check for the timeout:
		if (hasAudioTimerFinished()) {
 80018c6:	f7ff fcb1 	bl	800122c <hasAudioTimerFinished>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <waitForI2CBTFFlagUntilTimeout+0x46>
			audioI2CStatus = MY_AUDIO_TIMEOUT;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <waitForI2CBTFFlagUntilTimeout+0x60>)
 80018d2:	2203      	movs	r2, #3
 80018d4:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e006      	b.n	80018e8 <waitForI2CBTFFlagUntilTimeout+0x54>
	while((I2C1->SR1 & I2C_SR1_BTF) == 0) {
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <waitForI2CBTFFlagUntilTimeout+0x5c>)
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0de      	beq.n	80018a4 <waitForI2CBTFFlagUntilTimeout+0x10>
		}
	}
	return MY_AUDIO_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40005400 	.word	0x40005400
 80018f4:	20000002 	.word	0x20000002

080018f8 <myI2C_WaitOnRXNEFlagUntilTimeout>:

static MY_AUDIO_StatusTypeDef myI2C_WaitOnRXNEFlagUntilTimeout(uint32_t Timeout)
{  
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	// Waiting for a byte to successfully be received.  This can end one of three ways: a successful
	// byte reception can occur (indicated by the RxNE flag being set), a stop condition can be
	// detected on the bus (in which case the STOPF flag is set), or a timeout.
	setAudioTimer(Timeout);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fc4d 	bl	80011a0 <setAudioTimer>

	while((I2C1->SR1 & I2C_SR1_RXNE) == 0) {
 8001906:	e01a      	b.n	800193e <myI2C_WaitOnRXNEFlagUntilTimeout+0x46>
		// Check if a STOPF has been detected:
		if ((I2C1->SR1 & I2C_SR1_STOPF) != 0) {
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <myI2C_WaitOnRXNEFlagUntilTimeout+0x5c>)
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00a      	beq.n	800192a <myI2C_WaitOnRXNEFlagUntilTimeout+0x32>
			I2C1->SR1 &= ~I2C_SR1_STOPF;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <myI2C_WaitOnRXNEFlagUntilTimeout+0x5c>)
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <myI2C_WaitOnRXNEFlagUntilTimeout+0x5c>)
 800191a:	f023 0310 	bic.w	r3, r3, #16
 800191e:	6153      	str	r3, [r2, #20]
			audioI2CStatus = MY_AUDIO_ERROR;
 8001920:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <myI2C_WaitOnRXNEFlagUntilTimeout+0x60>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e010      	b.n	800194c <myI2C_WaitOnRXNEFlagUntilTimeout+0x54>
		}
		// Check for the timeout:
		if (hasAudioTimerFinished()) {
 800192a:	f7ff fc7f 	bl	800122c <hasAudioTimerFinished>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <myI2C_WaitOnRXNEFlagUntilTimeout+0x46>
			audioI2CStatus = MY_AUDIO_TIMEOUT;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <myI2C_WaitOnRXNEFlagUntilTimeout+0x60>)
 8001936:	2203      	movs	r2, #3
 8001938:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e006      	b.n	800194c <myI2C_WaitOnRXNEFlagUntilTimeout+0x54>
	while((I2C1->SR1 & I2C_SR1_RXNE) == 0) {
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <myI2C_WaitOnRXNEFlagUntilTimeout+0x5c>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0de      	beq.n	8001908 <myI2C_WaitOnRXNEFlagUntilTimeout+0x10>
		}
	}
	return MY_AUDIO_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40005400 	.word	0x40005400
 8001958:	20000002 	.word	0x20000002

0800195c <clearTheADDRFlag>:

// This seems to need to get done a lot, so I'll separate it out here:
// Clear the ADDR flag.  For some reason it seems to be important to do this in this order,
// reading SR1 first and SR2 second.  Call myUNUSED() to help prevent the compiler
// giving a warning or optimising this whole thing out.
static void clearTheADDRFlag(I2C_TypeDef *I2Cx) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpreg = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  tmpreg = I2Cx->SR1;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	60fb      	str	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	60fb      	str	r3, [r7, #12]
  myUNUSED(tmpreg);	
 8001974:	68fb      	ldr	r3, [r7, #12]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <readDataFromI2CPeripheral>:

MY_AUDIO_StatusTypeDef readDataFromI2CPeripheral(I2C_TypeDef * I2Cx, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout){
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	817b      	strh	r3, [r7, #10]
 8001992:	4613      	mov	r3, r2
 8001994:	813b      	strh	r3, [r7, #8]

  if(audioI2CStatus == MY_AUDIO_OK)
 8001996:	4b87      	ldr	r3, [pc, #540]	; (8001bb4 <readDataFromI2CPeripheral+0x230>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 8104 	bne.w	8001ba8 <readDataFromI2CPeripheral+0x224>
  {
    audioI2CStatus = MY_AUDIO_BUSY;
 80019a0:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <readDataFromI2CPeripheral+0x230>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
		MY_AUDIO_StatusTypeDef retValue = MY_AUDIO_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
		
    // The bus might be busy, so wait until the BUSY flag is reset:
		uint32_t wait = waitForFlagWithTimeout(&I2Cx->SR2, I2C_SR2_BUSY_Pos, 0, I2CDefaultTimeOut);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f103 0018 	add.w	r0, r3, #24
 80019b0:	2319      	movs	r3, #25
 80019b2:	2200      	movs	r2, #0
 80019b4:	2101      	movs	r1, #1
 80019b6:	f7ff fc58 	bl	800126a <waitForFlagWithTimeout>
 80019ba:	6138      	str	r0, [r7, #16]
		if (wait != 0) return MY_AUDIO_BUSY;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <readDataFromI2CPeripheral+0x42>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e0f1      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
		
		// Enable Acknowledge:
		I2Cx->CR1 |= I2C_CR1_ACK;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	601a      	str	r2, [r3, #0]

		// Generate Start:
		I2Cx->CR1 |= I2C_CR1_START;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]

		// Wait until SB flag is set:
		wait = waitForFlagWithTimeout(&I2Cx->SR1, I2C_SR1_SB_Pos, 1, Timeout);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f103 0014 	add.w	r0, r3, #20
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	2201      	movs	r2, #1
 80019e8:	2100      	movs	r1, #0
 80019ea:	f7ff fc3e 	bl	800126a <waitForFlagWithTimeout>
 80019ee:	6138      	str	r0, [r7, #16]
		if (wait != 0) return MY_AUDIO_TIMEOUT;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <readDataFromI2CPeripheral+0x76>
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0d7      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
	
		// Send slave address (clear MSB bit for a read):
		I2Cx->DR = DevAddress & 0xFE;
 80019fa:	897b      	ldrh	r3, [r7, #10]
 80019fc:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	611a      	str	r2, [r3, #16]

		// Wait until ADDR flag is set:
		retValue = waitForI2CMasterAddressFlagUntilTimeout(Timeout);
 8001a04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a06:	f7ff fedd 	bl	80017c4 <waitForI2CMasterAddressFlagUntilTimeout>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	75fb      	strb	r3, [r7, #23]
		if (retValue == MY_AUDIO_ERROR || retValue == MY_AUDIO_TIMEOUT) return retValue;
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d002      	beq.n	8001a1a <readDataFromI2CPeripheral+0x96>
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d101      	bne.n	8001a1e <readDataFromI2CPeripheral+0x9a>
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	e0c5      	b.n	8001baa <readDataFromI2CPeripheral+0x226>

		clearTheADDRFlag(I2Cx);
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ff9c 	bl	800195c <clearTheADDRFlag>

		// Wait until TXE flag is set.  If this gives an error, send a stop and return,
		// if it times out, just return.
		retValue = waitForI2CTXEFlagUntilTimeout(Timeout);
 8001a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a26:	f7ff ff05 	bl	8001834 <waitForI2CTXEFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	75fb      	strb	r3, [r7, #23]
		if (retValue != MY_AUDIO_OK) {
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00a      	beq.n	8001a4a <readDataFromI2CPeripheral+0xc6>
			if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d105      	bne.n	8001a46 <readDataFromI2CPeripheral+0xc2>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	601a      	str	r2, [r3, #0]
			return retValue;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	e0af      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
		}

		// Memory address size is always eight-bits in this application, so I can just do:
		I2Cx->DR = MemAddress | 0x01;
 8001a4a:	893b      	ldrh	r3, [r7, #8]
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	611a      	str	r2, [r3, #16]
	
		// Wait until TXE flag is set
		retValue = waitForI2CTXEFlagUntilTimeout(Timeout);
 8001a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a5a:	f7ff feeb 	bl	8001834 <waitForI2CTXEFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	75fb      	strb	r3, [r7, #23]
		if (retValue != MY_AUDIO_OK) {
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00a      	beq.n	8001a7e <readDataFromI2CPeripheral+0xfa>
			if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d105      	bne.n	8001a7a <readDataFromI2CPeripheral+0xf6>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	601a      	str	r2, [r3, #0]
			return retValue;		
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
 8001a7c:	e095      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
		}

		// Should be already to go now, so generate a restart:
		I2Cx->CR1 |= I2C_CR1_START;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	601a      	str	r2, [r3, #0]

		// Wait until the SB flag is set:
		wait = waitForFlagWithTimeout(&I2Cx->SR1, I2C_SR1_SB_Pos, 1, Timeout);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f103 0014 	add.w	r0, r3, #20
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	2201      	movs	r2, #1
 8001a94:	2100      	movs	r1, #0
 8001a96:	f7ff fbe8 	bl	800126a <waitForFlagWithTimeout>
 8001a9a:	6138      	str	r0, [r7, #16]
		if (wait != 0) return MY_AUDIO_TIMEOUT;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <readDataFromI2CPeripheral+0x122>
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e081      	b.n	8001baa <readDataFromI2CPeripheral+0x226>

		// Send slave address:
		I2Cx->DR = DevAddress | 0x01;  // Set MSB in address for I2C read
 8001aa6:	897b      	ldrh	r3, [r7, #10]
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	611a      	str	r2, [r3, #16]

		// Wait until ADDR flag is set
		retValue = waitForI2CMasterAddressFlagUntilTimeout(Timeout);
 8001ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ab6:	f7ff fe85 	bl	80017c4 <waitForI2CMasterAddressFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	75fb      	strb	r3, [r7, #23]
		if (retValue != MY_AUDIO_OK) return retValue;
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <readDataFromI2CPeripheral+0x144>
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	e070      	b.n	8001baa <readDataFromI2CPeripheral+0x226>

		// If the transfer size is zero (used as an error recovery case), the only thing that happens
		// is the ADDR bit is cleared, and a stop is generated.
		if (Size == 0) {
 8001ac8:	8c3b      	ldrh	r3, [r7, #32]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10a      	bne.n	8001ae4 <readDataFromI2CPeripheral+0x160>
			clearTheADDRFlag(I2Cx);
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ff44 	bl	800195c <clearTheADDRFlag>
      I2Cx->CR1 |= I2C_CR1_STOP;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	601a      	str	r2, [r3, #0]
			return MY_AUDIO_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e062      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
		}
		
		// If the transfer size is one, then disable the acknowledgement bit, clear the ADDR bit,
		// and generate a stop.  Then wait until the RXNE flag is set, read the data and return:
		else if (Size == 1) {
 8001ae4:	8c3b      	ldrh	r3, [r7, #32]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d124      	bne.n	8001b34 <readDataFromI2CPeripheral+0x1b0>
      I2Cx->CR1 &= ~I2C_CR1_ACK;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	601a      	str	r2, [r3, #0]
			clearTheADDRFlag(I2Cx);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff ff30 	bl	800195c <clearTheADDRFlag>
      I2Cx->CR1 |= I2C_CR1_STOP;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	601a      	str	r2, [r3, #0]
			
			// Wait until RXNE flag is set
			retValue = myI2C_WaitOnRXNEFlagUntilTimeout(Timeout);
 8001b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b0a:	f7ff fef5 	bl	80018f8 <myI2C_WaitOnRXNEFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]
			if (retValue != MY_AUDIO_OK) {
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <readDataFromI2CPeripheral+0x19e>
				audioI2CStatus = retValue;
 8001b18:	4a26      	ldr	r2, [pc, #152]	; (8001bb4 <readDataFromI2CPeripheral+0x230>)
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	7013      	strb	r3, [r2, #0]
				return retValue;
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	e043      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
			}

			// Read data from DR
			*pData++ = I2Cx->DR;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
			return MY_AUDIO_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e03a      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
		}
		
		// If the transfer size is two, then disable the acknowledgements, enable the POS bit,
		// clear the ADDR bit, do not generate a stop, but wait until the BTF flag is set, then
		// generate the stop, and read the data in the DR register twice.
		else if (Size == 2) {
 8001b34:	8c3b      	ldrh	r3, [r7, #32]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d134      	bne.n	8001ba4 <readDataFromI2CPeripheral+0x220>
      I2Cx->CR1 &= ~I2C_CR1_ACK;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	601a      	str	r2, [r3, #0]
			I2Cx->CR1 |= I2C_CR1_POS;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	601a      	str	r2, [r3, #0]
  		clearTheADDRFlag(I2Cx);
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff ff02 	bl	800195c <clearTheADDRFlag>

      // Wait until BTF flag is set.  Note: this is untested.
			wait = waitForFlagWithTimeout(&I2Cx->SR1, I2C_SR1_BTF_Pos, 1, Timeout);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f103 0014 	add.w	r0, r3, #20
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	2201      	movs	r2, #1
 8001b62:	2102      	movs	r1, #2
 8001b64:	f7ff fb81 	bl	800126a <waitForFlagWithTimeout>
 8001b68:	6138      	str	r0, [r7, #16]
			// retValue = I2C_WaitOnFlagUntilTimeout(I2C_FLAG_BTF, RESET, Timeout);
			if (wait != 0) {
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <readDataFromI2CPeripheral+0x1f6>
				audioI2CStatus = MY_AUDIO_TIMEOUT;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <readDataFromI2CPeripheral+0x230>)
 8001b72:	2203      	movs	r2, #3
 8001b74:	701a      	strb	r2, [r3, #0]
				return MY_AUDIO_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e017      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
			}

      I2Cx->CR1 |= I2C_CR1_STOP;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]
      *pData++ = I2Cx->DR;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	b2ca      	uxtb	r2, r1
 8001b92:	701a      	strb	r2, [r3, #0]
      *pData++ = I2Cx->DR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6919      	ldr	r1, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	b2ca      	uxtb	r2, r1
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e001      	b.n	8001ba8 <readDataFromI2CPeripheral+0x224>
		}
		
		else {
			return MY_AUDIO_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <readDataFromI2CPeripheral+0x226>
		}
  }
  return MY_AUDIO_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000002 	.word	0x20000002

08001bb8 <resetTheI2CDriver>:

static void resetTheI2CDriver()
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  // Reset the I2C peripheral:
	RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <resetTheI2CDriver+0x24>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a06      	ldr	r2, [pc, #24]	; (8001bdc <resetTheI2CDriver+0x24>)
 8001bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc6:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <resetTheI2CDriver+0x24>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <resetTheI2CDriver+0x24>)
 8001bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bd2:	6213      	str	r3, [r2, #32]
  
	// Re-initialise the I2C periperhal itself:
	configureAudioDACI2CRegisters();
 8001bd4:	f7ff fd1e 	bl	8001614 <configureAudioDACI2CRegisters>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800

08001be0 <writeDataToI2CPeripheral>:

MY_AUDIO_StatusTypeDef writeDataToI2CPeripheral(I2C_TypeDef *I2Cx, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	817b      	strh	r3, [r7, #10]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	813b      	strh	r3, [r7, #8]
	MY_AUDIO_StatusTypeDef retValue = MY_AUDIO_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	76fb      	strb	r3, [r7, #27]
	
	// Wait until BUSY flag is reset:
  if (waitForFlagWithTimeout(&I2Cx->SR2, I2C_SR2_BUSY_Pos, 0, 25) != 0) return MY_AUDIO_BUSY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f103 0018 	add.w	r0, r3, #24
 8001bfc:	2319      	movs	r3, #25
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2101      	movs	r1, #1
 8001c02:	f7ff fb32 	bl	800126a <waitForFlagWithTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <writeDataToI2CPeripheral+0x30>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e0a4      	b.n	8001d5a <writeDataToI2CPeripheral+0x17a>
	    
	// Check if the I2C is already enabled, and if not, enable it:
	if ((I2Cx->CR1 & I2C_CR1_PE) != I2C_CR1_PE) I2C1->CR1 |= I2C_CR1_PE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d005      	beq.n	8001c28 <writeDataToI2CPeripheral+0x48>
 8001c1c:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <writeDataToI2CPeripheral+0x184>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a50      	ldr	r2, [pc, #320]	; (8001d64 <writeDataToI2CPeripheral+0x184>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6013      	str	r3, [r2, #0]

	// Disable the POS flag		
	I2Cx->CR1 &= ~I2C_CR1_POS;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	601a      	str	r2, [r3, #0]

  // Prepare the transfer parameters
	uint32_t transferSize = Size;
 8001c34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c36:	61fb      	str	r3, [r7, #28]
    
  // Send Slave Address and Memory Address.  First, generate a START:
	I2Cx->CR1 |= I2C_CR1_START;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	601a      	str	r2, [r3, #0]
	audioI2CStatus = MY_AUDIO_BUSY;
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <writeDataToI2CPeripheral+0x188>)
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]

	// Wait until SB flag is set
	uint32_t status = waitForFlagWithTimeout(&I2Cx->SR1, I2C_SR1_SB_Pos, 1, Timeout);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f103 0014 	add.w	r0, r3, #20
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	2201      	movs	r2, #1
 8001c54:	2100      	movs	r1, #0
 8001c56:	f7ff fb08 	bl	800126a <waitForFlagWithTimeout>
 8001c5a:	6178      	str	r0, [r7, #20]
	if (status != 0) return MY_AUDIO_TIMEOUT;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <writeDataToI2CPeripheral+0x86>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e079      	b.n	8001d5a <writeDataToI2CPeripheral+0x17a>

	// Send slave address (8-bit only addressing supported):
	I2Cx->DR = DevAddress & ~0x01;
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	f023 0201 	bic.w	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	611a      	str	r2, [r3, #16]

	// Wait until ADDR flag is set
	retValue = waitForI2CMasterAddressFlagUntilTimeout(Timeout);
 8001c70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c72:	f7ff fda7 	bl	80017c4 <waitForI2CMasterAddressFlagUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	76fb      	strb	r3, [r7, #27]
	if (retValue != MY_AUDIO_OK) return retValue;
 8001c7a:	7efb      	ldrb	r3, [r7, #27]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <writeDataToI2CPeripheral+0xa4>
 8001c80:	7efb      	ldrb	r3, [r7, #27]
 8001c82:	e06a      	b.n	8001d5a <writeDataToI2CPeripheral+0x17a>

	// Clear ADDR flag
	clearTheADDRFlag(I2Cx);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff fe69 	bl	800195c <clearTheADDRFlag>

	// Wait until TXE flag is set
	retValue = waitForI2CTXEFlagUntilTimeout(Timeout);
 8001c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c8c:	f7ff fdd2 	bl	8001834 <waitForI2CTXEFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	76fb      	strb	r3, [r7, #27]
	if (retValue != MY_AUDIO_OK) {
 8001c94:	7efb      	ldrb	r3, [r7, #27]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <writeDataToI2CPeripheral+0xd0>
		if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001c9a:	7efb      	ldrb	r3, [r7, #27]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <writeDataToI2CPeripheral+0xcc>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	601a      	str	r2, [r3, #0]
		return retValue;
 8001cac:	7efb      	ldrb	r3, [r7, #27]
 8001cae:	e054      	b.n	8001d5a <writeDataToI2CPeripheral+0x17a>
	}

	// Send the register address in the I2C peripheral:
  I2Cx->DR = (uint8_t)(MemAddress & 0x00FF);
 8001cb0:	893b      	ldrh	r3, [r7, #8]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	611a      	str	r2, [r3, #16]

	// This routine is only ever called with a size set to one in this application, so I should be able to do:
  while(transferSize > 0U)
 8001cba:	e02e      	b.n	8001d1a <writeDataToI2CPeripheral+0x13a>
  {
    // Wait until the TXE flag is set:
		retValue = waitForI2CTXEFlagUntilTimeout(Timeout);
 8001cbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001cbe:	f7ff fdb9 	bl	8001834 <waitForI2CTXEFlagUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	76fb      	strb	r3, [r7, #27]
		if (retValue != MY_AUDIO_OK) {
 8001cc6:	7efb      	ldrb	r3, [r7, #27]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00a      	beq.n	8001ce2 <writeDataToI2CPeripheral+0x102>
			if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001ccc:	7efb      	ldrb	r3, [r7, #27]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d105      	bne.n	8001cde <writeDataToI2CPeripheral+0xfe>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]
			return retValue;
 8001cde:	7efb      	ldrb	r3, [r7, #27]
 8001ce0:	e03b      	b.n	8001d5a <writeDataToI2CPeripheral+0x17a>
		}

    // Write data to the data register:
    I2C1->DR = *pData++;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <writeDataToI2CPeripheral+0x184>)
 8001cec:	611a      	str	r2, [r3, #16]
		transferSize--;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	61fb      	str	r3, [r7, #28]
			
		// If there is more data to send and the BTF flag is set, then I can immediately transfer it to the
		// data register; if not then just loop back and wait for the TXE flag again:
		if (I2Cx->SR1 & I2C_SR1_BTF && transferSize > 0) {
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00c      	beq.n	8001d1a <writeDataToI2CPeripheral+0x13a>
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <writeDataToI2CPeripheral+0x13a>
			I2Cx->DR = *pData++;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	611a      	str	r2, [r3, #16]
			transferSize--;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
  while(transferSize > 0U)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1cd      	bne.n	8001cbc <writeDataToI2CPeripheral+0xdc>
		}
  }
    
  // Finally, wait until the BTF flag is set:
	retValue = waitForI2CBTFFlagUntilTimeout(Timeout);
 8001d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d22:	f7ff fdb7 	bl	8001894 <waitForI2CBTFFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	76fb      	strb	r3, [r7, #27]
	if (retValue != MY_AUDIO_OK) {
 8001d2a:	7efb      	ldrb	r3, [r7, #27]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <writeDataToI2CPeripheral+0x166>
		if (retValue == MY_AUDIO_ERROR) I2Cx->CR1 |= I2C_CR1_STOP;
 8001d30:	7efb      	ldrb	r3, [r7, #27]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <writeDataToI2CPeripheral+0x162>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	601a      	str	r2, [r3, #0]
		return retValue;
 8001d42:	7efb      	ldrb	r3, [r7, #27]
 8001d44:	e009      	b.n	8001d5a <writeDataToI2CPeripheral+0x17a>
	}

  // Generate a final stop
	I2Cx->CR1 |= I2C_CR1_STOP;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	601a      	str	r2, [r3, #0]

	audioI2CStatus = MY_AUDIO_OK;    
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <writeDataToI2CPeripheral+0x188>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
  return MY_AUDIO_OK;			
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40005400 	.word	0x40005400
 8001d68:	20000002 	.word	0x20000002

08001d6c <myI2Cx_WriteData>:

uint32_t myI2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	460b      	mov	r3, r1
 8001d78:	71bb      	strb	r3, [r7, #6]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	717b      	strb	r3, [r7, #5]
	// Writes an 8-bit data byte to the ADC's I2C address Addr, register Reg.  Returns one if successful, or zero if failed.
  uint32_t timeout = 1000;
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	617b      	str	r3, [r7, #20]
	I2C_TypeDef *thisI2C = AudioI2C;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <myI2Cx_WriteData+0x60>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	613b      	str	r3, [r7, #16]
  MY_AUDIO_StatusTypeDef status = writeDataToI2CPeripheral(thisI2C, Addr, (uint16_t)Reg, &Value, 1, timeout);
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	79bb      	ldrb	r3, [r7, #6]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	1d78      	adds	r0, r7, #5
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2301      	movs	r3, #1
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	6938      	ldr	r0, [r7, #16]
 8001da0:	f7ff ff1e 	bl	8001be0 <writeDataToI2CPeripheral>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
	
	// Check status, and if error, then re-initialise the I2C peripheral:
	if (status != MY_AUDIO_OK) {
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <myI2Cx_WriteData+0x50>
		audioI2CStatus = MY_AUDIO_ERROR;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <myI2Cx_WriteData+0x64>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
		resetTheI2CDriver();
 8001db4:	f7ff ff00 	bl	8001bb8 <resetTheI2CDriver>
		return 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e003      	b.n	8001dc4 <myI2Cx_WriteData+0x58>
	}
	audioI2CStatus = MY_AUDIO_OK;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <myI2Cx_WriteData+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	return 1;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000004 	.word	0x20000004
 8001dd0:	20000002 	.word	0x20000002

08001dd4 <checkAudioDAC_ID>:
uint32_t checkAudioDAC_ID(uint8_t deviceAddress) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71fb      	strb	r3, [r7, #7]
	// Reads the ID field from the cs43l22 and returns it.

  uint8_t value = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73bb      	strb	r3, [r7, #14]
  MY_AUDIO_StatusTypeDef status = readDataFromI2CPeripheral(I2C1, deviceAddress, (uint16_t)CS43L22_CHIPID_ADDR, &value, 1, I2CMaxTimeOut);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	b299      	uxth	r1, r3
 8001de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dea:	f107 030e 	add.w	r3, r7, #14
 8001dee:	9201      	str	r2, [sp, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	480a      	ldr	r0, [pc, #40]	; (8001e20 <checkAudioDAC_ID+0x4c>)
 8001df8:	f7ff fdc4 	bl	8001984 <readDataFromI2CPeripheral>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	73fb      	strb	r3, [r7, #15]
  
  // Check the communication status and reset peripheral if required:
  if(status == MY_AUDIO_ERROR) resetTheI2CDriver();
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <checkAudioDAC_ID+0x36>
 8001e06:	f7ff fed7 	bl	8001bb8 <resetTheI2CDriver>
	
	// Extract the ID from the read data:	
  value = (value & CS43L22_ID_MASK); 
 8001e0a:	7bbb      	ldrb	r3, [r7, #14]
 8001e0c:	f023 0307 	bic.w	r3, r3, #7
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	73bb      	strb	r3, [r7, #14]
  return((uint32_t) value);
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40005400 	.word	0x40005400

08001e24 <AUDIO_IO_Init>:
// Finally, a few wrapper routines required by the cs43l22.c functions:
extern void AUDIO_IO_DeInit(void) {}
extern void AUDIO_IO_Init(void) {}
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <AUDIO_IO_Write>:
extern uint8_t AUDIO_IO_Read(uint8_t DeviceAddr, uint8_t chipIdAddress) {
	return 0;
}
extern void AUDIO_IO_Write(uint8_t deviceAddr, uint8_t deviceRegister, uint8_t data) {
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	71bb      	strb	r3, [r7, #6]
 8001e40:	4613      	mov	r3, r2
 8001e42:	717b      	strb	r3, [r7, #5]
	myI2Cx_WriteData(deviceAddr, deviceRegister, data);
 8001e44:	797a      	ldrb	r2, [r7, #5]
 8001e46:	79b9      	ldrb	r1, [r7, #6]
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff8e 	bl	8001d6c <myI2Cx_WriteData>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <setupI2SPeripheral>:
//////////////////////////////////////////////////////////////////////////////////
// Next the functions to set up the I2S peripheral and the DMA to feed data to it.
// Set up the I2S peripheral:
void setupI2SPeripheral(uint32_t audioSamplingFreq){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0U, i2sclk = 0U, vcoinput = 0U, vcooutput = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]

  // Enable the clock to the I2S peripheral:
	RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <setupI2SPeripheral+0x128>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a3e      	ldr	r2, [pc, #248]	; (8001f80 <setupI2SPeripheral+0x128>)
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure the GPIO pins required for the I2S peripheral:
	Configure_GPIO_Output(GPIOA, 4, 0, 0x06);
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2104      	movs	r1, #4
 8001e92:	483c      	ldr	r0, [pc, #240]	; (8001f84 <setupI2SPeripheral+0x12c>)
 8001e94:	f7ff f87c 	bl	8000f90 <Configure_GPIO_Output>
	Configure_GPIO_Output(GPIOC, 7, 0, 0x06);
 8001e98:	2306      	movs	r3, #6
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2107      	movs	r1, #7
 8001e9e:	483a      	ldr	r0, [pc, #232]	; (8001f88 <setupI2SPeripheral+0x130>)
 8001ea0:	f7ff f876 	bl	8000f90 <Configure_GPIO_Output>
	Configure_GPIO_Output(GPIOC, 10, 0, 0x06);
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	210a      	movs	r1, #10
 8001eaa:	4837      	ldr	r0, [pc, #220]	; (8001f88 <setupI2SPeripheral+0x130>)
 8001eac:	f7ff f870 	bl	8000f90 <Configure_GPIO_Output>
	Configure_GPIO_Output(GPIOC, 12, 0, 0x06);
 8001eb0:	2306      	movs	r3, #6
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	210c      	movs	r1, #12
 8001eb6:	4834      	ldr	r0, [pc, #208]	; (8001f88 <setupI2SPeripheral+0x130>)
 8001eb8:	f7ff f86a 	bl	8000f90 <Configure_GPIO_Output>

	SPI3->I2SCFGR = 0; 			// Clear all flags and settings in the I2S register for SPI3
 8001ebc:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <setupI2SPeripheral+0x134>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
	SPI3->I2SPR = 0x0002U;  // Set the IS2DIV field to 2.  What does this do?  XXX
 8001ec2:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <setupI2SPeripheral+0x134>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	621a      	str	r2, [r3, #32]
	
	tmpreg = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  packetlength = 16U;
 8001ecc:	2310      	movs	r3, #16
 8001ece:	61bb      	str	r3, [r7, #24]
  packetlength = packetlength * 2U;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	61bb      	str	r3, [r7, #24]
	
	// Note that HSE_VALUE is the frequency of the external high-speed oscillator, in this case 8 MHz
  vcoinput = (uint32_t)(externalClockFrequency / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <setupI2SPeripheral+0x128>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ede:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <setupI2SPeripheral+0x138>)
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	60fb      	str	r3, [r7, #12]
	vcooutput = (uint32_t)(vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos));
 8001ee6:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <setupI2SPeripheral+0x128>)
 8001ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	60bb      	str	r3, [r7, #8]
		
	i2sclk = (uint32_t)(vcooutput /((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos));
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <setupI2SPeripheral+0x128>)
 8001efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f00:	0f1b      	lsrs	r3, r3, #28
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	613b      	str	r3, [r7, #16]
  tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / audioSamplingFreq)) + 5);
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	3305      	adds	r3, #5
 8001f2a:	617b      	str	r3, [r7, #20]

  // Remove the flatting point (what does this mean? XXX)
  tmp = tmp / 10U;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4a19      	ldr	r2, [pc, #100]	; (8001f94 <setupI2SPeripheral+0x13c>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	617b      	str	r3, [r7, #20]

  // Check the parity of the divider
  i2sodd = (uint16_t)(tmp & (uint16_t)1U);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]

  // Compute the i2sdiv prescaler
  i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	085b      	lsrs	r3, r3, #1
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	623b      	str	r3, [r7, #32]

  // Get the Mask for the Odd bit (SPI_I2SPR[8]) register
  i2sodd = (uint32_t) (i2sodd << 8U);
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	61fb      	str	r3, [r7, #28]

  // Write to SPIx I2SPR register the computed value, also noting that the master clock
	// output needs to be enabled since the uC is providing the clock for the I2S link.
  SPI3->I2SPR = i2sdiv | i2sodd | SPI_I2SPR_MCKOE;
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <setupI2SPeripheral+0x134>)
 8001f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f60:	6213      	str	r3, [r2, #32]

  // Set up the I2S configuration register.  Everything can be left as default except setting to
	// master mode, and enabling I2S mode:
  tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (2UL << SPI_I2SCFGR_I2SCFG_Pos));
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24

	SPI3->I2SCFGR = tmpreg;
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <setupI2SPeripheral+0x134>)
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	61d3      	str	r3, [r2, #28]
		
	// The I2S should now be set-up and ready to go:
	audioI2SStatus = MY_AUDIO_OK;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <setupI2SPeripheral+0x140>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40003c00 	.word	0x40003c00
 8001f90:	007a1200 	.word	0x007a1200
 8001f94:	cccccccd 	.word	0xcccccccd
 8001f98:	20000000 	.word	0x20000000

08001f9c <setupDMAForI2SPeripheral>:

/////////////////////////////////////////////////////////////////////////
// Sets up the DMA controller to output data to the I2S peripheral, ready for routing to the DAC:
void setupDMAForI2SPeripheral(){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  
  // Enable the I2S3 clock, and the GPIO clocks for GPIOA and GPIOC, and the 
	// clock for DMA controller one, then have a short delay while they get going:
	RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8001fa2:	4b35      	ldr	r3, [pc, #212]	; (8002078 <setupDMAForI2SPeripheral+0xdc>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a34      	ldr	r2, [pc, #208]	; (8002078 <setupDMAForI2SPeripheral+0xdc>)
 8001fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
  RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOAEN);
 8001fae:	4b32      	ldr	r3, [pc, #200]	; (8002078 <setupDMAForI2SPeripheral+0xdc>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a31      	ldr	r2, [pc, #196]	; (8002078 <setupDMAForI2SPeripheral+0xdc>)
 8001fb4:	f043 0305 	orr.w	r3, r3, #5
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <setupDMAForI2SPeripheral+0xdc>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a2e      	ldr	r2, [pc, #184]	; (8002078 <setupDMAForI2SPeripheral+0xdc>)
 8001fc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
	audioDelay(5);
 8001fc6:	2005      	movs	r0, #5
 8001fc8:	f7ff f93e 	bl	8001248 <audioDelay>

	// I'll be using DMA1 stream 7 for the transfers.
	DMA_Stream_TypeDef *audioDMA = DMA1_Stream7;
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <setupDMAForI2SPeripheral+0xe0>)
 8001fce:	607b      	str	r3, [r7, #4]

	// First, disable this stream, and reset all the registers.
	audioDMA->CR = 0;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
  audioDMA->NDTR = 0U;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
	audioDMA->PAR  = 0U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
	audioDMA->M0AR = 0U;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  audioDMA->M1AR = 0U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  	
	// Now configure the DMA stream.  Everything that isn't the default is:
	audioDMA->CR |= DMA_SxCR_DIR_0;   // Set direction as memory to peripheral
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
	audioDMA->CR |= DMA_SxCR_MINC;    // Enable auto-increment of memory address
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
	audioDMA->CR |= DMA_SxCR_PSIZE_0; // 16-bit (half-word) peripheral size
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	601a      	str	r2, [r3, #0]
	audioDMA->CR |= DMA_SxCR_MSIZE_0; // 16-bit (half-word) memory size
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
	audioDMA->CR |= DMA_SxCR_PL_1;    // Set priority as high
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	601a      	str	r2, [r3, #0]
	
	audioDMA->FCR |= DMA_SxFCR_DMDIS; // Disable direct mode
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f043 0204 	orr.w	r2, r3, #4
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	615a      	str	r2, [r3, #20]
	audioDMA->FCR |= DMA_SxFCR_FTH;   // Use full FIFO
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f043 0203 	orr.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	615a      	str	r2, [r3, #20]

  // Then clear all interrupt flags for stream seven:
	DMA1->HIFCR = 0x0F400000;
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <setupDMAForI2SPeripheral+0xe4>)
 8002044:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002048:	60da      	str	r2, [r3, #12]
  
  // Configure and enable the I2S DMA interrupts:
  uint32_t prioritygroup = NVIC_GetPriorityGrouping();  
 800204a:	f7fe ff17 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 800204e:	6038      	str	r0, [r7, #0]
  NVIC_SetPriority(DMA1_Stream7_IRQn, NVIC_EncodePriority(prioritygroup, 0x0E, 0));
 8002050:	2200      	movs	r2, #0
 8002052:	210e      	movs	r1, #14
 8002054:	6838      	ldr	r0, [r7, #0]
 8002056:	f7fe ff67 	bl	8000f28 <NVIC_EncodePriority>
 800205a:	4603      	mov	r3, r0
 800205c:	4619      	mov	r1, r3
 800205e:	202f      	movs	r0, #47	; 0x2f
 8002060:	f7fe ff38 	bl	8000ed4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002064:	202f      	movs	r0, #47	; 0x2f
 8002066:	f7fe ff17 	bl	8000e98 <__NVIC_EnableIRQ>
	
	// The DMA should now be set-up and ready to go:
	audioDMAStatus = MY_AUDIO_OK;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <setupDMAForI2SPeripheral+0xe8>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	400260b8 	.word	0x400260b8
 8002080:	40026000 	.word	0x40026000
 8002084:	20000001 	.word	0x20000001

08002088 <configureI2SClockPLL>:
// Configure the clock for the I2S peripheral
// These PLL parameters are valid when the f(VCO clock) = 1 MHz
const uint32_t myI2SFreq[8] = {8000, 11025, 16000, 22050, 32000, 44100, 48000, 96000};
const uint32_t myI2SPLLN[8] = {256, 429, 213, 429, 426, 271, 258, 344};
const uint32_t myI2SPLLR[8] = {5, 4, 4, 4, 4, 6, 3, 1};
void configureI2SClockPLL(uint32_t AudioFreq){ 
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint8_t freqIndex = 0x05; // This makes the default 44.1 kHz (standard CD sampling rate)
 8002090:	2305      	movs	r3, #5
 8002092:	73fb      	strb	r3, [r7, #15]
  
  for(uint8_t index = 0; index < 8; index++)
 8002094:	2300      	movs	r3, #0
 8002096:	73bb      	strb	r3, [r7, #14]
 8002098:	e00b      	b.n	80020b2 <configureI2SClockPLL+0x2a>
  {
    if(myI2SFreq[index] == AudioFreq)
 800209a:	7bbb      	ldrb	r3, [r7, #14]
 800209c:	4a26      	ldr	r2, [pc, #152]	; (8002138 <configureI2SClockPLL+0xb0>)
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d101      	bne.n	80020ac <configureI2SClockPLL+0x24>
    {
      freqIndex = index;
 80020a8:	7bbb      	ldrb	r3, [r7, #14]
 80020aa:	73fb      	strb	r3, [r7, #15]
  for(uint8_t index = 0; index < 8; index++)
 80020ac:	7bbb      	ldrb	r3, [r7, #14]
 80020ae:	3301      	adds	r3, #1
 80020b0:	73bb      	strb	r3, [r7, #14]
 80020b2:	7bbb      	ldrb	r3, [r7, #14]
 80020b4:	2b07      	cmp	r3, #7
 80020b6:	d9f0      	bls.n	800209a <configureI2SClockPLL+0x12>
    }
  }

	// Disable the I2S PLL for a bit...
	RCC->CR &= ~RCC_CR_PLLI2SON;
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <configureI2SClockPLL+0xb4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1f      	ldr	r2, [pc, #124]	; (800213c <configureI2SClockPLL+0xb4>)
 80020be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020c2:	6013      	str	r3, [r2, #0]
	while (RCC->CR & RCC_CR_PLLI2SRDY) {};
 80020c4:	bf00      	nop
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <configureI2SClockPLL+0xb4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f9      	bne.n	80020c6 <configureI2SClockPLL+0x3e>

	// Configure the division factors:
	RCC->PLLI2SCFGR = (RCC->PLLI2SCFGR & ~RCC_PLLI2SCFGR_PLLI2SN) | (myI2SPLLN[freqIndex] <<	RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <configureI2SClockPLL+0xb4>)
 80020d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80020dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	4917      	ldr	r1, [pc, #92]	; (8002140 <configureI2SClockPLL+0xb8>)
 80020e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80020e8:	0192      	lsls	r2, r2, #6
 80020ea:	4914      	ldr	r1, [pc, #80]	; (800213c <configureI2SClockPLL+0xb4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
	RCC->PLLI2SCFGR = (RCC->PLLI2SCFGR & ~RCC_PLLI2SCFGR_PLLI2SR) | (myI2SPLLR[freqIndex] <<	RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <configureI2SClockPLL+0xb4>)
 80020f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	4911      	ldr	r1, [pc, #68]	; (8002144 <configureI2SClockPLL+0xbc>)
 8002100:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002104:	071b      	lsls	r3, r3, #28
 8002106:	490d      	ldr	r1, [pc, #52]	; (800213c <configureI2SClockPLL+0xb4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

	// Re-enable the I2S PLL
	RCC->CR |= RCC_CR_PLLI2SON;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <configureI2SClockPLL+0xb4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <configureI2SClockPLL+0xb4>)
 8002114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002118:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLI2SRDY)) {};
 800211a:	bf00      	nop
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <configureI2SClockPLL+0xb4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f9      	beq.n	800211c <configureI2SClockPLL+0x94>
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	08003d90 	.word	0x08003d90
 800213c:	40023800 	.word	0x40023800
 8002140:	08003db0 	.word	0x08003db0
 8002144:	08003dd0 	.word	0x08003dd0

08002148 <myAudioInitialisePeripherals>:



MY_AUDIO_StatusTypeDef myAudioInitialisePeripherals(uint16_t OutputDevice, uint8_t Volume, uint32_t audioSamplingFreq)
{    
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	603a      	str	r2, [r7, #0]
 8002152:	80fb      	strh	r3, [r7, #6]
 8002154:	460b      	mov	r3, r1
 8002156:	717b      	strb	r3, [r7, #5]
  MY_AUDIO_StatusTypeDef ret = MY_AUDIO_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
	
	audioDACStatus = MY_AUDIO_RESET;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <myAudioInitialisePeripherals+0x78>)
 800215e:	2204      	movs	r2, #4
 8002160:	701a      	strb	r2, [r3, #0]
	audioDMAStatus = MY_AUDIO_RESET;
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <myAudioInitialisePeripherals+0x7c>)
 8002164:	2204      	movs	r2, #4
 8002166:	701a      	strb	r2, [r3, #0]
	audioI2CStatus = MY_AUDIO_RESET;
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <myAudioInitialisePeripherals+0x80>)
 800216a:	2204      	movs	r2, #4
 800216c:	701a      	strb	r2, [r3, #0]
	audioI2SStatus = MY_AUDIO_RESET;
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <myAudioInitialisePeripherals+0x84>)
 8002170:	2204      	movs	r2, #4
 8002172:	701a      	strb	r2, [r3, #0]
	
	// Initialise the audio delay timer:
	initAudioTimer();
 8002174:	f7fe ff8a 	bl	800108c <initAudioTimer>
  
  // The I2S PLL clock is set depending on the audio sampling frequency requested:
  configureI2SClockPLL(audioSamplingFreq);
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7ff ff85 	bl	8002088 <configureI2SClockPLL>
	
	// Initialise the DMA stream to feed the I2S peripheral:
  setupDMAForI2SPeripheral();
 800217e:	f7ff ff0d 	bl	8001f9c <setupDMAForI2SPeripheral>
   
  // Initialise the I2S peripheral to receive data from the DMA controller:
	setupI2SPeripheral(audioSamplingFreq);
 8002182:	6838      	ldr	r0, [r7, #0]
 8002184:	f7ff fe68 	bl	8001e58 <setupI2SPeripheral>
	
	// Setup the I2C interface to configure the DAC:
	setupAudioI2CPeripheral();
 8002188:	f7ff fae6 	bl	8001758 <setupAudioI2CPeripheral>
	
	// Setup the reset line to the audio DAC and reset it:
	setupResetForAudioDAC();	
 800218c:	f7ff faf2 	bl	8001774 <setupResetForAudioDAC>
  
  // Retrieve audio codec identifier to check it's present and awake at address DAC_ADDR_ON_I2C:
	uint32_t temp = checkAudioDAC_ID(DAC_ADDR_ON_I2C);
 8002190:	2094      	movs	r0, #148	; 0x94
 8002192:	f7ff fe1f 	bl	8001dd4 <checkAudioDAC_ID>
 8002196:	60b8      	str	r0, [r7, #8]

	// If the DAC responds, initialise the cs43l22:
  if (temp == 0xE0) {
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2be0      	cmp	r3, #224	; 0xe0
 800219c:	d109      	bne.n	80021b2 <myAudioInitialisePeripherals+0x6a>
		cs43l22_Init(DAC_ADDR_ON_I2C, OutputDevice, Volume, audioSamplingFreq); 
 800219e:	797a      	ldrb	r2, [r7, #5]
 80021a0:	88f9      	ldrh	r1, [r7, #6]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2094      	movs	r0, #148	; 0x94
 80021a6:	f000 f925 	bl	80023f4 <cs43l22_Init>
		audioDACStatus = MY_AUDIO_OK;
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <myAudioInitialisePeripherals+0x78>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e001      	b.n	80021b6 <myAudioInitialisePeripherals+0x6e>
	}
	else {
		ret = MY_AUDIO_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
	}
	
  return ret;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000003 	.word	0x20000003
 80021c4:	20000001 	.word	0x20000001
 80021c8:	20000002 	.word	0x20000002
 80021cc:	20000000 	.word	0x20000000

080021d0 <setupDMAForAudioDAC>:


////////////////////////////////////////////////////////////////////////////
// Everything from here down seems to work, and is my version of the Play(),
// ChangeBuffer() and interrupt handler routines.
void setupDMAForAudioDAC(uint32_t buffStart, uint32_t txTransferSize) {
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]

 	// The example uses stream 7 from DMA controller one, so I'll do the same:
	DMA_Stream_TypeDef *audioDMA = DMA1_Stream7;
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <setupDMAForAudioDAC+0x78>)
 80021dc:	60fb      	str	r3, [r7, #12]
      
  // Configure the source, destination address and the data length
	// This was originally done in a different function called DMA_SetConfig()
	uint32_t DstAddress = SPI3_BASE + 0x0C; // 0x40003C0C;
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <setupDMAForAudioDAC+0x7c>)
 80021e0:	60bb      	str	r3, [r7, #8]
	
  // Clear DBM (double buffer mode) bit (probably not needed here, and might not even work, since
	// the bit is protected and can't be written to when the DMA is enabled).
  audioDMA->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	601a      	str	r2, [r3, #0]

  // Configure DMA Stream data length
  audioDMA->NDTR = txTransferSize / 2;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	085a      	lsrs	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]

  // Configure DMA Stream destination address (peripheral address)
  audioDMA->PAR = DstAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	609a      	str	r2, [r3, #8]

  // Configure DMA Stream source address (memory address)
  audioDMA->M0AR = buffStart;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	60da      	str	r2, [r3, #12]
	    
  // Clear all interrupt flags at correct offset within the register
	DMA1->HIFCR = 0x0F400000;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <setupDMAForAudioDAC+0x80>)
 8002204:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002208:	60da      	str	r2, [r3, #12]
	    
  // Enable the most common / useful interrupts
  audioDMA->CR  |= DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f043 0216 	orr.w	r2, r3, #22
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	601a      	str	r2, [r3, #0]
  audioDMA->FCR |= 0x00000080U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	615a      	str	r2, [r3, #20]
    
	// Also enable the half-transfer interrupt:
	audioDMA->CR  |= DMA_SxCR_HTIE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f043 0208 	orr.w	r2, r3, #8
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	601a      	str	r2, [r3, #0]
    
  // Enable the peripheral
	audioDMA->CR |=  DMA_SxCR_EN;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	601a      	str	r2, [r3, #0]
  return;	
 800223a:	bf00      	nop
}
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	400260b8 	.word	0x400260b8
 800224c:	40003c0c 	.word	0x40003c0c
 8002250:	40026000 	.word	0x40026000

08002254 <myAudioStartPlaying>:

void myAudioStartPlaying(int16_t *PlayBuff, uint32_t PBSIZE) {	
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]

	// The original program checked that PBSIZE wasn't greater than 32766, might
	// it be worth adding this check in here as well?
	uint8_t audioI2CAddress = DAC_ADDR_ON_I2C;
 800225e:	2394      	movs	r3, #148	; 0x94
 8002260:	73fb      	strb	r3, [r7, #15]
	cs43l22_Play(audioI2CAddress, (uint16_t *)&PlayBuff[0], PBSIZE);
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	b29b      	uxth	r3, r3
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	b292      	uxth	r2, r2
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f9a5 	bl	80025bc <cs43l22_Play>

	// Then it just calls setupDMAForAudioDAC()
	uint32_t tmp = (uint32_t)PlayBuff;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60bb      	str	r3, [r7, #8]
	setupDMAForAudioDAC(tmp, PBSIZE);
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	68b8      	ldr	r0, [r7, #8]
 800227a:	f7ff ffa9 	bl	80021d0 <setupDMAForAudioDAC>
	
	// Enable the I2S peripheral if not already enabled:
  if ((SPI3->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <myAudioStartPlaying+0x64>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	d005      	beq.n	8002298 <myAudioStartPlaying+0x44>
  {
		SPI3->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <myAudioStartPlaying+0x64>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <myAudioStartPlaying+0x64>)
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	61d3      	str	r3, [r2, #28]
  }
	
	// Finally, if the I2S Tx request is not enabled, enable it:
	if ((SPI3->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN) {
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <myAudioStartPlaying+0x64>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d005      	beq.n	80022b0 <myAudioStartPlaying+0x5c>
		SPI3->CR2 |= SPI_CR2_TXDMAEN;
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <myAudioStartPlaying+0x64>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <myAudioStartPlaying+0x64>)
 80022aa:	f043 0302 	orr.w	r3, r3, #2
 80022ae:	6053      	str	r3, [r2, #4]
	}
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40003c00 	.word	0x40003c00

080022bc <DMA1_Stream7_IRQHandler>:

// I'll need an interrupt handler for the DMA1_Stream7 interrupts here.
void DMA1_Stream7_IRQHandler(){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
	//
	// Functions are to check what sort of event has caused the interrupt, and act
	// accordingly.  In this case that means doing nothing XXX if there is an error,
	// but calling the callback functions for the half-transfer and transfer complete.
	
	uint32_t maskHISRChannel7 = 0x0F400000;
 80022c2:	f04f 6374 	mov.w	r3, #255852544	; 0xf400000
 80022c6:	607b      	str	r3, [r7, #4]
	uint32_t interruptBits = (DMA1->HISR & maskHISRChannel7) >> DMA_HISR_FEIF7_Pos;
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <DMA1_Stream7_IRQHandler+0xb0>)
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4013      	ands	r3, r2
 80022d0:	0d9b      	lsrs	r3, r3, #22
 80022d2:	603b      	str	r3, [r7, #0]
	DMA1->HIFCR = maskHISRChannel7;  // Clear any pending interrupt requests
 80022d4:	4a25      	ldr	r2, [pc, #148]	; (800236c <DMA1_Stream7_IRQHandler+0xb0>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60d3      	str	r3, [r2, #12]
	
	if (interruptBits & 0x01) {  // FIFO error
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <DMA1_Stream7_IRQHandler+0x2e>
		audioDMAStatus = MY_AUDIO_ERROR;
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <DMA1_Stream7_IRQHandler+0xb4>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
	}
	if (interruptBits & 0x04) {  // DMA error
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <DMA1_Stream7_IRQHandler+0x3e>
		audioDMAStatus = MY_AUDIO_ERROR;
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <DMA1_Stream7_IRQHandler+0xb4>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
	}
	if (interruptBits & 0x08) {  // Transfer error
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <DMA1_Stream7_IRQHandler+0x4e>
		audioDMAStatus = MY_AUDIO_ERROR;
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <DMA1_Stream7_IRQHandler+0xb4>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
	}
	if (interruptBits & 0x10) {  // Half-transfer interrupt
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00d      	beq.n	8002330 <DMA1_Stream7_IRQHandler+0x74>
		// If not in circular mode, reset the half-transfer interrupt enable.
    // This does happen in the original code, as circular mode is not used.
    // The interrupt is then re-enabled when myAudioChangeBuffer() is
		// called.  I'm not sure why these interrupts are disabled and re-enabled
		// every time through the buffer.  XXX Maybe try it without at some point?
		if ((DMA1_Stream7->CR & DMA_SxCR_CIRC) == 0) {
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <DMA1_Stream7_IRQHandler+0xb8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <DMA1_Stream7_IRQHandler+0x70>
			DMA1_Stream7->CR &= ~DMA_SxCR_HTIE;
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <DMA1_Stream7_IRQHandler+0xb8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a13      	ldr	r2, [pc, #76]	; (8002374 <DMA1_Stream7_IRQHandler+0xb8>)
 8002326:	f023 0308 	bic.w	r3, r3, #8
 800232a:	6013      	str	r3, [r2, #0]
		}
		myAudioHalfTransferCallback();
 800232c:	f000 faa8 	bl	8002880 <myAudioHalfTransferCallback>
	}
	if (interruptBits & 0x20) {  // Transfer complete interrupt
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d013      	beq.n	8002362 <DMA1_Stream7_IRQHandler+0xa6>
		// If not in circular mode, clear the transmit complete interrupt (see above):
		if ((DMA1_Stream7->CR & DMA_SxCR_CIRC) == 0) {
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <DMA1_Stream7_IRQHandler+0xb8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <DMA1_Stream7_IRQHandler+0x96>
			DMA1_Stream7->CR &= ~DMA_SxCR_TCIE;
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <DMA1_Stream7_IRQHandler+0xb8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <DMA1_Stream7_IRQHandler+0xb8>)
 800234c:	f023 0310 	bic.w	r3, r3, #16
 8002350:	6013      	str	r3, [r2, #0]
		}
		// Clear the transmit DMA enable bit in the I2S3 peripheral to suspend the DMA:
		SPI3->CR2 &= ~SPI_CR2_TXDMAEN;
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <DMA1_Stream7_IRQHandler+0xbc>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a08      	ldr	r2, [pc, #32]	; (8002378 <DMA1_Stream7_IRQHandler+0xbc>)
 8002358:	f023 0302 	bic.w	r3, r3, #2
 800235c:	6053      	str	r3, [r2, #4]
		// Call the user function:
		myAudioTransferCompleteCallback();
 800235e:	f000 fa9b 	bl	8002898 <myAudioTransferCompleteCallback>
	}	
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40026000 	.word	0x40026000
 8002370:	20000001 	.word	0x20000001
 8002374:	400260b8 	.word	0x400260b8
 8002378:	40003c00 	.word	0x40003c00

0800237c <myAudioChangeBuffer>:

void myAudioChangeBuffer(int16_t *pData, uint32_t size){	
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]

	// A bit of sanity checking: prevent chaos if input makes no sense:
  if((pData == 0U) || (size < 16U))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02a      	beq.n	80023e2 <myAudioChangeBuffer+0x66>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	d927      	bls.n	80023e2 <myAudioChangeBuffer+0x66>
  {
    return;
  }	

  // Enable the Tx DMA Stream:
  uint32_t tmp = (uint32_t)pData;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]
  setupDMAForAudioDAC(tmp, size * 2);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4619      	mov	r1, r3
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f7ff ff17 	bl	80021d0 <setupDMAForAudioDAC>

  // Check if the I2S is already enabled, and if not enable it:
	if ((AudioI2S->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE) {
 80023a2:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <myAudioChangeBuffer+0x74>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b0:	d007      	beq.n	80023c2 <myAudioChangeBuffer+0x46>
		AudioI2S->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <myAudioChangeBuffer+0x74>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <myAudioChangeBuffer+0x74>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023c0:	61da      	str	r2, [r3, #28]
	}

  // Check if the I2S Tx request is already enabled, and if not enable it:
  if((AudioI2S->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN)
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <myAudioChangeBuffer+0x74>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d00a      	beq.n	80023e6 <myAudioChangeBuffer+0x6a>
  {
		AudioI2S->CR2 |= SPI_CR2_TXDMAEN;
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <myAudioChangeBuffer+0x74>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <myAudioChangeBuffer+0x74>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0202 	orr.w	r2, r2, #2
 80023de:	605a      	str	r2, [r3, #4]
  }
  return;
 80023e0:	e001      	b.n	80023e6 <myAudioChangeBuffer+0x6a>
    return;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <myAudioChangeBuffer+0x6c>
  return;
 80023e6:	bf00      	nop
}
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008

080023f4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	4603      	mov	r3, r0
 80023fe:	81fb      	strh	r3, [r7, #14]
 8002400:	460b      	mov	r3, r1
 8002402:	81bb      	strh	r3, [r7, #12]
 8002404:	4613      	mov	r3, r2
 8002406:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 800240c:	f7ff fd0a 	bl	8001e24 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2201      	movs	r2, #1
 8002416:	2102      	movs	r1, #2
 8002418:	4618      	mov	r0, r3
 800241a:	f000 f9c5 	bl	80027a8 <CODEC_IO_Write>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4413      	add	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8002428:	89bb      	ldrh	r3, [r7, #12]
 800242a:	3b01      	subs	r3, #1
 800242c:	2b03      	cmp	r3, #3
 800242e:	d81b      	bhi.n	8002468 <cs43l22_Init+0x74>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <cs43l22_Init+0x44>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002449 	.word	0x08002449
 800243c:	08002451 	.word	0x08002451
 8002440:	08002459 	.word	0x08002459
 8002444:	08002461 	.word	0x08002461
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8002448:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <cs43l22_Init+0x1c4>)
 800244a:	22fa      	movs	r2, #250	; 0xfa
 800244c:	701a      	strb	r2, [r3, #0]
    break;
 800244e:	e00f      	b.n	8002470 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <cs43l22_Init+0x1c4>)
 8002452:	22af      	movs	r2, #175	; 0xaf
 8002454:	701a      	strb	r2, [r3, #0]
    break;
 8002456:	e00b      	b.n	8002470 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8002458:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <cs43l22_Init+0x1c4>)
 800245a:	22aa      	movs	r2, #170	; 0xaa
 800245c:	701a      	strb	r2, [r3, #0]
    break;
 800245e:	e007      	b.n	8002470 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8002460:	4b55      	ldr	r3, [pc, #340]	; (80025b8 <cs43l22_Init+0x1c4>)
 8002462:	2205      	movs	r2, #5
 8002464:	701a      	strb	r2, [r3, #0]
    break;    
 8002466:	e003      	b.n	8002470 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8002468:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <cs43l22_Init+0x1c4>)
 800246a:	2205      	movs	r2, #5
 800246c:	701a      	strb	r2, [r3, #0]
    break;    
 800246e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8002470:	89fb      	ldrh	r3, [r7, #14]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4a50      	ldr	r2, [pc, #320]	; (80025b8 <cs43l22_Init+0x1c4>)
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	2104      	movs	r1, #4
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f993 	bl	80027a8 <CODEC_IO_Write>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4413      	add	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 800248c:	89fb      	ldrh	r3, [r7, #14]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2281      	movs	r2, #129	; 0x81
 8002492:	2105      	movs	r1, #5
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f987 	bl	80027a8 <CODEC_IO_Write>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	4413      	add	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 80024a4:	89fb      	ldrh	r3, [r7, #14]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2204      	movs	r2, #4
 80024aa:	2106      	movs	r1, #6
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f97b 	bl	80027a8 <CODEC_IO_Write>
 80024b2:	4603      	mov	r3, r0
 80024b4:	461a      	mov	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4413      	add	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 80024bc:	7afa      	ldrb	r2, [r7, #11]
 80024be:	89fb      	ldrh	r3, [r7, #14]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f8b4 	bl	8002630 <cs43l22_SetVolume>
 80024c8:	4602      	mov	r2, r0
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4413      	add	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 80024d0:	89bb      	ldrh	r3, [r7, #12]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d023      	beq.n	800251e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 80024d6:	89fb      	ldrh	r3, [r7, #14]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2206      	movs	r2, #6
 80024dc:	210f      	movs	r1, #15
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f962 	bl	80027a8 <CODEC_IO_Write>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	4413      	add	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80024ee:	89fb      	ldrh	r3, [r7, #14]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2200      	movs	r2, #0
 80024f4:	2124      	movs	r1, #36	; 0x24
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f956 	bl	80027a8 <CODEC_IO_Write>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461a      	mov	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	4413      	add	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8002506:	89fb      	ldrh	r3, [r7, #14]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2200      	movs	r2, #0
 800250c:	2125      	movs	r1, #37	; 0x25
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f94a 	bl	80027a8 <CODEC_IO_Write>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	4413      	add	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2200      	movs	r2, #0
 8002524:	210a      	movs	r1, #10
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f93e 	bl	80027a8 <CODEC_IO_Write>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4413      	add	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2204      	movs	r2, #4
 800253c:	210e      	movs	r1, #14
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f932 	bl	80027a8 <CODEC_IO_Write>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	4413      	add	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2200      	movs	r2, #0
 8002554:	2127      	movs	r1, #39	; 0x27
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f926 	bl	80027a8 <CODEC_IO_Write>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4413      	add	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	220f      	movs	r2, #15
 800256c:	211f      	movs	r1, #31
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f91a 	bl	80027a8 <CODEC_IO_Write>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4413      	add	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 800257e:	89fb      	ldrh	r3, [r7, #14]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	220a      	movs	r2, #10
 8002584:	211a      	movs	r1, #26
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f90e 	bl	80027a8 <CODEC_IO_Write>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4413      	add	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	220a      	movs	r2, #10
 800259c:	211b      	movs	r1, #27
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f902 	bl	80027a8 <CODEC_IO_Write>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4413      	add	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 80025ae:	697b      	ldr	r3, [r7, #20]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000038 	.word	0x20000038

080025bc <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	80fb      	strh	r3, [r7, #6]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <cs43l22_Play+0x70>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d123      	bne.n	8002620 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2206      	movs	r2, #6
 80025de:	210e      	movs	r1, #14
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f8e1 	bl	80027a8 <CODEC_IO_Write>
 80025e6:	4603      	mov	r3, r0
 80025e8:	461a      	mov	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f879 	bl	80026ec <cs43l22_SetMute>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4413      	add	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	229e      	movs	r2, #158	; 0x9e
 8002608:	2102      	movs	r1, #2
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f8cc 	bl	80027a8 <CODEC_IO_Write>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <cs43l22_Play+0x70>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8002620:	68fb      	ldr	r3, [r7, #12]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000010 	.word	0x20000010

08002630 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	460a      	mov	r2, r1
 800263a:	80fb      	strh	r3, [r7, #6]
 800263c:	4613      	mov	r3, r2
 800263e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002644:	797b      	ldrb	r3, [r7, #5]
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d80b      	bhi.n	8002662 <cs43l22_SetVolume+0x32>
 800264a:	797a      	ldrb	r2, [r7, #5]
 800264c:	4613      	mov	r3, r2
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <cs43l22_SetVolume+0xb8>)
 8002654:	fb82 1203 	smull	r1, r2, r2, r3
 8002658:	1152      	asrs	r2, r2, #5
 800265a:	17db      	asrs	r3, r3, #31
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e000      	b.n	8002664 <cs43l22_SetVolume+0x34>
 8002662:	23ff      	movs	r3, #255	; 0xff
 8002664:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 8002666:	7afb      	ldrb	r3, [r7, #11]
 8002668:	2be6      	cmp	r3, #230	; 0xe6
 800266a:	d91c      	bls.n	80026a6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	b2d8      	uxtb	r0, r3
 8002670:	7afb      	ldrb	r3, [r7, #11]
 8002672:	3319      	adds	r3, #25
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	2120      	movs	r1, #32
 800267a:	f000 f895 	bl	80027a8 <CODEC_IO_Write>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	b2d8      	uxtb	r0, r3
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	3319      	adds	r3, #25
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	2121      	movs	r1, #33	; 0x21
 8002696:	f000 f887 	bl	80027a8 <CODEC_IO_Write>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e01b      	b.n	80026de <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	b2d8      	uxtb	r0, r3
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	3319      	adds	r3, #25
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	2120      	movs	r1, #32
 80026b4:	f000 f878 	bl	80027a8 <CODEC_IO_Write>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	b2d8      	uxtb	r0, r3
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	3319      	adds	r3, #25
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	2121      	movs	r1, #33	; 0x21
 80026d0:	f000 f86a 	bl	80027a8 <CODEC_IO_Write>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	51eb851f 	.word	0x51eb851f

080026ec <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d124      	bne.n	800274c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	2104      	movs	r1, #4
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f84c 	bl	80027a8 <CODEC_IO_Write>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2201      	movs	r2, #1
 8002720:	2122      	movs	r1, #34	; 0x22
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f840 	bl	80027a8 <CODEC_IO_Write>
 8002728:	4603      	mov	r3, r0
 800272a:	461a      	mov	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4413      	add	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2201      	movs	r2, #1
 8002738:	2123      	movs	r1, #35	; 0x23
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f834 	bl	80027a8 <CODEC_IO_Write>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e025      	b.n	8002798 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2200      	movs	r2, #0
 8002752:	2122      	movs	r1, #34	; 0x22
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f827 	bl	80027a8 <CODEC_IO_Write>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4413      	add	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2200      	movs	r2, #0
 800276a:	2123      	movs	r1, #35	; 0x23
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f81b 	bl	80027a8 <CODEC_IO_Write>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4413      	add	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <cs43l22_SetMute+0xb8>)
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	2104      	movs	r1, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f80d 	bl	80027a8 <CODEC_IO_Write>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000038 	.word	0x20000038

080027a8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
 80027b2:	460b      	mov	r3, r1
 80027b4:	71bb      	strb	r3, [r7, #6]
 80027b6:	4613      	mov	r3, r2
 80027b8:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80027be:	797a      	ldrb	r2, [r7, #5]
 80027c0:	79b9      	ldrb	r1, [r7, #6]
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fb34 	bl	8001e32 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	b2db      	uxtb	r3, r3
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <main>:

#include "sineWave.h"


int main(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
	setup();
 80027da:	f000 f8b1 	bl	8002940 <setup>
	flashGreen(); // Not functioning correctly
 80027de:	f000 f86b 	bl	80028b8 <flashGreen>

	while(1) {
		loopAudio();
 80027e2:	f000 f91b 	bl	8002a1c <loopAudio>
 80027e6:	e7fc      	b.n	80027e2 <main+0xc>

080027e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db0a      	blt.n	8002812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	490c      	ldr	r1, [pc, #48]	; (8002834 <__NVIC_SetPriority+0x4c>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	440b      	add	r3, r1
 800280c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002810:	e00a      	b.n	8002828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4908      	ldr	r1, [pc, #32]	; (8002838 <__NVIC_SetPriority+0x50>)
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3b04      	subs	r3, #4
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	440b      	add	r3, r1
 8002826:	761a      	strb	r2, [r3, #24]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000e100 	.word	0xe000e100
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002860:	f7ff ffc2 	bl	80027e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	; (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <myAudioHalfTransferCallback>:
int16_t SineBuff[SINELOOKUPSIZE];

enum eBufferStatus { empty, finished, firstHalfReq, firstHalfDone, secondHalfReq, secondHalfDone } bufferStatus = empty;

// Audio callback function protoypes
void myAudioHalfTransferCallback(void) {
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
	// First half of buffer is read
	bufferStatus = firstHalfReq;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <myAudioHalfTransferCallback+0x14>)
 8002886:	2202      	movs	r2, #2
 8002888:	701a      	strb	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	20000040 	.word	0x20000040

08002898 <myAudioTransferCompleteCallback>:

void myAudioTransferCompleteCallback(void) {
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	// Entire buffer contents read
	myAudioChangeBuffer(PlayBuff, PBSIZE);
 800289c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a0:	4803      	ldr	r0, [pc, #12]	; (80028b0 <myAudioTransferCompleteCallback+0x18>)
 80028a2:	f7ff fd6b 	bl	800237c <myAudioChangeBuffer>
	bufferStatus = secondHalfReq;
 80028a6:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <myAudioTransferCompleteCallback+0x1c>)
 80028a8:	2204      	movs	r2, #4
 80028aa:	701a      	strb	r2, [r3, #0]
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000048 	.word	0x20000048
 80028b4:	20000040 	.word	0x20000040

080028b8 <flashGreen>:


void flashGreen() {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	// Flashes green LED (PD12) to monitor performance when connected to oscilloscope probe
	// Needs to be adjusted as currently is always on
	SystemCoreClockUpdate();
 80028bc:	f000 f946 	bl	8002b4c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 2);
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <flashGreen+0x3c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	085b      	lsrs	r3, r3, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ffb8 	bl	800283c <SysTick_Config>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <flashGreen+0x40>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <flashGreen+0x40>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER &= ~GPIO_MODER_MODE12_Msk;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <flashGreen+0x44>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <flashGreen+0x44>)
 80028de:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80028e2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= 1 << GPIO_MODER_MODE12_Pos;
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <flashGreen+0x44>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a04      	ldr	r2, [pc, #16]	; (80028fc <flashGreen+0x44>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000018 	.word	0x20000018
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020c00 	.word	0x40020c00

08002900 <SysTick_Handler>:

void SysTick_Handler() {
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
	// Interrupt handler - not a 100% on this
	static uint32_t count = 0;

	if ((count++ % 2) == 0) {
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <SysTick_Handler+0x34>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	490a      	ldr	r1, [pc, #40]	; (8002934 <SysTick_Handler+0x34>)
 800290c:	600a      	str	r2, [r1, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <SysTick_Handler+0x20>
		GPIOD->BSRR = 0x1 << 12;
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <SysTick_Handler+0x38>)
 8002918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800291c:	619a      	str	r2, [r3, #24]
	}
	else {
		GPIOD->BSRR = 0x1 << 28;
	}
}
 800291e:	e003      	b.n	8002928 <SysTick_Handler+0x28>
		GPIOD->BSRR = 0x1 << 28;
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SysTick_Handler+0x38>)
 8002922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002926:	619a      	str	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000044 	.word	0x20000044
 8002938:	40020c00 	.word	0x40020c00
 800293c:	00000000 	.word	0x00000000

08002940 <setup>:

void setup() {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
	// Sets up timer, peripherals & DAC and programs chip to run at 168 MHz
	initAudioTimer();
 8002946:	f7fe fba1 	bl	800108c <initAudioTimer>
	myAudioSpeedUpTheSystemClock();
 800294a:	f7fe fe25 	bl	8001598 <myAudioSpeedUpTheSystemClock>
	myAudioInitialisePeripherals(OUTPUT_DEVICE_AUTO, 80, AUDIO_FREQUENCY_44K); // Board output, volume, sample rate
 800294e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002952:	2150      	movs	r1, #80	; 0x50
 8002954:	2004      	movs	r0, #4
 8002956:	f7ff fbf7 	bl	8002148 <myAudioInitialisePeripherals>
	// Output options: OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_AUTO or OUTPUT_DEVICE_BOTH

	SysTick_Handler(); // Need this here otherwise flashGreen() doesn't work
 800295a:	f7ff ffd1 	bl	8002900 <SysTick_Handler>

	// Create lookup table and fill with sin values
	for (int i = 0; i <= SINELOOKUPSIZE; i++) {
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	e03f      	b.n	80029e4 <setup+0xa4>
		float q = 32760 * sin(i * 2.0 * PI / SINELOOKUPSIZE);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7fd fd91 	bl	800048c <__aeabi_i2d>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	f7fd fc41 	bl	80001f4 <__adddf3>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	a326      	add	r3, pc, #152	; (adr r3, 8002a14 <setup+0xd4>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fdee 	bl	8000560 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <setup+0xc8>)
 8002992:	f7fd ff0f 	bl	80007b4 <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	ec43 2b17 	vmov	d7, r2, r3
 800299e:	eeb0 0a47 	vmov.f32	s0, s14
 80029a2:	eef0 0a67 	vmov.f32	s1, s15
 80029a6:	f000 f99f 	bl	8002ce8 <sin>
 80029aa:	ec51 0b10 	vmov	r0, r1, d0
 80029ae:	a314      	add	r3, pc, #80	; (adr r3, 8002a00 <setup+0xc0>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fdd4 	bl	8000560 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fe f890 	bl	8000ae4 <__aeabi_d2f>
 80029c4:	4603      	mov	r3, r0
 80029c6:	603b      	str	r3, [r7, #0]
		SineBuff[i] = (int16_t)q;
 80029c8:	edd7 7a00 	vldr	s15, [r7]
 80029cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d0:	ee17 3a90 	vmov	r3, s15
 80029d4:	b219      	sxth	r1, r3
 80029d6:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <setup+0xcc>)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i <= SINELOOKUPSIZE; i++) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3301      	adds	r3, #1
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ea:	ddbb      	ble.n	8002964 <setup+0x24>
	}

	myAudioStartPlaying(PlayBuff, PBSIZE); // Play buffer contents
 80029ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029f0:	4807      	ldr	r0, [pc, #28]	; (8002a10 <setup+0xd0>)
 80029f2:	f7ff fc2f 	bl	8002254 <myAudioStartPlaying>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	00000000 	.word	0x00000000
 8002a04:	40dffe00 	.word	0x40dffe00
 8002a08:	40900000 	.word	0x40900000
 8002a0c:	20002048 	.word	0x20002048
 8002a10:	20000048 	.word	0x20000048
 8002a14:	54442c46 	.word	0x54442c46
 8002a18:	400921fb 	.word	0x400921fb

08002a1c <loopAudio>:

void loopAudio() {
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
	float phaseInc = SINELOOKUPSIZE * freq / AUDIO_FREQUENCY_44K;
 8002a22:	4b3a      	ldr	r3, [pc, #232]	; (8002b0c <loopAudio+0xf0>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002b10 <loopAudio+0xf4>
 8002a2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a30:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b14 <loopAudio+0xf8>
 8002a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a38:	edc7 7a02 	vstr	s15, [r7, #8]

	// If there's been a request to fill half of the buffer,
	// then set the start and end points to fill:
	uint32_t startFill = 0, endFill = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
	if (bufferStatus == firstHalfReq) {
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <loopAudio+0xfc>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d108      	bne.n	8002a5e <loopAudio+0x42>
		startFill = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
		endFill = PBSIZE / 2;
 8002a50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a54:	613b      	str	r3, [r7, #16]
		bufferStatus = firstHalfDone;
 8002a56:	4b30      	ldr	r3, [pc, #192]	; (8002b18 <loopAudio+0xfc>)
 8002a58:	2203      	movs	r2, #3
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e00c      	b.n	8002a78 <loopAudio+0x5c>
	}
	else if (bufferStatus == secondHalfReq) {
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <loopAudio+0xfc>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d108      	bne.n	8002a78 <loopAudio+0x5c>
		startFill = PBSIZE / 2;
 8002a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a6a:	617b      	str	r3, [r7, #20]
		endFill = PBSIZE;
 8002a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a70:	613b      	str	r3, [r7, #16]
		bufferStatus = secondHalfDone;
 8002a72:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <loopAudio+0xfc>)
 8002a74:	2205      	movs	r2, #5
 8002a76:	701a      	strb	r2, [r3, #0]
	}

	if (startFill != endFill) {
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d03f      	beq.n	8002b00 <loopAudio+0xe4>
		for (int i = startFill; i < endFill; i += 2) {
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e038      	b.n	8002af8 <loopAudio+0xdc>
			currentPhase += phaseInc;
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <loopAudio+0x100>)
 8002a88:	ed93 7a00 	vldr	s14, [r3]
 8002a8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <loopAudio+0x100>)
 8002a96:	edc3 7a00 	vstr	s15, [r3]
			if (currentPhase > SINELOOKUPSIZE) currentPhase -= SINELOOKUPSIZE;
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <loopAudio+0x100>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002b10 <loopAudio+0xf4>
 8002aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aac:	dd09      	ble.n	8002ac2 <loopAudio+0xa6>
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <loopAudio+0x100>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002b10 <loopAudio+0xf4>
 8002ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <loopAudio+0x100>)
 8002abe:	edc3 7a00 	vstr	s15, [r3]
			int16_t nextSample = SineBuff[(uint16_t)(currentPhase)];
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <loopAudio+0x100>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002acc:	ee17 3a90 	vmov	r3, s15
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <loopAudio+0x104>)
 8002ad6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002ada:	80fb      	strh	r3, [r7, #6]
			PlayBuff[i] = nextSample;
 8002adc:	4911      	ldr	r1, [pc, #68]	; (8002b24 <loopAudio+0x108>)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[i + 1] = nextSample;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	490e      	ldr	r1, [pc, #56]	; (8002b24 <loopAudio+0x108>)
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = startFill; i < endFill; i += 2) {
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3302      	adds	r3, #2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d8c2      	bhi.n	8002a86 <loopAudio+0x6a>
		}
	}
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	20000014 	.word	0x20000014
 8002b10:	44800000 	.word	0x44800000
 8002b14:	472c4400 	.word	0x472c4400
 8002b18:	20000040 	.word	0x20000040
 8002b1c:	2000003c 	.word	0x2000003c
 8002b20:	20002048 	.word	0x20002048
 8002b24:	20000048 	.word	0x20000048

08002b28 <SystemInit>:
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <SystemInit+0x20>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <SystemInit+0x20>)
 8002b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <SystemCoreClockUpdate>:
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	2302      	movs	r3, #2
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <SystemCoreClockUpdate+0xec>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d011      	beq.n	8002b9a <SystemCoreClockUpdate+0x4e>
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d844      	bhi.n	8002c06 <SystemCoreClockUpdate+0xba>
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <SystemCoreClockUpdate+0x3e>
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d004      	beq.n	8002b92 <SystemCoreClockUpdate+0x46>
 8002b88:	e03d      	b.n	8002c06 <SystemCoreClockUpdate+0xba>
 8002b8a:	4b2c      	ldr	r3, [pc, #176]	; (8002c3c <SystemCoreClockUpdate+0xf0>)
 8002b8c:	4a2c      	ldr	r2, [pc, #176]	; (8002c40 <SystemCoreClockUpdate+0xf4>)
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e03d      	b.n	8002c0e <SystemCoreClockUpdate+0xc2>
 8002b92:	4b2a      	ldr	r3, [pc, #168]	; (8002c3c <SystemCoreClockUpdate+0xf0>)
 8002b94:	4a2b      	ldr	r2, [pc, #172]	; (8002c44 <SystemCoreClockUpdate+0xf8>)
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e039      	b.n	8002c0e <SystemCoreClockUpdate+0xc2>
 8002b9a:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <SystemCoreClockUpdate+0xec>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0d9b      	lsrs	r3, r3, #22
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <SystemCoreClockUpdate+0xec>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <SystemCoreClockUpdate+0x84>
 8002bb6:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <SystemCoreClockUpdate+0xf8>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <SystemCoreClockUpdate+0xec>)
 8002bc0:	6852      	ldr	r2, [r2, #4]
 8002bc2:	0992      	lsrs	r2, r2, #6
 8002bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e00b      	b.n	8002be8 <SystemCoreClockUpdate+0x9c>
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <SystemCoreClockUpdate+0xf4>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <SystemCoreClockUpdate+0xec>)
 8002bda:	6852      	ldr	r2, [r2, #4]
 8002bdc:	0992      	lsrs	r2, r2, #6
 8002bde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <SystemCoreClockUpdate+0xec>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	4a0e      	ldr	r2, [pc, #56]	; (8002c3c <SystemCoreClockUpdate+0xf0>)
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	e003      	b.n	8002c0e <SystemCoreClockUpdate+0xc2>
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <SystemCoreClockUpdate+0xf0>)
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <SystemCoreClockUpdate+0xf4>)
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	bf00      	nop
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <SystemCoreClockUpdate+0xec>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <SystemCoreClockUpdate+0xfc>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <SystemCoreClockUpdate+0xf0>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <SystemCoreClockUpdate+0xf0>)
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	20000018 	.word	0x20000018
 8002c40:	00f42400 	.word	0x00f42400
 8002c44:	017d7840 	.word	0x017d7840
 8002c48:	08003df0 	.word	0x08003df0

08002c4c <Reset_Handler>:
 8002c4c:	480d      	ldr	r0, [pc, #52]	; (8002c84 <LoopForever+0x2>)
 8002c4e:	4685      	mov	sp, r0
 8002c50:	f7ff ff6a 	bl	8002b28 <SystemInit>
 8002c54:	480c      	ldr	r0, [pc, #48]	; (8002c88 <LoopForever+0x6>)
 8002c56:	490d      	ldr	r1, [pc, #52]	; (8002c8c <LoopForever+0xa>)
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <LoopForever+0xe>)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e002      	b.n	8002c64 <LoopCopyDataInit>

08002c5e <CopyDataInit>:
 8002c5e:	58d4      	ldr	r4, [r2, r3]
 8002c60:	50c4      	str	r4, [r0, r3]
 8002c62:	3304      	adds	r3, #4

08002c64 <LoopCopyDataInit>:
 8002c64:	18c4      	adds	r4, r0, r3
 8002c66:	428c      	cmp	r4, r1
 8002c68:	d3f9      	bcc.n	8002c5e <CopyDataInit>
 8002c6a:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <LoopForever+0x12>)
 8002c6c:	4c0a      	ldr	r4, [pc, #40]	; (8002c98 <LoopForever+0x16>)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e001      	b.n	8002c76 <LoopFillZerobss>

08002c72 <FillZerobss>:
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	3204      	adds	r2, #4

08002c76 <LoopFillZerobss>:
 8002c76:	42a2      	cmp	r2, r4
 8002c78:	d3fb      	bcc.n	8002c72 <FillZerobss>
 8002c7a:	f000 f811 	bl	8002ca0 <__libc_init_array>
 8002c7e:	f7ff fdaa 	bl	80027d6 <main>

08002c82 <LoopForever>:
 8002c82:	e7fe      	b.n	8002c82 <LoopForever>
 8002c84:	20020000 	.word	0x20020000
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	2000001c 	.word	0x2000001c
 8002c90:	08003ff0 	.word	0x08003ff0
 8002c94:	2000001c 	.word	0x2000001c
 8002c98:	20002848 	.word	0x20002848

08002c9c <ADC_IRQHandler>:
 8002c9c:	e7fe      	b.n	8002c9c <ADC_IRQHandler>
	...

08002ca0 <__libc_init_array>:
 8002ca0:	b570      	push	{r4, r5, r6, lr}
 8002ca2:	4d0d      	ldr	r5, [pc, #52]	; (8002cd8 <__libc_init_array+0x38>)
 8002ca4:	4c0d      	ldr	r4, [pc, #52]	; (8002cdc <__libc_init_array+0x3c>)
 8002ca6:	1b64      	subs	r4, r4, r5
 8002ca8:	10a4      	asrs	r4, r4, #2
 8002caa:	2600      	movs	r6, #0
 8002cac:	42a6      	cmp	r6, r4
 8002cae:	d109      	bne.n	8002cc4 <__libc_init_array+0x24>
 8002cb0:	4d0b      	ldr	r5, [pc, #44]	; (8002ce0 <__libc_init_array+0x40>)
 8002cb2:	4c0c      	ldr	r4, [pc, #48]	; (8002ce4 <__libc_init_array+0x44>)
 8002cb4:	f001 f84e 	bl	8003d54 <_init>
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	2600      	movs	r6, #0
 8002cbe:	42a6      	cmp	r6, r4
 8002cc0:	d105      	bne.n	8002cce <__libc_init_array+0x2e>
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc8:	4798      	blx	r3
 8002cca:	3601      	adds	r6, #1
 8002ccc:	e7ee      	b.n	8002cac <__libc_init_array+0xc>
 8002cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd2:	4798      	blx	r3
 8002cd4:	3601      	adds	r6, #1
 8002cd6:	e7f2      	b.n	8002cbe <__libc_init_array+0x1e>
 8002cd8:	08003fe8 	.word	0x08003fe8
 8002cdc:	08003fe8 	.word	0x08003fe8
 8002ce0:	08003fe8 	.word	0x08003fe8
 8002ce4:	08003fec 	.word	0x08003fec

08002ce8 <sin>:
 8002ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002cea:	ec53 2b10 	vmov	r2, r3, d0
 8002cee:	4826      	ldr	r0, [pc, #152]	; (8002d88 <sin+0xa0>)
 8002cf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002cf4:	4281      	cmp	r1, r0
 8002cf6:	dc07      	bgt.n	8002d08 <sin+0x20>
 8002cf8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8002d80 <sin+0x98>
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f000 fe5b 	bl	80039b8 <__kernel_sin>
 8002d02:	ec51 0b10 	vmov	r0, r1, d0
 8002d06:	e007      	b.n	8002d18 <sin+0x30>
 8002d08:	4820      	ldr	r0, [pc, #128]	; (8002d8c <sin+0xa4>)
 8002d0a:	4281      	cmp	r1, r0
 8002d0c:	dd09      	ble.n	8002d22 <sin+0x3a>
 8002d0e:	ee10 0a10 	vmov	r0, s0
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7fd fa6c 	bl	80001f0 <__aeabi_dsub>
 8002d18:	ec41 0b10 	vmov	d0, r0, r1
 8002d1c:	b005      	add	sp, #20
 8002d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d22:	4668      	mov	r0, sp
 8002d24:	f000 f834 	bl	8002d90 <__ieee754_rem_pio2>
 8002d28:	f000 0003 	and.w	r0, r0, #3
 8002d2c:	2801      	cmp	r0, #1
 8002d2e:	d008      	beq.n	8002d42 <sin+0x5a>
 8002d30:	2802      	cmp	r0, #2
 8002d32:	d00d      	beq.n	8002d50 <sin+0x68>
 8002d34:	b9d0      	cbnz	r0, 8002d6c <sin+0x84>
 8002d36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002d3a:	ed9d 0b00 	vldr	d0, [sp]
 8002d3e:	2001      	movs	r0, #1
 8002d40:	e7dd      	b.n	8002cfe <sin+0x16>
 8002d42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002d46:	ed9d 0b00 	vldr	d0, [sp]
 8002d4a:	f000 fa2d 	bl	80031a8 <__kernel_cos>
 8002d4e:	e7d8      	b.n	8002d02 <sin+0x1a>
 8002d50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002d54:	ed9d 0b00 	vldr	d0, [sp]
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f000 fe2d 	bl	80039b8 <__kernel_sin>
 8002d5e:	ec53 2b10 	vmov	r2, r3, d0
 8002d62:	ee10 0a10 	vmov	r0, s0
 8002d66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002d6a:	e7d5      	b.n	8002d18 <sin+0x30>
 8002d6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002d70:	ed9d 0b00 	vldr	d0, [sp]
 8002d74:	f000 fa18 	bl	80031a8 <__kernel_cos>
 8002d78:	e7f1      	b.n	8002d5e <sin+0x76>
 8002d7a:	bf00      	nop
 8002d7c:	f3af 8000 	nop.w
	...
 8002d88:	3fe921fb 	.word	0x3fe921fb
 8002d8c:	7fefffff 	.word	0x7fefffff

08002d90 <__ieee754_rem_pio2>:
 8002d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d94:	ed2d 8b02 	vpush	{d8}
 8002d98:	ec55 4b10 	vmov	r4, r5, d0
 8002d9c:	4bca      	ldr	r3, [pc, #808]	; (80030c8 <__ieee754_rem_pio2+0x338>)
 8002d9e:	b08b      	sub	sp, #44	; 0x2c
 8002da0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002da4:	4598      	cmp	r8, r3
 8002da6:	4682      	mov	sl, r0
 8002da8:	9502      	str	r5, [sp, #8]
 8002daa:	dc08      	bgt.n	8002dbe <__ieee754_rem_pio2+0x2e>
 8002dac:	2200      	movs	r2, #0
 8002dae:	2300      	movs	r3, #0
 8002db0:	ed80 0b00 	vstr	d0, [r0]
 8002db4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002db8:	f04f 0b00 	mov.w	fp, #0
 8002dbc:	e028      	b.n	8002e10 <__ieee754_rem_pio2+0x80>
 8002dbe:	4bc3      	ldr	r3, [pc, #780]	; (80030cc <__ieee754_rem_pio2+0x33c>)
 8002dc0:	4598      	cmp	r8, r3
 8002dc2:	dc78      	bgt.n	8002eb6 <__ieee754_rem_pio2+0x126>
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4ec2      	ldr	r6, [pc, #776]	; (80030d0 <__ieee754_rem_pio2+0x340>)
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	ee10 0a10 	vmov	r0, s0
 8002dce:	a3b0      	add	r3, pc, #704	; (adr r3, 8003090 <__ieee754_rem_pio2+0x300>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	dd39      	ble.n	8002e4c <__ieee754_rem_pio2+0xbc>
 8002dd8:	f7fd fa0a 	bl	80001f0 <__aeabi_dsub>
 8002ddc:	45b0      	cmp	r8, r6
 8002dde:	4604      	mov	r4, r0
 8002de0:	460d      	mov	r5, r1
 8002de2:	d01b      	beq.n	8002e1c <__ieee754_rem_pio2+0x8c>
 8002de4:	a3ac      	add	r3, pc, #688	; (adr r3, 8003098 <__ieee754_rem_pio2+0x308>)
 8002de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dea:	f7fd fa01 	bl	80001f0 <__aeabi_dsub>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	e9ca 2300 	strd	r2, r3, [sl]
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f7fd f9f9 	bl	80001f0 <__aeabi_dsub>
 8002dfe:	a3a6      	add	r3, pc, #664	; (adr r3, 8003098 <__ieee754_rem_pio2+0x308>)
 8002e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e04:	f7fd f9f4 	bl	80001f0 <__aeabi_dsub>
 8002e08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002e0c:	f04f 0b01 	mov.w	fp, #1
 8002e10:	4658      	mov	r0, fp
 8002e12:	b00b      	add	sp, #44	; 0x2c
 8002e14:	ecbd 8b02 	vpop	{d8}
 8002e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1c:	a3a0      	add	r3, pc, #640	; (adr r3, 80030a0 <__ieee754_rem_pio2+0x310>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd f9e5 	bl	80001f0 <__aeabi_dsub>
 8002e26:	a3a0      	add	r3, pc, #640	; (adr r3, 80030a8 <__ieee754_rem_pio2+0x318>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	460d      	mov	r5, r1
 8002e30:	f7fd f9de 	bl	80001f0 <__aeabi_dsub>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	e9ca 2300 	strd	r2, r3, [sl]
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd f9d6 	bl	80001f0 <__aeabi_dsub>
 8002e44:	a398      	add	r3, pc, #608	; (adr r3, 80030a8 <__ieee754_rem_pio2+0x318>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	e7db      	b.n	8002e04 <__ieee754_rem_pio2+0x74>
 8002e4c:	f7fd f9d2 	bl	80001f4 <__adddf3>
 8002e50:	45b0      	cmp	r8, r6
 8002e52:	4604      	mov	r4, r0
 8002e54:	460d      	mov	r5, r1
 8002e56:	d016      	beq.n	8002e86 <__ieee754_rem_pio2+0xf6>
 8002e58:	a38f      	add	r3, pc, #572	; (adr r3, 8003098 <__ieee754_rem_pio2+0x308>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f7fd f9c9 	bl	80001f4 <__adddf3>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	e9ca 2300 	strd	r2, r3, [sl]
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4629      	mov	r1, r5
 8002e6e:	f7fd f9bf 	bl	80001f0 <__aeabi_dsub>
 8002e72:	a389      	add	r3, pc, #548	; (adr r3, 8003098 <__ieee754_rem_pio2+0x308>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd f9bc 	bl	80001f4 <__adddf3>
 8002e7c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002e80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002e84:	e7c4      	b.n	8002e10 <__ieee754_rem_pio2+0x80>
 8002e86:	a386      	add	r3, pc, #536	; (adr r3, 80030a0 <__ieee754_rem_pio2+0x310>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd f9b2 	bl	80001f4 <__adddf3>
 8002e90:	a385      	add	r3, pc, #532	; (adr r3, 80030a8 <__ieee754_rem_pio2+0x318>)
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	4604      	mov	r4, r0
 8002e98:	460d      	mov	r5, r1
 8002e9a:	f7fd f9ab 	bl	80001f4 <__adddf3>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	e9ca 2300 	strd	r2, r3, [sl]
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	f7fd f9a1 	bl	80001f0 <__aeabi_dsub>
 8002eae:	a37e      	add	r3, pc, #504	; (adr r3, 80030a8 <__ieee754_rem_pio2+0x318>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	e7e0      	b.n	8002e78 <__ieee754_rem_pio2+0xe8>
 8002eb6:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <__ieee754_rem_pio2+0x344>)
 8002eb8:	4598      	cmp	r8, r3
 8002eba:	f300 80d9 	bgt.w	8003070 <__ieee754_rem_pio2+0x2e0>
 8002ebe:	f000 fe39 	bl	8003b34 <fabs>
 8002ec2:	ec55 4b10 	vmov	r4, r5, d0
 8002ec6:	ee10 0a10 	vmov	r0, s0
 8002eca:	a379      	add	r3, pc, #484	; (adr r3, 80030b0 <__ieee754_rem_pio2+0x320>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	f7fd fb45 	bl	8000560 <__aeabi_dmul>
 8002ed6:	4b80      	ldr	r3, [pc, #512]	; (80030d8 <__ieee754_rem_pio2+0x348>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f7fd f98b 	bl	80001f4 <__adddf3>
 8002ede:	f7fd fdd9 	bl	8000a94 <__aeabi_d2iz>
 8002ee2:	4683      	mov	fp, r0
 8002ee4:	f7fd fad2 	bl	800048c <__aeabi_i2d>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	ec43 2b18 	vmov	d8, r2, r3
 8002ef0:	a367      	add	r3, pc, #412	; (adr r3, 8003090 <__ieee754_rem_pio2+0x300>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f7fd fb33 	bl	8000560 <__aeabi_dmul>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4620      	mov	r0, r4
 8002f00:	4629      	mov	r1, r5
 8002f02:	f7fd f975 	bl	80001f0 <__aeabi_dsub>
 8002f06:	a364      	add	r3, pc, #400	; (adr r3, 8003098 <__ieee754_rem_pio2+0x308>)
 8002f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0c:	4606      	mov	r6, r0
 8002f0e:	460f      	mov	r7, r1
 8002f10:	ec51 0b18 	vmov	r0, r1, d8
 8002f14:	f7fd fb24 	bl	8000560 <__aeabi_dmul>
 8002f18:	f1bb 0f1f 	cmp.w	fp, #31
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	460d      	mov	r5, r1
 8002f20:	dc0d      	bgt.n	8002f3e <__ieee754_rem_pio2+0x1ae>
 8002f22:	4b6e      	ldr	r3, [pc, #440]	; (80030dc <__ieee754_rem_pio2+0x34c>)
 8002f24:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	4543      	cmp	r3, r8
 8002f2e:	d006      	beq.n	8002f3e <__ieee754_rem_pio2+0x1ae>
 8002f30:	4622      	mov	r2, r4
 8002f32:	462b      	mov	r3, r5
 8002f34:	4630      	mov	r0, r6
 8002f36:	4639      	mov	r1, r7
 8002f38:	f7fd f95a 	bl	80001f0 <__aeabi_dsub>
 8002f3c:	e00f      	b.n	8002f5e <__ieee754_rem_pio2+0x1ce>
 8002f3e:	462b      	mov	r3, r5
 8002f40:	4622      	mov	r2, r4
 8002f42:	4630      	mov	r0, r6
 8002f44:	4639      	mov	r1, r7
 8002f46:	f7fd f953 	bl	80001f0 <__aeabi_dsub>
 8002f4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002f4e:	9303      	str	r3, [sp, #12]
 8002f50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002f54:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8002f58:	f1b8 0f10 	cmp.w	r8, #16
 8002f5c:	dc02      	bgt.n	8002f64 <__ieee754_rem_pio2+0x1d4>
 8002f5e:	e9ca 0100 	strd	r0, r1, [sl]
 8002f62:	e039      	b.n	8002fd8 <__ieee754_rem_pio2+0x248>
 8002f64:	a34e      	add	r3, pc, #312	; (adr r3, 80030a0 <__ieee754_rem_pio2+0x310>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	ec51 0b18 	vmov	r0, r1, d8
 8002f6e:	f7fd faf7 	bl	8000560 <__aeabi_dmul>
 8002f72:	4604      	mov	r4, r0
 8002f74:	460d      	mov	r5, r1
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	4639      	mov	r1, r7
 8002f7e:	f7fd f937 	bl	80001f0 <__aeabi_dsub>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4680      	mov	r8, r0
 8002f88:	4689      	mov	r9, r1
 8002f8a:	4630      	mov	r0, r6
 8002f8c:	4639      	mov	r1, r7
 8002f8e:	f7fd f92f 	bl	80001f0 <__aeabi_dsub>
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	f7fd f92b 	bl	80001f0 <__aeabi_dsub>
 8002f9a:	a343      	add	r3, pc, #268	; (adr r3, 80030a8 <__ieee754_rem_pio2+0x318>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	460d      	mov	r5, r1
 8002fa4:	ec51 0b18 	vmov	r0, r1, d8
 8002fa8:	f7fd fada 	bl	8000560 <__aeabi_dmul>
 8002fac:	4622      	mov	r2, r4
 8002fae:	462b      	mov	r3, r5
 8002fb0:	f7fd f91e 	bl	80001f0 <__aeabi_dsub>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4604      	mov	r4, r0
 8002fba:	460d      	mov	r5, r1
 8002fbc:	4640      	mov	r0, r8
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	f7fd f916 	bl	80001f0 <__aeabi_dsub>
 8002fc4:	9a03      	ldr	r2, [sp, #12]
 8002fc6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b31      	cmp	r3, #49	; 0x31
 8002fce:	dc24      	bgt.n	800301a <__ieee754_rem_pio2+0x28a>
 8002fd0:	e9ca 0100 	strd	r0, r1, [sl]
 8002fd4:	4646      	mov	r6, r8
 8002fd6:	464f      	mov	r7, r9
 8002fd8:	e9da 8900 	ldrd	r8, r9, [sl]
 8002fdc:	4630      	mov	r0, r6
 8002fde:	4642      	mov	r2, r8
 8002fe0:	464b      	mov	r3, r9
 8002fe2:	4639      	mov	r1, r7
 8002fe4:	f7fd f904 	bl	80001f0 <__aeabi_dsub>
 8002fe8:	462b      	mov	r3, r5
 8002fea:	4622      	mov	r2, r4
 8002fec:	f7fd f900 	bl	80001f0 <__aeabi_dsub>
 8002ff0:	9b02      	ldr	r3, [sp, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002ff8:	f6bf af0a 	bge.w	8002e10 <__ieee754_rem_pio2+0x80>
 8002ffc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003000:	f8ca 3004 	str.w	r3, [sl, #4]
 8003004:	f8ca 8000 	str.w	r8, [sl]
 8003008:	f8ca 0008 	str.w	r0, [sl, #8]
 800300c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003010:	f8ca 300c 	str.w	r3, [sl, #12]
 8003014:	f1cb 0b00 	rsb	fp, fp, #0
 8003018:	e6fa      	b.n	8002e10 <__ieee754_rem_pio2+0x80>
 800301a:	a327      	add	r3, pc, #156	; (adr r3, 80030b8 <__ieee754_rem_pio2+0x328>)
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	ec51 0b18 	vmov	r0, r1, d8
 8003024:	f7fd fa9c 	bl	8000560 <__aeabi_dmul>
 8003028:	4604      	mov	r4, r0
 800302a:	460d      	mov	r5, r1
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4640      	mov	r0, r8
 8003032:	4649      	mov	r1, r9
 8003034:	f7fd f8dc 	bl	80001f0 <__aeabi_dsub>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4606      	mov	r6, r0
 800303e:	460f      	mov	r7, r1
 8003040:	4640      	mov	r0, r8
 8003042:	4649      	mov	r1, r9
 8003044:	f7fd f8d4 	bl	80001f0 <__aeabi_dsub>
 8003048:	4622      	mov	r2, r4
 800304a:	462b      	mov	r3, r5
 800304c:	f7fd f8d0 	bl	80001f0 <__aeabi_dsub>
 8003050:	a31b      	add	r3, pc, #108	; (adr r3, 80030c0 <__ieee754_rem_pio2+0x330>)
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	4604      	mov	r4, r0
 8003058:	460d      	mov	r5, r1
 800305a:	ec51 0b18 	vmov	r0, r1, d8
 800305e:	f7fd fa7f 	bl	8000560 <__aeabi_dmul>
 8003062:	4622      	mov	r2, r4
 8003064:	462b      	mov	r3, r5
 8003066:	f7fd f8c3 	bl	80001f0 <__aeabi_dsub>
 800306a:	4604      	mov	r4, r0
 800306c:	460d      	mov	r5, r1
 800306e:	e75f      	b.n	8002f30 <__ieee754_rem_pio2+0x1a0>
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <__ieee754_rem_pio2+0x350>)
 8003072:	4598      	cmp	r8, r3
 8003074:	dd36      	ble.n	80030e4 <__ieee754_rem_pio2+0x354>
 8003076:	ee10 2a10 	vmov	r2, s0
 800307a:	462b      	mov	r3, r5
 800307c:	4620      	mov	r0, r4
 800307e:	4629      	mov	r1, r5
 8003080:	f7fd f8b6 	bl	80001f0 <__aeabi_dsub>
 8003084:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003088:	e9ca 0100 	strd	r0, r1, [sl]
 800308c:	e694      	b.n	8002db8 <__ieee754_rem_pio2+0x28>
 800308e:	bf00      	nop
 8003090:	54400000 	.word	0x54400000
 8003094:	3ff921fb 	.word	0x3ff921fb
 8003098:	1a626331 	.word	0x1a626331
 800309c:	3dd0b461 	.word	0x3dd0b461
 80030a0:	1a600000 	.word	0x1a600000
 80030a4:	3dd0b461 	.word	0x3dd0b461
 80030a8:	2e037073 	.word	0x2e037073
 80030ac:	3ba3198a 	.word	0x3ba3198a
 80030b0:	6dc9c883 	.word	0x6dc9c883
 80030b4:	3fe45f30 	.word	0x3fe45f30
 80030b8:	2e000000 	.word	0x2e000000
 80030bc:	3ba3198a 	.word	0x3ba3198a
 80030c0:	252049c1 	.word	0x252049c1
 80030c4:	397b839a 	.word	0x397b839a
 80030c8:	3fe921fb 	.word	0x3fe921fb
 80030cc:	4002d97b 	.word	0x4002d97b
 80030d0:	3ff921fb 	.word	0x3ff921fb
 80030d4:	413921fb 	.word	0x413921fb
 80030d8:	3fe00000 	.word	0x3fe00000
 80030dc:	08003e08 	.word	0x08003e08
 80030e0:	7fefffff 	.word	0x7fefffff
 80030e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80030e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80030ec:	ee10 0a10 	vmov	r0, s0
 80030f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80030f4:	ee10 6a10 	vmov	r6, s0
 80030f8:	460f      	mov	r7, r1
 80030fa:	f7fd fccb 	bl	8000a94 <__aeabi_d2iz>
 80030fe:	f7fd f9c5 	bl	800048c <__aeabi_i2d>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4630      	mov	r0, r6
 8003108:	4639      	mov	r1, r7
 800310a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800310e:	f7fd f86f 	bl	80001f0 <__aeabi_dsub>
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <__ieee754_rem_pio2+0x40c>)
 8003114:	2200      	movs	r2, #0
 8003116:	f7fd fa23 	bl	8000560 <__aeabi_dmul>
 800311a:	460f      	mov	r7, r1
 800311c:	4606      	mov	r6, r0
 800311e:	f7fd fcb9 	bl	8000a94 <__aeabi_d2iz>
 8003122:	f7fd f9b3 	bl	800048c <__aeabi_i2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4630      	mov	r0, r6
 800312c:	4639      	mov	r1, r7
 800312e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003132:	f7fd f85d 	bl	80001f0 <__aeabi_dsub>
 8003136:	4b19      	ldr	r3, [pc, #100]	; (800319c <__ieee754_rem_pio2+0x40c>)
 8003138:	2200      	movs	r2, #0
 800313a:	f7fd fa11 	bl	8000560 <__aeabi_dmul>
 800313e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003142:	ad04      	add	r5, sp, #16
 8003144:	f04f 0803 	mov.w	r8, #3
 8003148:	46a9      	mov	r9, r5
 800314a:	2600      	movs	r6, #0
 800314c:	2700      	movs	r7, #0
 800314e:	4632      	mov	r2, r6
 8003150:	463b      	mov	r3, r7
 8003152:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003156:	46c3      	mov	fp, r8
 8003158:	3d08      	subs	r5, #8
 800315a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800315e:	f7fd fc67 	bl	8000a30 <__aeabi_dcmpeq>
 8003162:	2800      	cmp	r0, #0
 8003164:	d1f3      	bne.n	800314e <__ieee754_rem_pio2+0x3be>
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <__ieee754_rem_pio2+0x410>)
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	2302      	movs	r3, #2
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	4622      	mov	r2, r4
 8003170:	465b      	mov	r3, fp
 8003172:	4651      	mov	r1, sl
 8003174:	4648      	mov	r0, r9
 8003176:	f000 f8df 	bl	8003338 <__kernel_rem_pio2>
 800317a:	9b02      	ldr	r3, [sp, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	4683      	mov	fp, r0
 8003180:	f6bf ae46 	bge.w	8002e10 <__ieee754_rem_pio2+0x80>
 8003184:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003188:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800318c:	f8ca 3004 	str.w	r3, [sl, #4]
 8003190:	f8da 300c 	ldr.w	r3, [sl, #12]
 8003194:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003198:	e73a      	b.n	8003010 <__ieee754_rem_pio2+0x280>
 800319a:	bf00      	nop
 800319c:	41700000 	.word	0x41700000
 80031a0:	08003e88 	.word	0x08003e88
 80031a4:	00000000 	.word	0x00000000

080031a8 <__kernel_cos>:
 80031a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ac:	ec57 6b10 	vmov	r6, r7, d0
 80031b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80031b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80031b8:	ed8d 1b00 	vstr	d1, [sp]
 80031bc:	da07      	bge.n	80031ce <__kernel_cos+0x26>
 80031be:	ee10 0a10 	vmov	r0, s0
 80031c2:	4639      	mov	r1, r7
 80031c4:	f7fd fc66 	bl	8000a94 <__aeabi_d2iz>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	f000 8088 	beq.w	80032de <__kernel_cos+0x136>
 80031ce:	4632      	mov	r2, r6
 80031d0:	463b      	mov	r3, r7
 80031d2:	4630      	mov	r0, r6
 80031d4:	4639      	mov	r1, r7
 80031d6:	f7fd f9c3 	bl	8000560 <__aeabi_dmul>
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <__kernel_cos+0x178>)
 80031dc:	2200      	movs	r2, #0
 80031de:	4604      	mov	r4, r0
 80031e0:	460d      	mov	r5, r1
 80031e2:	f7fd f9bd 	bl	8000560 <__aeabi_dmul>
 80031e6:	a340      	add	r3, pc, #256	; (adr r3, 80032e8 <__kernel_cos+0x140>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	4682      	mov	sl, r0
 80031ee:	468b      	mov	fp, r1
 80031f0:	4620      	mov	r0, r4
 80031f2:	4629      	mov	r1, r5
 80031f4:	f7fd f9b4 	bl	8000560 <__aeabi_dmul>
 80031f8:	a33d      	add	r3, pc, #244	; (adr r3, 80032f0 <__kernel_cos+0x148>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f7fc fff9 	bl	80001f4 <__adddf3>
 8003202:	4622      	mov	r2, r4
 8003204:	462b      	mov	r3, r5
 8003206:	f7fd f9ab 	bl	8000560 <__aeabi_dmul>
 800320a:	a33b      	add	r3, pc, #236	; (adr r3, 80032f8 <__kernel_cos+0x150>)
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	f7fc ffee 	bl	80001f0 <__aeabi_dsub>
 8003214:	4622      	mov	r2, r4
 8003216:	462b      	mov	r3, r5
 8003218:	f7fd f9a2 	bl	8000560 <__aeabi_dmul>
 800321c:	a338      	add	r3, pc, #224	; (adr r3, 8003300 <__kernel_cos+0x158>)
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f7fc ffe7 	bl	80001f4 <__adddf3>
 8003226:	4622      	mov	r2, r4
 8003228:	462b      	mov	r3, r5
 800322a:	f7fd f999 	bl	8000560 <__aeabi_dmul>
 800322e:	a336      	add	r3, pc, #216	; (adr r3, 8003308 <__kernel_cos+0x160>)
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	f7fc ffdc 	bl	80001f0 <__aeabi_dsub>
 8003238:	4622      	mov	r2, r4
 800323a:	462b      	mov	r3, r5
 800323c:	f7fd f990 	bl	8000560 <__aeabi_dmul>
 8003240:	a333      	add	r3, pc, #204	; (adr r3, 8003310 <__kernel_cos+0x168>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f7fc ffd5 	bl	80001f4 <__adddf3>
 800324a:	4622      	mov	r2, r4
 800324c:	462b      	mov	r3, r5
 800324e:	f7fd f987 	bl	8000560 <__aeabi_dmul>
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	f7fd f983 	bl	8000560 <__aeabi_dmul>
 800325a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800325e:	4604      	mov	r4, r0
 8003260:	460d      	mov	r5, r1
 8003262:	4630      	mov	r0, r6
 8003264:	4639      	mov	r1, r7
 8003266:	f7fd f97b 	bl	8000560 <__aeabi_dmul>
 800326a:	460b      	mov	r3, r1
 800326c:	4602      	mov	r2, r0
 800326e:	4629      	mov	r1, r5
 8003270:	4620      	mov	r0, r4
 8003272:	f7fc ffbd 	bl	80001f0 <__aeabi_dsub>
 8003276:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <__kernel_cos+0x17c>)
 8003278:	4598      	cmp	r8, r3
 800327a:	4606      	mov	r6, r0
 800327c:	460f      	mov	r7, r1
 800327e:	dc10      	bgt.n	80032a2 <__kernel_cos+0xfa>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4650      	mov	r0, sl
 8003286:	4659      	mov	r1, fp
 8003288:	f7fc ffb2 	bl	80001f0 <__aeabi_dsub>
 800328c:	460b      	mov	r3, r1
 800328e:	4926      	ldr	r1, [pc, #152]	; (8003328 <__kernel_cos+0x180>)
 8003290:	4602      	mov	r2, r0
 8003292:	2000      	movs	r0, #0
 8003294:	f7fc ffac 	bl	80001f0 <__aeabi_dsub>
 8003298:	ec41 0b10 	vmov	d0, r0, r1
 800329c:	b003      	add	sp, #12
 800329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a2:	4b22      	ldr	r3, [pc, #136]	; (800332c <__kernel_cos+0x184>)
 80032a4:	4920      	ldr	r1, [pc, #128]	; (8003328 <__kernel_cos+0x180>)
 80032a6:	4598      	cmp	r8, r3
 80032a8:	bfcc      	ite	gt
 80032aa:	4d21      	ldrgt	r5, [pc, #132]	; (8003330 <__kernel_cos+0x188>)
 80032ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80032b0:	2400      	movs	r4, #0
 80032b2:	4622      	mov	r2, r4
 80032b4:	462b      	mov	r3, r5
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7fc ff9a 	bl	80001f0 <__aeabi_dsub>
 80032bc:	4622      	mov	r2, r4
 80032be:	4680      	mov	r8, r0
 80032c0:	4689      	mov	r9, r1
 80032c2:	462b      	mov	r3, r5
 80032c4:	4650      	mov	r0, sl
 80032c6:	4659      	mov	r1, fp
 80032c8:	f7fc ff92 	bl	80001f0 <__aeabi_dsub>
 80032cc:	4632      	mov	r2, r6
 80032ce:	463b      	mov	r3, r7
 80032d0:	f7fc ff8e 	bl	80001f0 <__aeabi_dsub>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4640      	mov	r0, r8
 80032da:	4649      	mov	r1, r9
 80032dc:	e7da      	b.n	8003294 <__kernel_cos+0xec>
 80032de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003318 <__kernel_cos+0x170>
 80032e2:	e7db      	b.n	800329c <__kernel_cos+0xf4>
 80032e4:	f3af 8000 	nop.w
 80032e8:	be8838d4 	.word	0xbe8838d4
 80032ec:	bda8fae9 	.word	0xbda8fae9
 80032f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80032f4:	3e21ee9e 	.word	0x3e21ee9e
 80032f8:	809c52ad 	.word	0x809c52ad
 80032fc:	3e927e4f 	.word	0x3e927e4f
 8003300:	19cb1590 	.word	0x19cb1590
 8003304:	3efa01a0 	.word	0x3efa01a0
 8003308:	16c15177 	.word	0x16c15177
 800330c:	3f56c16c 	.word	0x3f56c16c
 8003310:	5555554c 	.word	0x5555554c
 8003314:	3fa55555 	.word	0x3fa55555
 8003318:	00000000 	.word	0x00000000
 800331c:	3ff00000 	.word	0x3ff00000
 8003320:	3fe00000 	.word	0x3fe00000
 8003324:	3fd33332 	.word	0x3fd33332
 8003328:	3ff00000 	.word	0x3ff00000
 800332c:	3fe90000 	.word	0x3fe90000
 8003330:	3fd20000 	.word	0x3fd20000
 8003334:	00000000 	.word	0x00000000

08003338 <__kernel_rem_pio2>:
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	ed2d 8b02 	vpush	{d8}
 8003340:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003344:	f112 0f14 	cmn.w	r2, #20
 8003348:	9308      	str	r3, [sp, #32]
 800334a:	9101      	str	r1, [sp, #4]
 800334c:	4bc6      	ldr	r3, [pc, #792]	; (8003668 <__kernel_rem_pio2+0x330>)
 800334e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003350:	9009      	str	r0, [sp, #36]	; 0x24
 8003352:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003356:	9304      	str	r3, [sp, #16]
 8003358:	9b08      	ldr	r3, [sp, #32]
 800335a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800335e:	bfa8      	it	ge
 8003360:	1ed4      	subge	r4, r2, #3
 8003362:	9306      	str	r3, [sp, #24]
 8003364:	bfb2      	itee	lt
 8003366:	2400      	movlt	r4, #0
 8003368:	2318      	movge	r3, #24
 800336a:	fb94 f4f3 	sdivge	r4, r4, r3
 800336e:	f06f 0317 	mvn.w	r3, #23
 8003372:	fb04 3303 	mla	r3, r4, r3, r3
 8003376:	eb03 0a02 	add.w	sl, r3, r2
 800337a:	9b04      	ldr	r3, [sp, #16]
 800337c:	9a06      	ldr	r2, [sp, #24]
 800337e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8003658 <__kernel_rem_pio2+0x320>
 8003382:	eb03 0802 	add.w	r8, r3, r2
 8003386:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003388:	1aa7      	subs	r7, r4, r2
 800338a:	ae20      	add	r6, sp, #128	; 0x80
 800338c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003390:	2500      	movs	r5, #0
 8003392:	4545      	cmp	r5, r8
 8003394:	dd18      	ble.n	80033c8 <__kernel_rem_pio2+0x90>
 8003396:	9b08      	ldr	r3, [sp, #32]
 8003398:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800339c:	aa20      	add	r2, sp, #128	; 0x80
 800339e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8003658 <__kernel_rem_pio2+0x320>
 80033a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80033a6:	f1c3 0301 	rsb	r3, r3, #1
 80033aa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80033ae:	9307      	str	r3, [sp, #28]
 80033b0:	9b07      	ldr	r3, [sp, #28]
 80033b2:	9a04      	ldr	r2, [sp, #16]
 80033b4:	4443      	add	r3, r8
 80033b6:	429a      	cmp	r2, r3
 80033b8:	db2f      	blt.n	800341a <__kernel_rem_pio2+0xe2>
 80033ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80033be:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80033c2:	462f      	mov	r7, r5
 80033c4:	2600      	movs	r6, #0
 80033c6:	e01b      	b.n	8003400 <__kernel_rem_pio2+0xc8>
 80033c8:	42ef      	cmn	r7, r5
 80033ca:	d407      	bmi.n	80033dc <__kernel_rem_pio2+0xa4>
 80033cc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80033d0:	f7fd f85c 	bl	800048c <__aeabi_i2d>
 80033d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80033d8:	3501      	adds	r5, #1
 80033da:	e7da      	b.n	8003392 <__kernel_rem_pio2+0x5a>
 80033dc:	ec51 0b18 	vmov	r0, r1, d8
 80033e0:	e7f8      	b.n	80033d4 <__kernel_rem_pio2+0x9c>
 80033e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033e6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80033ea:	f7fd f8b9 	bl	8000560 <__aeabi_dmul>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033f6:	f7fc fefd 	bl	80001f4 <__adddf3>
 80033fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033fe:	3601      	adds	r6, #1
 8003400:	9b06      	ldr	r3, [sp, #24]
 8003402:	429e      	cmp	r6, r3
 8003404:	f1a7 0708 	sub.w	r7, r7, #8
 8003408:	ddeb      	ble.n	80033e2 <__kernel_rem_pio2+0xaa>
 800340a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800340e:	3508      	adds	r5, #8
 8003410:	ecab 7b02 	vstmia	fp!, {d7}
 8003414:	f108 0801 	add.w	r8, r8, #1
 8003418:	e7ca      	b.n	80033b0 <__kernel_rem_pio2+0x78>
 800341a:	9b04      	ldr	r3, [sp, #16]
 800341c:	aa0c      	add	r2, sp, #48	; 0x30
 800341e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003422:	930b      	str	r3, [sp, #44]	; 0x2c
 8003424:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003426:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800342a:	9c04      	ldr	r4, [sp, #16]
 800342c:	930a      	str	r3, [sp, #40]	; 0x28
 800342e:	ab98      	add	r3, sp, #608	; 0x260
 8003430:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003434:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003438:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800343c:	f8cd b008 	str.w	fp, [sp, #8]
 8003440:	4625      	mov	r5, r4
 8003442:	2d00      	cmp	r5, #0
 8003444:	dc78      	bgt.n	8003538 <__kernel_rem_pio2+0x200>
 8003446:	ec47 6b10 	vmov	d0, r6, r7
 800344a:	4650      	mov	r0, sl
 800344c:	f000 fbfc 	bl	8003c48 <scalbn>
 8003450:	ec57 6b10 	vmov	r6, r7, d0
 8003454:	2200      	movs	r2, #0
 8003456:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800345a:	ee10 0a10 	vmov	r0, s0
 800345e:	4639      	mov	r1, r7
 8003460:	f7fd f87e 	bl	8000560 <__aeabi_dmul>
 8003464:	ec41 0b10 	vmov	d0, r0, r1
 8003468:	f000 fb6e 	bl	8003b48 <floor>
 800346c:	4b7f      	ldr	r3, [pc, #508]	; (800366c <__kernel_rem_pio2+0x334>)
 800346e:	ec51 0b10 	vmov	r0, r1, d0
 8003472:	2200      	movs	r2, #0
 8003474:	f7fd f874 	bl	8000560 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4630      	mov	r0, r6
 800347e:	4639      	mov	r1, r7
 8003480:	f7fc feb6 	bl	80001f0 <__aeabi_dsub>
 8003484:	460f      	mov	r7, r1
 8003486:	4606      	mov	r6, r0
 8003488:	f7fd fb04 	bl	8000a94 <__aeabi_d2iz>
 800348c:	9007      	str	r0, [sp, #28]
 800348e:	f7fc fffd 	bl	800048c <__aeabi_i2d>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4630      	mov	r0, r6
 8003498:	4639      	mov	r1, r7
 800349a:	f7fc fea9 	bl	80001f0 <__aeabi_dsub>
 800349e:	f1ba 0f00 	cmp.w	sl, #0
 80034a2:	4606      	mov	r6, r0
 80034a4:	460f      	mov	r7, r1
 80034a6:	dd70      	ble.n	800358a <__kernel_rem_pio2+0x252>
 80034a8:	1e62      	subs	r2, r4, #1
 80034aa:	ab0c      	add	r3, sp, #48	; 0x30
 80034ac:	9d07      	ldr	r5, [sp, #28]
 80034ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80034b2:	f1ca 0118 	rsb	r1, sl, #24
 80034b6:	fa40 f301 	asr.w	r3, r0, r1
 80034ba:	441d      	add	r5, r3
 80034bc:	408b      	lsls	r3, r1
 80034be:	1ac0      	subs	r0, r0, r3
 80034c0:	ab0c      	add	r3, sp, #48	; 0x30
 80034c2:	9507      	str	r5, [sp, #28]
 80034c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80034c8:	f1ca 0317 	rsb	r3, sl, #23
 80034cc:	fa40 f303 	asr.w	r3, r0, r3
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	9b02      	ldr	r3, [sp, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	dd66      	ble.n	80035a6 <__kernel_rem_pio2+0x26e>
 80034d8:	9b07      	ldr	r3, [sp, #28]
 80034da:	2200      	movs	r2, #0
 80034dc:	3301      	adds	r3, #1
 80034de:	9307      	str	r3, [sp, #28]
 80034e0:	4615      	mov	r5, r2
 80034e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80034e6:	4294      	cmp	r4, r2
 80034e8:	f300 8099 	bgt.w	800361e <__kernel_rem_pio2+0x2e6>
 80034ec:	f1ba 0f00 	cmp.w	sl, #0
 80034f0:	dd07      	ble.n	8003502 <__kernel_rem_pio2+0x1ca>
 80034f2:	f1ba 0f01 	cmp.w	sl, #1
 80034f6:	f000 80a5 	beq.w	8003644 <__kernel_rem_pio2+0x30c>
 80034fa:	f1ba 0f02 	cmp.w	sl, #2
 80034fe:	f000 80c1 	beq.w	8003684 <__kernel_rem_pio2+0x34c>
 8003502:	9b02      	ldr	r3, [sp, #8]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d14e      	bne.n	80035a6 <__kernel_rem_pio2+0x26e>
 8003508:	4632      	mov	r2, r6
 800350a:	463b      	mov	r3, r7
 800350c:	4958      	ldr	r1, [pc, #352]	; (8003670 <__kernel_rem_pio2+0x338>)
 800350e:	2000      	movs	r0, #0
 8003510:	f7fc fe6e 	bl	80001f0 <__aeabi_dsub>
 8003514:	4606      	mov	r6, r0
 8003516:	460f      	mov	r7, r1
 8003518:	2d00      	cmp	r5, #0
 800351a:	d044      	beq.n	80035a6 <__kernel_rem_pio2+0x26e>
 800351c:	4650      	mov	r0, sl
 800351e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8003660 <__kernel_rem_pio2+0x328>
 8003522:	f000 fb91 	bl	8003c48 <scalbn>
 8003526:	4630      	mov	r0, r6
 8003528:	4639      	mov	r1, r7
 800352a:	ec53 2b10 	vmov	r2, r3, d0
 800352e:	f7fc fe5f 	bl	80001f0 <__aeabi_dsub>
 8003532:	4606      	mov	r6, r0
 8003534:	460f      	mov	r7, r1
 8003536:	e036      	b.n	80035a6 <__kernel_rem_pio2+0x26e>
 8003538:	4b4e      	ldr	r3, [pc, #312]	; (8003674 <__kernel_rem_pio2+0x33c>)
 800353a:	2200      	movs	r2, #0
 800353c:	4630      	mov	r0, r6
 800353e:	4639      	mov	r1, r7
 8003540:	f7fd f80e 	bl	8000560 <__aeabi_dmul>
 8003544:	f7fd faa6 	bl	8000a94 <__aeabi_d2iz>
 8003548:	f7fc ffa0 	bl	800048c <__aeabi_i2d>
 800354c:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <__kernel_rem_pio2+0x340>)
 800354e:	2200      	movs	r2, #0
 8003550:	4680      	mov	r8, r0
 8003552:	4689      	mov	r9, r1
 8003554:	f7fd f804 	bl	8000560 <__aeabi_dmul>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4630      	mov	r0, r6
 800355e:	4639      	mov	r1, r7
 8003560:	f7fc fe46 	bl	80001f0 <__aeabi_dsub>
 8003564:	f7fd fa96 	bl	8000a94 <__aeabi_d2iz>
 8003568:	9b02      	ldr	r3, [sp, #8]
 800356a:	f843 0b04 	str.w	r0, [r3], #4
 800356e:	3d01      	subs	r5, #1
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	ab70      	add	r3, sp, #448	; 0x1c0
 8003574:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	4640      	mov	r0, r8
 800357e:	4649      	mov	r1, r9
 8003580:	f7fc fe38 	bl	80001f4 <__adddf3>
 8003584:	4606      	mov	r6, r0
 8003586:	460f      	mov	r7, r1
 8003588:	e75b      	b.n	8003442 <__kernel_rem_pio2+0x10a>
 800358a:	d105      	bne.n	8003598 <__kernel_rem_pio2+0x260>
 800358c:	1e63      	subs	r3, r4, #1
 800358e:	aa0c      	add	r2, sp, #48	; 0x30
 8003590:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003594:	15c3      	asrs	r3, r0, #23
 8003596:	e79b      	b.n	80034d0 <__kernel_rem_pio2+0x198>
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <__kernel_rem_pio2+0x344>)
 800359a:	2200      	movs	r2, #0
 800359c:	f7fd fa66 	bl	8000a6c <__aeabi_dcmpge>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d139      	bne.n	8003618 <__kernel_rem_pio2+0x2e0>
 80035a4:	9002      	str	r0, [sp, #8]
 80035a6:	2200      	movs	r2, #0
 80035a8:	2300      	movs	r3, #0
 80035aa:	4630      	mov	r0, r6
 80035ac:	4639      	mov	r1, r7
 80035ae:	f7fd fa3f 	bl	8000a30 <__aeabi_dcmpeq>
 80035b2:	2800      	cmp	r0, #0
 80035b4:	f000 80b4 	beq.w	8003720 <__kernel_rem_pio2+0x3e8>
 80035b8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80035bc:	465b      	mov	r3, fp
 80035be:	2200      	movs	r2, #0
 80035c0:	9904      	ldr	r1, [sp, #16]
 80035c2:	428b      	cmp	r3, r1
 80035c4:	da65      	bge.n	8003692 <__kernel_rem_pio2+0x35a>
 80035c6:	2a00      	cmp	r2, #0
 80035c8:	d07b      	beq.n	80036c2 <__kernel_rem_pio2+0x38a>
 80035ca:	ab0c      	add	r3, sp, #48	; 0x30
 80035cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80035d0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80a0 	beq.w	800371a <__kernel_rem_pio2+0x3e2>
 80035da:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8003660 <__kernel_rem_pio2+0x328>
 80035de:	4650      	mov	r0, sl
 80035e0:	f000 fb32 	bl	8003c48 <scalbn>
 80035e4:	4f23      	ldr	r7, [pc, #140]	; (8003674 <__kernel_rem_pio2+0x33c>)
 80035e6:	ec55 4b10 	vmov	r4, r5, d0
 80035ea:	46d8      	mov	r8, fp
 80035ec:	2600      	movs	r6, #0
 80035ee:	f1b8 0f00 	cmp.w	r8, #0
 80035f2:	f280 80cf 	bge.w	8003794 <__kernel_rem_pio2+0x45c>
 80035f6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8003658 <__kernel_rem_pio2+0x320>
 80035fa:	465f      	mov	r7, fp
 80035fc:	f04f 0800 	mov.w	r8, #0
 8003600:	2f00      	cmp	r7, #0
 8003602:	f2c0 80fd 	blt.w	8003800 <__kernel_rem_pio2+0x4c8>
 8003606:	ab70      	add	r3, sp, #448	; 0x1c0
 8003608:	f8df a074 	ldr.w	sl, [pc, #116]	; 8003680 <__kernel_rem_pio2+0x348>
 800360c:	ec55 4b18 	vmov	r4, r5, d8
 8003610:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8003614:	2600      	movs	r6, #0
 8003616:	e0e5      	b.n	80037e4 <__kernel_rem_pio2+0x4ac>
 8003618:	2302      	movs	r3, #2
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	e75c      	b.n	80034d8 <__kernel_rem_pio2+0x1a0>
 800361e:	f8db 3000 	ldr.w	r3, [fp]
 8003622:	b955      	cbnz	r5, 800363a <__kernel_rem_pio2+0x302>
 8003624:	b123      	cbz	r3, 8003630 <__kernel_rem_pio2+0x2f8>
 8003626:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800362a:	f8cb 3000 	str.w	r3, [fp]
 800362e:	2301      	movs	r3, #1
 8003630:	3201      	adds	r2, #1
 8003632:	f10b 0b04 	add.w	fp, fp, #4
 8003636:	461d      	mov	r5, r3
 8003638:	e755      	b.n	80034e6 <__kernel_rem_pio2+0x1ae>
 800363a:	1acb      	subs	r3, r1, r3
 800363c:	f8cb 3000 	str.w	r3, [fp]
 8003640:	462b      	mov	r3, r5
 8003642:	e7f5      	b.n	8003630 <__kernel_rem_pio2+0x2f8>
 8003644:	1e62      	subs	r2, r4, #1
 8003646:	ab0c      	add	r3, sp, #48	; 0x30
 8003648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800364c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003650:	a90c      	add	r1, sp, #48	; 0x30
 8003652:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003656:	e754      	b.n	8003502 <__kernel_rem_pio2+0x1ca>
	...
 8003664:	3ff00000 	.word	0x3ff00000
 8003668:	08003fd0 	.word	0x08003fd0
 800366c:	40200000 	.word	0x40200000
 8003670:	3ff00000 	.word	0x3ff00000
 8003674:	3e700000 	.word	0x3e700000
 8003678:	41700000 	.word	0x41700000
 800367c:	3fe00000 	.word	0x3fe00000
 8003680:	08003f90 	.word	0x08003f90
 8003684:	1e62      	subs	r2, r4, #1
 8003686:	ab0c      	add	r3, sp, #48	; 0x30
 8003688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003690:	e7de      	b.n	8003650 <__kernel_rem_pio2+0x318>
 8003692:	a90c      	add	r1, sp, #48	; 0x30
 8003694:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003698:	3b01      	subs	r3, #1
 800369a:	430a      	orrs	r2, r1
 800369c:	e790      	b.n	80035c0 <__kernel_rem_pio2+0x288>
 800369e:	3301      	adds	r3, #1
 80036a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80036a4:	2900      	cmp	r1, #0
 80036a6:	d0fa      	beq.n	800369e <__kernel_rem_pio2+0x366>
 80036a8:	9a08      	ldr	r2, [sp, #32]
 80036aa:	18e3      	adds	r3, r4, r3
 80036ac:	18a6      	adds	r6, r4, r2
 80036ae:	aa20      	add	r2, sp, #128	; 0x80
 80036b0:	1c65      	adds	r5, r4, #1
 80036b2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80036b6:	9302      	str	r3, [sp, #8]
 80036b8:	9b02      	ldr	r3, [sp, #8]
 80036ba:	42ab      	cmp	r3, r5
 80036bc:	da04      	bge.n	80036c8 <__kernel_rem_pio2+0x390>
 80036be:	461c      	mov	r4, r3
 80036c0:	e6b5      	b.n	800342e <__kernel_rem_pio2+0xf6>
 80036c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036c4:	2301      	movs	r3, #1
 80036c6:	e7eb      	b.n	80036a0 <__kernel_rem_pio2+0x368>
 80036c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80036ce:	f7fc fedd 	bl	800048c <__aeabi_i2d>
 80036d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80036d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d8:	46b3      	mov	fp, r6
 80036da:	461c      	mov	r4, r3
 80036dc:	2700      	movs	r7, #0
 80036de:	f04f 0800 	mov.w	r8, #0
 80036e2:	f04f 0900 	mov.w	r9, #0
 80036e6:	9b06      	ldr	r3, [sp, #24]
 80036e8:	429f      	cmp	r7, r3
 80036ea:	dd06      	ble.n	80036fa <__kernel_rem_pio2+0x3c2>
 80036ec:	ab70      	add	r3, sp, #448	; 0x1c0
 80036ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80036f2:	e9c3 8900 	strd	r8, r9, [r3]
 80036f6:	3501      	adds	r5, #1
 80036f8:	e7de      	b.n	80036b8 <__kernel_rem_pio2+0x380>
 80036fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80036fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003702:	f7fc ff2d 	bl	8000560 <__aeabi_dmul>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4640      	mov	r0, r8
 800370c:	4649      	mov	r1, r9
 800370e:	f7fc fd71 	bl	80001f4 <__adddf3>
 8003712:	3701      	adds	r7, #1
 8003714:	4680      	mov	r8, r0
 8003716:	4689      	mov	r9, r1
 8003718:	e7e5      	b.n	80036e6 <__kernel_rem_pio2+0x3ae>
 800371a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800371e:	e754      	b.n	80035ca <__kernel_rem_pio2+0x292>
 8003720:	ec47 6b10 	vmov	d0, r6, r7
 8003724:	f1ca 0000 	rsb	r0, sl, #0
 8003728:	f000 fa8e 	bl	8003c48 <scalbn>
 800372c:	ec57 6b10 	vmov	r6, r7, d0
 8003730:	4b9f      	ldr	r3, [pc, #636]	; (80039b0 <__kernel_rem_pio2+0x678>)
 8003732:	ee10 0a10 	vmov	r0, s0
 8003736:	2200      	movs	r2, #0
 8003738:	4639      	mov	r1, r7
 800373a:	f7fd f997 	bl	8000a6c <__aeabi_dcmpge>
 800373e:	b300      	cbz	r0, 8003782 <__kernel_rem_pio2+0x44a>
 8003740:	4b9c      	ldr	r3, [pc, #624]	; (80039b4 <__kernel_rem_pio2+0x67c>)
 8003742:	2200      	movs	r2, #0
 8003744:	4630      	mov	r0, r6
 8003746:	4639      	mov	r1, r7
 8003748:	f7fc ff0a 	bl	8000560 <__aeabi_dmul>
 800374c:	f7fd f9a2 	bl	8000a94 <__aeabi_d2iz>
 8003750:	4605      	mov	r5, r0
 8003752:	f7fc fe9b 	bl	800048c <__aeabi_i2d>
 8003756:	4b96      	ldr	r3, [pc, #600]	; (80039b0 <__kernel_rem_pio2+0x678>)
 8003758:	2200      	movs	r2, #0
 800375a:	f7fc ff01 	bl	8000560 <__aeabi_dmul>
 800375e:	460b      	mov	r3, r1
 8003760:	4602      	mov	r2, r0
 8003762:	4639      	mov	r1, r7
 8003764:	4630      	mov	r0, r6
 8003766:	f7fc fd43 	bl	80001f0 <__aeabi_dsub>
 800376a:	f7fd f993 	bl	8000a94 <__aeabi_d2iz>
 800376e:	f104 0b01 	add.w	fp, r4, #1
 8003772:	ab0c      	add	r3, sp, #48	; 0x30
 8003774:	f10a 0a18 	add.w	sl, sl, #24
 8003778:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800377c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8003780:	e72b      	b.n	80035da <__kernel_rem_pio2+0x2a2>
 8003782:	4630      	mov	r0, r6
 8003784:	4639      	mov	r1, r7
 8003786:	f7fd f985 	bl	8000a94 <__aeabi_d2iz>
 800378a:	ab0c      	add	r3, sp, #48	; 0x30
 800378c:	46a3      	mov	fp, r4
 800378e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003792:	e722      	b.n	80035da <__kernel_rem_pio2+0x2a2>
 8003794:	ab70      	add	r3, sp, #448	; 0x1c0
 8003796:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800379a:	ab0c      	add	r3, sp, #48	; 0x30
 800379c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80037a0:	f7fc fe74 	bl	800048c <__aeabi_i2d>
 80037a4:	4622      	mov	r2, r4
 80037a6:	462b      	mov	r3, r5
 80037a8:	f7fc feda 	bl	8000560 <__aeabi_dmul>
 80037ac:	4632      	mov	r2, r6
 80037ae:	e9c9 0100 	strd	r0, r1, [r9]
 80037b2:	463b      	mov	r3, r7
 80037b4:	4620      	mov	r0, r4
 80037b6:	4629      	mov	r1, r5
 80037b8:	f7fc fed2 	bl	8000560 <__aeabi_dmul>
 80037bc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80037c0:	4604      	mov	r4, r0
 80037c2:	460d      	mov	r5, r1
 80037c4:	e713      	b.n	80035ee <__kernel_rem_pio2+0x2b6>
 80037c6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80037ca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80037ce:	f7fc fec7 	bl	8000560 <__aeabi_dmul>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4620      	mov	r0, r4
 80037d8:	4629      	mov	r1, r5
 80037da:	f7fc fd0b 	bl	80001f4 <__adddf3>
 80037de:	3601      	adds	r6, #1
 80037e0:	4604      	mov	r4, r0
 80037e2:	460d      	mov	r5, r1
 80037e4:	9b04      	ldr	r3, [sp, #16]
 80037e6:	429e      	cmp	r6, r3
 80037e8:	dc01      	bgt.n	80037ee <__kernel_rem_pio2+0x4b6>
 80037ea:	45b0      	cmp	r8, r6
 80037ec:	daeb      	bge.n	80037c6 <__kernel_rem_pio2+0x48e>
 80037ee:	ab48      	add	r3, sp, #288	; 0x120
 80037f0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80037f4:	e9c3 4500 	strd	r4, r5, [r3]
 80037f8:	3f01      	subs	r7, #1
 80037fa:	f108 0801 	add.w	r8, r8, #1
 80037fe:	e6ff      	b.n	8003600 <__kernel_rem_pio2+0x2c8>
 8003800:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003802:	2b02      	cmp	r3, #2
 8003804:	dc0b      	bgt.n	800381e <__kernel_rem_pio2+0x4e6>
 8003806:	2b00      	cmp	r3, #0
 8003808:	dc6e      	bgt.n	80038e8 <__kernel_rem_pio2+0x5b0>
 800380a:	d045      	beq.n	8003898 <__kernel_rem_pio2+0x560>
 800380c:	9b07      	ldr	r3, [sp, #28]
 800380e:	f003 0007 	and.w	r0, r3, #7
 8003812:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003816:	ecbd 8b02 	vpop	{d8}
 800381a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003820:	2b03      	cmp	r3, #3
 8003822:	d1f3      	bne.n	800380c <__kernel_rem_pio2+0x4d4>
 8003824:	ab48      	add	r3, sp, #288	; 0x120
 8003826:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800382a:	46d0      	mov	r8, sl
 800382c:	46d9      	mov	r9, fp
 800382e:	f1b9 0f00 	cmp.w	r9, #0
 8003832:	f1a8 0808 	sub.w	r8, r8, #8
 8003836:	dc64      	bgt.n	8003902 <__kernel_rem_pio2+0x5ca>
 8003838:	465c      	mov	r4, fp
 800383a:	2c01      	cmp	r4, #1
 800383c:	f1aa 0a08 	sub.w	sl, sl, #8
 8003840:	dc7e      	bgt.n	8003940 <__kernel_rem_pio2+0x608>
 8003842:	2000      	movs	r0, #0
 8003844:	2100      	movs	r1, #0
 8003846:	f1bb 0f01 	cmp.w	fp, #1
 800384a:	f300 8097 	bgt.w	800397c <__kernel_rem_pio2+0x644>
 800384e:	9b02      	ldr	r3, [sp, #8]
 8003850:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8003854:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8003858:	2b00      	cmp	r3, #0
 800385a:	f040 8099 	bne.w	8003990 <__kernel_rem_pio2+0x658>
 800385e:	9b01      	ldr	r3, [sp, #4]
 8003860:	e9c3 5600 	strd	r5, r6, [r3]
 8003864:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8003868:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800386c:	e7ce      	b.n	800380c <__kernel_rem_pio2+0x4d4>
 800386e:	ab48      	add	r3, sp, #288	; 0x120
 8003870:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f7fc fcbc 	bl	80001f4 <__adddf3>
 800387c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003880:	f1bb 0f00 	cmp.w	fp, #0
 8003884:	daf3      	bge.n	800386e <__kernel_rem_pio2+0x536>
 8003886:	9b02      	ldr	r3, [sp, #8]
 8003888:	b113      	cbz	r3, 8003890 <__kernel_rem_pio2+0x558>
 800388a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800388e:	4619      	mov	r1, r3
 8003890:	9b01      	ldr	r3, [sp, #4]
 8003892:	e9c3 0100 	strd	r0, r1, [r3]
 8003896:	e7b9      	b.n	800380c <__kernel_rem_pio2+0x4d4>
 8003898:	2000      	movs	r0, #0
 800389a:	2100      	movs	r1, #0
 800389c:	e7f0      	b.n	8003880 <__kernel_rem_pio2+0x548>
 800389e:	ab48      	add	r3, sp, #288	; 0x120
 80038a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f7fc fca4 	bl	80001f4 <__adddf3>
 80038ac:	3c01      	subs	r4, #1
 80038ae:	2c00      	cmp	r4, #0
 80038b0:	daf5      	bge.n	800389e <__kernel_rem_pio2+0x566>
 80038b2:	9b02      	ldr	r3, [sp, #8]
 80038b4:	b1e3      	cbz	r3, 80038f0 <__kernel_rem_pio2+0x5b8>
 80038b6:	4602      	mov	r2, r0
 80038b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80038bc:	9c01      	ldr	r4, [sp, #4]
 80038be:	e9c4 2300 	strd	r2, r3, [r4]
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80038ca:	f7fc fc91 	bl	80001f0 <__aeabi_dsub>
 80038ce:	ad4a      	add	r5, sp, #296	; 0x128
 80038d0:	2401      	movs	r4, #1
 80038d2:	45a3      	cmp	fp, r4
 80038d4:	da0f      	bge.n	80038f6 <__kernel_rem_pio2+0x5be>
 80038d6:	9b02      	ldr	r3, [sp, #8]
 80038d8:	b113      	cbz	r3, 80038e0 <__kernel_rem_pio2+0x5a8>
 80038da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80038de:	4619      	mov	r1, r3
 80038e0:	9b01      	ldr	r3, [sp, #4]
 80038e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80038e6:	e791      	b.n	800380c <__kernel_rem_pio2+0x4d4>
 80038e8:	465c      	mov	r4, fp
 80038ea:	2000      	movs	r0, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	e7de      	b.n	80038ae <__kernel_rem_pio2+0x576>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	e7e2      	b.n	80038bc <__kernel_rem_pio2+0x584>
 80038f6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80038fa:	f7fc fc7b 	bl	80001f4 <__adddf3>
 80038fe:	3401      	adds	r4, #1
 8003900:	e7e7      	b.n	80038d2 <__kernel_rem_pio2+0x59a>
 8003902:	e9d8 4500 	ldrd	r4, r5, [r8]
 8003906:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800390a:	4620      	mov	r0, r4
 800390c:	4632      	mov	r2, r6
 800390e:	463b      	mov	r3, r7
 8003910:	4629      	mov	r1, r5
 8003912:	f7fc fc6f 	bl	80001f4 <__adddf3>
 8003916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4620      	mov	r0, r4
 8003920:	4629      	mov	r1, r5
 8003922:	f7fc fc65 	bl	80001f0 <__aeabi_dsub>
 8003926:	4632      	mov	r2, r6
 8003928:	463b      	mov	r3, r7
 800392a:	f7fc fc63 	bl	80001f4 <__adddf3>
 800392e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003932:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8003936:	ed88 7b00 	vstr	d7, [r8]
 800393a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800393e:	e776      	b.n	800382e <__kernel_rem_pio2+0x4f6>
 8003940:	e9da 8900 	ldrd	r8, r9, [sl]
 8003944:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003948:	4640      	mov	r0, r8
 800394a:	4632      	mov	r2, r6
 800394c:	463b      	mov	r3, r7
 800394e:	4649      	mov	r1, r9
 8003950:	f7fc fc50 	bl	80001f4 <__adddf3>
 8003954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4640      	mov	r0, r8
 800395e:	4649      	mov	r1, r9
 8003960:	f7fc fc46 	bl	80001f0 <__aeabi_dsub>
 8003964:	4632      	mov	r2, r6
 8003966:	463b      	mov	r3, r7
 8003968:	f7fc fc44 	bl	80001f4 <__adddf3>
 800396c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003970:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003974:	ed8a 7b00 	vstr	d7, [sl]
 8003978:	3c01      	subs	r4, #1
 800397a:	e75e      	b.n	800383a <__kernel_rem_pio2+0x502>
 800397c:	ab48      	add	r3, sp, #288	; 0x120
 800397e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f7fc fc35 	bl	80001f4 <__adddf3>
 800398a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800398e:	e75a      	b.n	8003846 <__kernel_rem_pio2+0x50e>
 8003990:	9b01      	ldr	r3, [sp, #4]
 8003992:	9a01      	ldr	r2, [sp, #4]
 8003994:	601d      	str	r5, [r3, #0]
 8003996:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800399a:	605c      	str	r4, [r3, #4]
 800399c:	609f      	str	r7, [r3, #8]
 800399e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80039a2:	60d3      	str	r3, [r2, #12]
 80039a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039a8:	6110      	str	r0, [r2, #16]
 80039aa:	6153      	str	r3, [r2, #20]
 80039ac:	e72e      	b.n	800380c <__kernel_rem_pio2+0x4d4>
 80039ae:	bf00      	nop
 80039b0:	41700000 	.word	0x41700000
 80039b4:	3e700000 	.word	0x3e700000

080039b8 <__kernel_sin>:
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	ed2d 8b04 	vpush	{d8-d9}
 80039c0:	eeb0 8a41 	vmov.f32	s16, s2
 80039c4:	eef0 8a61 	vmov.f32	s17, s3
 80039c8:	ec55 4b10 	vmov	r4, r5, d0
 80039cc:	b083      	sub	sp, #12
 80039ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80039d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80039d6:	9001      	str	r0, [sp, #4]
 80039d8:	da06      	bge.n	80039e8 <__kernel_sin+0x30>
 80039da:	ee10 0a10 	vmov	r0, s0
 80039de:	4629      	mov	r1, r5
 80039e0:	f7fd f858 	bl	8000a94 <__aeabi_d2iz>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d051      	beq.n	8003a8c <__kernel_sin+0xd4>
 80039e8:	4622      	mov	r2, r4
 80039ea:	462b      	mov	r3, r5
 80039ec:	4620      	mov	r0, r4
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7fc fdb6 	bl	8000560 <__aeabi_dmul>
 80039f4:	4682      	mov	sl, r0
 80039f6:	468b      	mov	fp, r1
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4620      	mov	r0, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7fc fdae 	bl	8000560 <__aeabi_dmul>
 8003a04:	a341      	add	r3, pc, #260	; (adr r3, 8003b0c <__kernel_sin+0x154>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	4680      	mov	r8, r0
 8003a0c:	4689      	mov	r9, r1
 8003a0e:	4650      	mov	r0, sl
 8003a10:	4659      	mov	r1, fp
 8003a12:	f7fc fda5 	bl	8000560 <__aeabi_dmul>
 8003a16:	a33f      	add	r3, pc, #252	; (adr r3, 8003b14 <__kernel_sin+0x15c>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fc fbe8 	bl	80001f0 <__aeabi_dsub>
 8003a20:	4652      	mov	r2, sl
 8003a22:	465b      	mov	r3, fp
 8003a24:	f7fc fd9c 	bl	8000560 <__aeabi_dmul>
 8003a28:	a33c      	add	r3, pc, #240	; (adr r3, 8003b1c <__kernel_sin+0x164>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fbe1 	bl	80001f4 <__adddf3>
 8003a32:	4652      	mov	r2, sl
 8003a34:	465b      	mov	r3, fp
 8003a36:	f7fc fd93 	bl	8000560 <__aeabi_dmul>
 8003a3a:	a33a      	add	r3, pc, #232	; (adr r3, 8003b24 <__kernel_sin+0x16c>)
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f7fc fbd6 	bl	80001f0 <__aeabi_dsub>
 8003a44:	4652      	mov	r2, sl
 8003a46:	465b      	mov	r3, fp
 8003a48:	f7fc fd8a 	bl	8000560 <__aeabi_dmul>
 8003a4c:	a337      	add	r3, pc, #220	; (adr r3, 8003b2c <__kernel_sin+0x174>)
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f7fc fbcf 	bl	80001f4 <__adddf3>
 8003a56:	9b01      	ldr	r3, [sp, #4]
 8003a58:	4606      	mov	r6, r0
 8003a5a:	460f      	mov	r7, r1
 8003a5c:	b9eb      	cbnz	r3, 8003a9a <__kernel_sin+0xe2>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4650      	mov	r0, sl
 8003a64:	4659      	mov	r1, fp
 8003a66:	f7fc fd7b 	bl	8000560 <__aeabi_dmul>
 8003a6a:	a325      	add	r3, pc, #148	; (adr r3, 8003b00 <__kernel_sin+0x148>)
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	f7fc fbbe 	bl	80001f0 <__aeabi_dsub>
 8003a74:	4642      	mov	r2, r8
 8003a76:	464b      	mov	r3, r9
 8003a78:	f7fc fd72 	bl	8000560 <__aeabi_dmul>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4620      	mov	r0, r4
 8003a82:	4629      	mov	r1, r5
 8003a84:	f7fc fbb6 	bl	80001f4 <__adddf3>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	460d      	mov	r5, r1
 8003a8c:	ec45 4b10 	vmov	d0, r4, r5
 8003a90:	b003      	add	sp, #12
 8003a92:	ecbd 8b04 	vpop	{d8-d9}
 8003a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <__kernel_sin+0x150>)
 8003a9c:	ec51 0b18 	vmov	r0, r1, d8
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f7fc fd5d 	bl	8000560 <__aeabi_dmul>
 8003aa6:	4632      	mov	r2, r6
 8003aa8:	ec41 0b19 	vmov	d9, r0, r1
 8003aac:	463b      	mov	r3, r7
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	f7fc fd55 	bl	8000560 <__aeabi_dmul>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	ec51 0b19 	vmov	r0, r1, d9
 8003abe:	f7fc fb97 	bl	80001f0 <__aeabi_dsub>
 8003ac2:	4652      	mov	r2, sl
 8003ac4:	465b      	mov	r3, fp
 8003ac6:	f7fc fd4b 	bl	8000560 <__aeabi_dmul>
 8003aca:	ec53 2b18 	vmov	r2, r3, d8
 8003ace:	f7fc fb8f 	bl	80001f0 <__aeabi_dsub>
 8003ad2:	a30b      	add	r3, pc, #44	; (adr r3, 8003b00 <__kernel_sin+0x148>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	4606      	mov	r6, r0
 8003ada:	460f      	mov	r7, r1
 8003adc:	4640      	mov	r0, r8
 8003ade:	4649      	mov	r1, r9
 8003ae0:	f7fc fd3e 	bl	8000560 <__aeabi_dmul>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4630      	mov	r0, r6
 8003aea:	4639      	mov	r1, r7
 8003aec:	f7fc fb82 	bl	80001f4 <__adddf3>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4620      	mov	r0, r4
 8003af6:	4629      	mov	r1, r5
 8003af8:	f7fc fb7a 	bl	80001f0 <__aeabi_dsub>
 8003afc:	e7c4      	b.n	8003a88 <__kernel_sin+0xd0>
 8003afe:	bf00      	nop
 8003b00:	55555549 	.word	0x55555549
 8003b04:	3fc55555 	.word	0x3fc55555
 8003b08:	3fe00000 	.word	0x3fe00000
 8003b0c:	5acfd57c 	.word	0x5acfd57c
 8003b10:	3de5d93a 	.word	0x3de5d93a
 8003b14:	8a2b9ceb 	.word	0x8a2b9ceb
 8003b18:	3e5ae5e6 	.word	0x3e5ae5e6
 8003b1c:	57b1fe7d 	.word	0x57b1fe7d
 8003b20:	3ec71de3 	.word	0x3ec71de3
 8003b24:	19c161d5 	.word	0x19c161d5
 8003b28:	3f2a01a0 	.word	0x3f2a01a0
 8003b2c:	1110f8a6 	.word	0x1110f8a6
 8003b30:	3f811111 	.word	0x3f811111

08003b34 <fabs>:
 8003b34:	ec51 0b10 	vmov	r0, r1, d0
 8003b38:	ee10 2a10 	vmov	r2, s0
 8003b3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003b40:	ec43 2b10 	vmov	d0, r2, r3
 8003b44:	4770      	bx	lr
	...

08003b48 <floor>:
 8003b48:	ec51 0b10 	vmov	r0, r1, d0
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003b54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003b58:	2e13      	cmp	r6, #19
 8003b5a:	ee10 5a10 	vmov	r5, s0
 8003b5e:	ee10 8a10 	vmov	r8, s0
 8003b62:	460c      	mov	r4, r1
 8003b64:	dc32      	bgt.n	8003bcc <floor+0x84>
 8003b66:	2e00      	cmp	r6, #0
 8003b68:	da14      	bge.n	8003b94 <floor+0x4c>
 8003b6a:	a333      	add	r3, pc, #204	; (adr r3, 8003c38 <floor+0xf0>)
 8003b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b70:	f7fc fb40 	bl	80001f4 <__adddf3>
 8003b74:	2200      	movs	r2, #0
 8003b76:	2300      	movs	r3, #0
 8003b78:	f7fc ff82 	bl	8000a80 <__aeabi_dcmpgt>
 8003b7c:	b138      	cbz	r0, 8003b8e <floor+0x46>
 8003b7e:	2c00      	cmp	r4, #0
 8003b80:	da57      	bge.n	8003c32 <floor+0xea>
 8003b82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003b86:	431d      	orrs	r5, r3
 8003b88:	d001      	beq.n	8003b8e <floor+0x46>
 8003b8a:	4c2d      	ldr	r4, [pc, #180]	; (8003c40 <floor+0xf8>)
 8003b8c:	2500      	movs	r5, #0
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4628      	mov	r0, r5
 8003b92:	e025      	b.n	8003be0 <floor+0x98>
 8003b94:	4f2b      	ldr	r7, [pc, #172]	; (8003c44 <floor+0xfc>)
 8003b96:	4137      	asrs	r7, r6
 8003b98:	ea01 0307 	and.w	r3, r1, r7
 8003b9c:	4303      	orrs	r3, r0
 8003b9e:	d01f      	beq.n	8003be0 <floor+0x98>
 8003ba0:	a325      	add	r3, pc, #148	; (adr r3, 8003c38 <floor+0xf0>)
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f7fc fb25 	bl	80001f4 <__adddf3>
 8003baa:	2200      	movs	r2, #0
 8003bac:	2300      	movs	r3, #0
 8003bae:	f7fc ff67 	bl	8000a80 <__aeabi_dcmpgt>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d0eb      	beq.n	8003b8e <floor+0x46>
 8003bb6:	2c00      	cmp	r4, #0
 8003bb8:	bfbe      	ittt	lt
 8003bba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003bbe:	fa43 f606 	asrlt.w	r6, r3, r6
 8003bc2:	19a4      	addlt	r4, r4, r6
 8003bc4:	ea24 0407 	bic.w	r4, r4, r7
 8003bc8:	2500      	movs	r5, #0
 8003bca:	e7e0      	b.n	8003b8e <floor+0x46>
 8003bcc:	2e33      	cmp	r6, #51	; 0x33
 8003bce:	dd0b      	ble.n	8003be8 <floor+0xa0>
 8003bd0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003bd4:	d104      	bne.n	8003be0 <floor+0x98>
 8003bd6:	ee10 2a10 	vmov	r2, s0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	f7fc fb0a 	bl	80001f4 <__adddf3>
 8003be0:	ec41 0b10 	vmov	d0, r0, r1
 8003be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bf0:	fa23 f707 	lsr.w	r7, r3, r7
 8003bf4:	4207      	tst	r7, r0
 8003bf6:	d0f3      	beq.n	8003be0 <floor+0x98>
 8003bf8:	a30f      	add	r3, pc, #60	; (adr r3, 8003c38 <floor+0xf0>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f7fc faf9 	bl	80001f4 <__adddf3>
 8003c02:	2200      	movs	r2, #0
 8003c04:	2300      	movs	r3, #0
 8003c06:	f7fc ff3b 	bl	8000a80 <__aeabi_dcmpgt>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d0bf      	beq.n	8003b8e <floor+0x46>
 8003c0e:	2c00      	cmp	r4, #0
 8003c10:	da02      	bge.n	8003c18 <floor+0xd0>
 8003c12:	2e14      	cmp	r6, #20
 8003c14:	d103      	bne.n	8003c1e <floor+0xd6>
 8003c16:	3401      	adds	r4, #1
 8003c18:	ea25 0507 	bic.w	r5, r5, r7
 8003c1c:	e7b7      	b.n	8003b8e <floor+0x46>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003c24:	fa03 f606 	lsl.w	r6, r3, r6
 8003c28:	4435      	add	r5, r6
 8003c2a:	4545      	cmp	r5, r8
 8003c2c:	bf38      	it	cc
 8003c2e:	18e4      	addcc	r4, r4, r3
 8003c30:	e7f2      	b.n	8003c18 <floor+0xd0>
 8003c32:	2500      	movs	r5, #0
 8003c34:	462c      	mov	r4, r5
 8003c36:	e7aa      	b.n	8003b8e <floor+0x46>
 8003c38:	8800759c 	.word	0x8800759c
 8003c3c:	7e37e43c 	.word	0x7e37e43c
 8003c40:	bff00000 	.word	0xbff00000
 8003c44:	000fffff 	.word	0x000fffff

08003c48 <scalbn>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	ec55 4b10 	vmov	r4, r5, d0
 8003c4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8003c52:	4606      	mov	r6, r0
 8003c54:	462b      	mov	r3, r5
 8003c56:	b99a      	cbnz	r2, 8003c80 <scalbn+0x38>
 8003c58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003c5c:	4323      	orrs	r3, r4
 8003c5e:	d036      	beq.n	8003cce <scalbn+0x86>
 8003c60:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <scalbn+0x100>)
 8003c62:	4629      	mov	r1, r5
 8003c64:	ee10 0a10 	vmov	r0, s0
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f7fc fc79 	bl	8000560 <__aeabi_dmul>
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <scalbn+0x104>)
 8003c70:	429e      	cmp	r6, r3
 8003c72:	4604      	mov	r4, r0
 8003c74:	460d      	mov	r5, r1
 8003c76:	da10      	bge.n	8003c9a <scalbn+0x52>
 8003c78:	a32b      	add	r3, pc, #172	; (adr r3, 8003d28 <scalbn+0xe0>)
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	e03a      	b.n	8003cf6 <scalbn+0xae>
 8003c80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003c84:	428a      	cmp	r2, r1
 8003c86:	d10c      	bne.n	8003ca2 <scalbn+0x5a>
 8003c88:	ee10 2a10 	vmov	r2, s0
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	f7fc fab0 	bl	80001f4 <__adddf3>
 8003c94:	4604      	mov	r4, r0
 8003c96:	460d      	mov	r5, r1
 8003c98:	e019      	b.n	8003cce <scalbn+0x86>
 8003c9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	3a36      	subs	r2, #54	; 0x36
 8003ca2:	4432      	add	r2, r6
 8003ca4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003ca8:	428a      	cmp	r2, r1
 8003caa:	dd08      	ble.n	8003cbe <scalbn+0x76>
 8003cac:	2d00      	cmp	r5, #0
 8003cae:	a120      	add	r1, pc, #128	; (adr r1, 8003d30 <scalbn+0xe8>)
 8003cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cb4:	da1c      	bge.n	8003cf0 <scalbn+0xa8>
 8003cb6:	a120      	add	r1, pc, #128	; (adr r1, 8003d38 <scalbn+0xf0>)
 8003cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cbc:	e018      	b.n	8003cf0 <scalbn+0xa8>
 8003cbe:	2a00      	cmp	r2, #0
 8003cc0:	dd08      	ble.n	8003cd4 <scalbn+0x8c>
 8003cc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003cc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003cca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003cce:	ec45 4b10 	vmov	d0, r4, r5
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}
 8003cd4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003cd8:	da19      	bge.n	8003d0e <scalbn+0xc6>
 8003cda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003cde:	429e      	cmp	r6, r3
 8003ce0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8003ce4:	dd0a      	ble.n	8003cfc <scalbn+0xb4>
 8003ce6:	a112      	add	r1, pc, #72	; (adr r1, 8003d30 <scalbn+0xe8>)
 8003ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e2      	bne.n	8003cb6 <scalbn+0x6e>
 8003cf0:	a30f      	add	r3, pc, #60	; (adr r3, 8003d30 <scalbn+0xe8>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fc33 	bl	8000560 <__aeabi_dmul>
 8003cfa:	e7cb      	b.n	8003c94 <scalbn+0x4c>
 8003cfc:	a10a      	add	r1, pc, #40	; (adr r1, 8003d28 <scalbn+0xe0>)
 8003cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0b8      	beq.n	8003c78 <scalbn+0x30>
 8003d06:	a10e      	add	r1, pc, #56	; (adr r1, 8003d40 <scalbn+0xf8>)
 8003d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d0c:	e7b4      	b.n	8003c78 <scalbn+0x30>
 8003d0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003d12:	3236      	adds	r2, #54	; 0x36
 8003d14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <scalbn+0x108>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	e7e8      	b.n	8003cf6 <scalbn+0xae>
 8003d24:	f3af 8000 	nop.w
 8003d28:	c2f8f359 	.word	0xc2f8f359
 8003d2c:	01a56e1f 	.word	0x01a56e1f
 8003d30:	8800759c 	.word	0x8800759c
 8003d34:	7e37e43c 	.word	0x7e37e43c
 8003d38:	8800759c 	.word	0x8800759c
 8003d3c:	fe37e43c 	.word	0xfe37e43c
 8003d40:	c2f8f359 	.word	0xc2f8f359
 8003d44:	81a56e1f 	.word	0x81a56e1f
 8003d48:	43500000 	.word	0x43500000
 8003d4c:	ffff3cb0 	.word	0xffff3cb0
 8003d50:	3c900000 	.word	0x3c900000

08003d54 <_init>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr

08003d60 <_fini>:
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	bf00      	nop
 8003d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d66:	bc08      	pop	{r3}
 8003d68:	469e      	mov	lr, r3
 8003d6a:	4770      	bx	lr
